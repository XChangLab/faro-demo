{"version":3,"file":"_next/static/chunks/pages/_app-1b0d2a8a05b2d9a9.js","mappings":"yQAAA,OAUA,cAEA,aAOA,IAGA,aACA,cACA,WACA,WACA,UACA,UACA,SACA,SACA,WACA,YACA,iBACA,YACA,WACA,WACA,YACA,aACA,aAGA,WACA,UACA,SACA,eACA,YACA,WAEA,YACA,WACA,UACA,WAGA,cACA,aACA,WACA,YACA,UACA,SACA,YACA,UACA,SACA,WACA,UACA,aACA,gBACA,WACA,aAMA,gBACA,SACA,eACA,uBACA,uBAEA,UAGA,QACA,CAAS,CACT,cAEA,QADA,KACA,IAA0B,WAAc,IACxC,2BAEA,QACA,CAAS,CACT,gBACA,4CACA,CAAS,CACT,cACA,sBACA,CAAS,CAIT,gBACA,gBAEA,OADA,qBAnFA,IAoFA,6BAjEA,IAmEA,EAMA,gBAKA,IAHA,oBAGA,iBAEA,WACA,SAIA,GAJ6C,CAC7C,MAKA,EAFA,cAEA,MAGA,EAHqC,CACrC,iBAGA,QAAoC,WAAkB,IACtD,SAGA,MAFA,WAEA,cACA,aACA,eAEA,6BAGA,gBAEkC,aAElC,sCAKA,kCA5IA,OAyIA,oCAzIA,OA8IkC,cAClC,sDAGA,aAKA,IACA,CACA,CAAS,CAET,iBAEA,eAEA,kCACA,aAAoC,cAAmB,IACvD,gBACA,iBAEA,MACkB,aAClB,kBAGA,qCACA,EAiBA,IACA,UACA,mBACA,iBACA,aACA,uBACA,eACA,WACA,WACA,eACA,wBACA,QACA,EAMA,IAEA,UAEA,+BACA,mBACA,8BACA,iBAGA,4BACA,oBAAgC,IAAI,2BACpC,0CACA,QACA,wBACA,oBACA,2BACA,kBACA,oBACA,YAGA,kCAA8C,IAAI,mBAClD,kBACA,8CACA,oBACA,uBACA,uEAGA,4DACA,2BAGA,+NAEA,sCACA,sBACA,QACA,4BACA,kBACA,oBACA,uBACA,oDACA,iBACA,+BACA,+BACA,6BACA,mBACA,wBACA,sBACA,wBAAoC,IAAI,kBACxC,eACA,mCACA,mBACA,wBACA,4BACA,0BACA,gCACA,sBACA,qBACA,oBACA,qBACA,yBACA,oBACA,qBACA,oBACA,oBACA,qBACA,0BACA,mBACA,qBACA,YACA,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,EAAE,WACxB,wBACA,UAAsB,EAAE,MACxB,wBACA,uBACA,uBACA,WAAuB,EAAE,MACzB,6BAAyC,EAAE,MAC3C,+BACA,WAAuB,IAAI,MAC3B,2BACA,mBAA+B,IAAI,MACnC,2BACA,mDACA,wBACA,0BACA,wBACA,aACA,4BACA,sCACA,0BACA,uBACA,4BACA,iBACA,wBACA,uDACA,kBACA,kBACA,cACA,eAA2B,EAAE,IAC7B,8BACA,UAAsB,8CACtB,kBACA,UAAsB,8BACtB,kBAMA,uBACA,YACA,cAA0B,QAC1B,kCACA,OAAmB,sDACnB,KAjoBA,KAioBA,SACA,eACA,wBACA,SACA,6BACA,4BACA,kBACA,mBACA,kBACA,UAAsB,aACtB,sBACA,kBACA,2BACA,kBACA,yBACA,kBACA,yBAAqC,GACrC,cACA,0CACA,mCAA+C,WAAW,IAAI,IAAI,MAClE,sBAEA,UAAsB,wCACtB,YACA,yCAAqD,SACrD,UAMA,UACA,6BACA,cACA,UAAsB,oBACtB,kBACA,qBACA,kBACA,sBAAkC,WAAW,IAC7C,kBAMA,8CACA,kBACA,iBACA,6DACA,cACA,uBAAmC,IAAI,IACvC,kBACA,uCACA,kBACA,UAAsB,EAAE,IACxB,kBACA,cACA,kBACA,kBACA,kBACA,eACA,OA9rBA,KA8rBA,SACA,UAAsB,QAAQ,IAAI,MAClC,kBAMA,UAAsB,aACtB,kBACA,iCACA,cACA,GAAe,qBACf,kBAMA,uCACA,YACA,aACA,kBACA,qBACA,kBACA,eACA,UAMA,YAAwB,IAAI,cAAc,mCAC1C,YACA,YAAwB,IAAI,8CAC5B,YACA,kBAA8B,6BAC9B,UACA,mBAA+B,8CAC/B,UACA,YAAwB,uBACxB,mBACA,CAEA,SAEA,6BACA,qBAEA,uBACA,QAEA,4CACA,kBAEA,uBACA,4EACA,0BACA,yCACA,8BAEA,cACA,QACA,cACA,iBAEA,aAAyB,IAAI,eAC7B,OACA,CAEA,KAGA,kCACA,QACA,4DACA,gBACA,kBAA8B,QAC9B,0CACA,uCACA,4BAGA,aAAyB,IAAI,6BAA6B,SAC1D,QAAoB,oCACpB,uBACA,2BACA,0BACA,wCACA,uBAGA,iDACA,QACA,mCACA,4BAEA,yHAAqI,cACrI,QACA,UAAsB,GACtB,YACA,8BAA0C,gCAC1C,oBACA,gDAA4D,SAAS,yBACrE,kBACA,OAAmB,WACnB,uCACA,kBACA,uCACA,oBAGA,oBACA,mBACA,mCACA,YAGA,WAAuB,UACvB,iBACA,2BAGA,mDACA,SAAqB,YAAY,MAGjC,wCACA,yBACA,wBAAoC,IACpC,8SAEA,+CACA,oBACA,mBAA+B,IAAI,mCAAmC,IAAI,eAC1E,iBACA,QACA,wBACA,oBACA,sCACA,kCACA,mEACA,qBACA,OACA,EAOA,iBAOA,GALA,eACA,IACA,KAGA,sBACA,+BAGA,8CACA,iCAl4BA,EAk4BA,EACA,uCACA,eACA,oBAyEA,OAvEA,2BACA,IA1zBA,EA0zBA,KASA,OARA,OACA,OACA,sBACA,KA7zBA,OADA,EA8zBA,QA7zBA,uBA/EA,IA+EA,gBA+zBA,0CACA,eAEA,CACA,EACA,uBACA,SAGA,OAFA,OACA,kBACA,CACA,EACA,0BACA,SAaA,OAZA,OACA,OACA,OACA,qBACA,uBACA,SAGA,yFACA,YACA,QAEA,CACA,EACA,0BACA,SAIA,OAHA,OACA,OACA,qBACA,CACA,EACA,sBACA,SASA,OARA,OACA,OACA,iBACA,gDACA,iBACA,wBACA,qBAEA,CACA,EACA,QAJ0E,MAI1E,YACA,OACA,gBACA,0BACA,wBACA,gBACA,wBACA,iBACA,CACA,EACA,sBACA,QACA,EACA,uBAEA,OADA,yBAv7BA,IAu7BA,IAv7BA,KAu7BA,EACA,MAEA,cACA,KAGA,YAl9BA,SAm9BA,sBACA,cACA,iCACA,yBAOA,cAEyB,WACzB,iBAEQ,UAAgB,KAGoB,MAAU,CAGzC,IAFD,eACZ,SACA,EAAa,+BACH,CADI,MACJ,OAEV,gBASA,yCACA,eACA,aACA,sBACA,qBACA,iBACA,EACA,sBACA,YACA,qBACA,eACA,cAGA,CAEA,CAAC,oOChoBM,mBAmBA,sBAMA,yBAOA,mBA+CA,wBAoEA,iCAqCA,8BAiQA,mBAUA,gBAQA,iBAOA,oBAsDA,2BAgDA,UAaA,uBAMA,0BAqCA,aA6CA,wDgB9iCP,EsCLA,EACA,E4BCA,E8FgBA,EEoKA,EKvFI,kBAAY,mBvDjFT,ECKA,EEjBA,EMgBI,EOEX,EKAO,ESNA,EcAA,EEAA,EGGA,EKHA,EGGI,QhDCgB,IxIlBpB,IAAM,EAAY,WwLiBA,ExLjBA,kBACzB,WACA,KAAmB,IAAN,GAAM,CACT,GAAM,CAChB,yBACA,KACA,OEPa,EAAuB,gBEE7B,ICFA,OHA6B,EGCpC,cACA,oBAEA,aAEA,OADA,yBACA,CACA,mCACA,CACA,CACA,eACA,kDACA,CACA,UACA,iCACA,CACA,QACA,YACA,MACA,YACA,eACA,EACA,oBACA,wBACA,0CACA,CACA,aACA,YACA,MACA,KACA,YAGA,gBAEA,EACA,kBACA,4BACA,0CACA,CACA,UACA,YACA,MACA,MACA,WAEA,EACA,kBACA,4BACA,0CACA,CACA,YACA,YACA,KACA,cACA,sBACA,WACA,CAAa,EACb,SACA,CAAS,EACT,+BAKA,OAJA,mBACA,8BACA,GACA,EACA,CACA,CACA,+BAKA,OAJA,kBACA,KACA,mBACA,EACA,CACA,CACA,iBACA,oBAEA,EC5EA,YACA,wBACA,YACA,4BACA,gBACA,eACA,CAAC,YAA8C,EACxC,OACP,4BACA,gBACA,gCACA,oBACA,mBACA,ECdO,gBACP,mBACA,CACO,gBACP,sDAAgE,EAAK,EACrE,CACO,gBACP,IACA,qBACA,CACA,SACA,QACA,CACA,CAEO,qBACA,mBAKA,0BACA,qBACA,kBAIA,4BAEA,4BACA,mBAYA,qBACP,UAGA,WACA,eAEA,MACA,0BAGA,CCxCO,eAAwC,EAC/C,kCAAsE,YAZtE,kBACA,qBACA,GAAY,EAAQ,cACpB,YACA,YAEA,QACA,CACA,QACA,CACA,IAGA,CACO,eAAuC,EAC9C,SACA,iCACA,KAAiB,EAAQ,4BAEzB,QACA,CCtBO,aACP,iBACA,CACO,aACP,+BACA,CACO,cACP,gCACA,CCLO,gBACP,SACA,SAGA,GAAQ,EAAQ,sBAChB,OAAe,EAAQ,sBAEvB,MAAqB,EAAO,GAC5B,EAD4B,EACA,GAC5B,EAD4B,CAC5B,MACA,SAEA,SACA,eACA,gBACA,SAEA,YAA+B,EAAY,MAC3C,iBACA,SAGA,QACA,CACA,MAAsB,EAAQ,GAC9B,EAAsB,CADQ,CACA,GAC9B,GAD8B,IAC9B,EACA,SAEA,eACA,qBACA,iBAGA,KAFA,SACA,SAEA,SAEA,eACA,kBACA,SAGA,eACA,iBACA,SAGA,QACA,CACA,QACA,CCtDO,0BACA,oBACA,uBACA,qBGFA,UACA,KACP,EACA,OACA,EAAoB,GACD,EAAqB,CADpB,EAGpB,WAEA,WETA,YACA,gBACA,gBACA,cACA,YACA,cACA,eACA,CAAC,YAA4B,EACtB,aACA,GACP,SACA,SACA,QACA,OACA,QACA,SACA,CCjBO,QACP,QACA,IACA,gBACA,CACA,SACA,QACA,CACA,CAAC,EACD,SKRO,UACP,cACA,eAEA,WACA,mBACA,CACA,eACA,GAAY,EAAU,GACtB,KADsB,GACtB,iBACA,IAGA,qBACA,CACA,OACA,0BAEA,CEXO,WAA0B,EGR1B,QHQoC,CGRpC,OCEP,YACA,iBACA,qBACA,mBACA,mBACA,wBACA,CAAC,YAAkD,EAE5C,QACP,MAAW,GACX,CADe,KACJ,GACX,CADe,IACL,GACV,CADc,MAJP,OAMP,KAAU,EACV,EADc,GAEP,SCjBA,mBAAgD,UCGhD,cAAiD,EAAuB,GAAwB,EAA0B,EA4BjI,OA1BA,EAA8B,GAAmB,MACjD,SACA,CAFiD,EAEd,GAAmB,MACtD,UADsD,EACtD,GACA,WAA8C,UAAsB;AAAA,OACpE,EACkB,GAPS,CAOL,EACtB,KACA,GAAmC,GAAmB,KACtD,EAVgD,OAUhD,EADsD,CACtD,GACA,UAA6C,UAAsB;AAAA,OACnE,EACkB,GAClB,CADsB,EACtB,KACA,GAAmC,GAAmB,KACtD,WADsD,CACtD,GACA,UAA6C,UAAsB;AAAA,OACnE,EACkB,GAClB,CADsB,EACtB,MACA,GAAmC,GAAmB,QACtD,QADsD,CACtD,MACA,WAA8C,UAAsB;AAAA,OACpE,EACkB,IAAI,EAGtB,CI/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BACA,kBACA,kBACA,CACA,aACA,MACQ,GAAK,IACb,cAAoB,GADP,iBACO,2CAAqE,cACzF,6BACA,6CACA,4CACA,kCACA,0BACA,8CACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,aACA,MACQ,GAAK,IACb,iBADa,EACO,iCAA6C,cACjE,6BACA,2CACA,0BACA,kCACA,0BACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,aACA,MACQ,EAAK,KACb,cAAoB,yCAA+C,cACnE,6BACA,oCACA,kCACA,sCACA,oCACA,0BACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,aACA,MACQ,EAAK,KACb,oBAAoB,2HAAoI,cACxJ,6BACA,0CACA,4CACA,qCACA,6CACA,yCACA,kCACA,0BACA,4CACA,0CACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,aACA,MACQ,EAAK,KACb,uBAAoB,0EAAwF,cAC5G,6BACA,8CACA,6CACA,gDACA,0BACA,kCACA,iCACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,cACA,MACQ,EAAM,KACd,gBAAoB,4EAAmF,cACvG,6BACA,sCACA,6CACA,0CACA,0CACA,wCACA,kCACA,yBACA,CAAS,EAAI,yEAAuG,CACpH,CACA,sBAEA,OACA,CAFA,qBAEA,SACA,cAEA,CACA,uBACA,MACA,eAAwC,GAAQ,GAA2B,CAA5B,EAA0C,YAA4C,GACrI,IADyE,EACzE,CACA,GAFkJ,EAElJ,GACA,gBACA,iCACA,qBACA,CACA,CACA,qBAEA,0BAAmC,KADnC,aACmC,SAAc,UAAI,EAAS,CAC9D,CACA,oBACA,GACA,QAEA,CACA,CC/HO,iBAAuC,GAC9C,cACA,EAFiE,GAEjE,eACA,6DACA,aAAuB,EACvB,CACA,IAF8B,QAE9B,CACA,8BACA,yCACA,YACA,CACA,oCACA,gBACA,iEACA,mGACA,IAAuB,GAAc,+DAErC,IAAmB,GAAwB,8DAC3C,CACA,CEjBO,iBAAqC,GAC5C,cACA,EAF+D,GAE/D,eACA,0DACA,aAAuB,EACvB,CACA,IAF8B,kBAE9B,GACA,Q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D,cACA,aACA,CAmDA,OA/CA,sCACA,SACA,EAIA,0CACA,SACA,EAIA,wCACA,SACA,EAIA,8CACA,SACA,EAIA,gDACA,SACA,EAIA,kDACA,SACA,EAIA,wDACA,SACA,EAIA,uDAIA,wDACA,CACA,CAAC,GAED,GACA,WACA,EAIA,eAEA,aACA,+CAGA,OALA,QAIA,gCACA,CACA,CAAC,KAED,eAEA,aACA,+CAGA,OALA,QAIA,gCACA,CACA,CAAC,KAED,eAEA,aACA,8CACA,CAEA,OALA,QAIA,mCACA,CACA,CAAC,KAED,eAEA,aACA,+CAGA,OALA,QAIA,mCACA,CACA,CAAC,KAED,cACA,aACA,CAGA,OAFA,sCACA,yCACA,CACA,CAAC,GAED,eAEA,aACA,+CAEA,OAJA,QAIA,CACA,CAAC,KAED,eAEA,aACA,+CAEA,OAJA,QAIA,CACA,CAAC,KAED,eAEA,aACA,+CAEA,OAJA,QAIA,CACA,CAAC,KAEM,UAEA,UACA,UACA,UACA,UAEA,UACA,UACA,UChJA,MATP,YACA,aACA,CAIA,OAHA,qCACA,OAAe,EACf,EACA,CACA,CAAC,IAHwB,sBCNzB,aCCO,GAAc,CDGrB,SCH+B,EDK/B,aACA,CA+BA,OA7BA,yBAIA,OAHA,gBACA,uBAEA,gBAMA,+CACA,MAAe,SAAc,MAAqB,IAAO,YACzD,EAIA,wCACA,MAAe,SAAS,MAAc,EACtC,EAIA,eALyD,KAKzD,iBACA,8CACA,EAEA,+BACQ,SAAgB,IAAW,IAAO,YAC1C,EACA,EACA,CAAC,GCtC8B,cCOxB,mCACP,WACA,sBACA,KACA,wBACA,OACA,iBAAqB,GAAM,CACT,GAAM,CACxB,GClBO,6CCDA,UACP,SACA,CACO,aCFA,UACP,iBACA,WAAmB,EACnB,CACA,CACO,MAHsB,CAGtB,MCLA,UACP,qBACA,iBACA,YACA,eACA,cACA,CAMA,QACA,yBACA,CAKA,aACA,kBACA,sBAEA,mFACA,GAGA,iBACA,gBAHmB,EAInB,CACA,CC7BO,ODwBuB,ECvB9B,iBACA,MACA,qDAA2G,GAAW,WACtH,CACA,cACA,MACA,kCAAsE,E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,UACA,WACA,QACA,CAEA,QACA,CACA,gBAGA,SAEA,QACA,EAxBA,GAEA,MACA,CAsBA,eACA,iBACA,aACA,cACA,aACA,QACA,CACA,QACA,EFhEA,YAEA,2BAKA,uBAKA,uBAMA,2BAMA,0BACA,CAAC,UAA4B,ECpB7B,YAKA,+BAKA,uBAKA,8CACA,CAAC,aEjCD,YAIA,qBAKA,eAIA,oBACA,CAAC,UAAwC,ECHlC,mBCSA,eAMP,OAHA,WAFA,OAIA,iBAXA,KAYA,CAEO,cACP,MAAqB,GAAW,WAKhC,MAJA,oBAEA,2BADgC,OAChC,EAEA,CACA,CAyFO,eACP,yBACA,cACA,uBACA,qBACA,CAKO,eACP,cACA,oBACA,iBACA,CAIO,iBACP,4BAMA,OAJA,MAlIA,MAmIA,MAnIA,IAoIA,SAEA,CACA,CEpIO,SAGP,aACA,KACA,kBACA,cACA,QACA,WACA,UACA,SACA,qBACA,yBACA,uBACA,qBACA,KACA,QACA,KAAc,EAAc,MAC5B,CACA,KAF4B,GAE5B,MACA,UACA,kBACA,eACA,WACA,2BACA,uBACA,mBACA,+BAIA,GACA,gBACA,iCACA,2BAAqC,GAAa,MAClD,IADkD,CAClD,mBACA,8BAAgD,IAAa,EAC7D,OAD6D,gBAC7D,mBACA,8BACA,gCACA,8CACA,oCACA,iBACA,2CACA,iBACA,uBACA,6CACA,yBACA,kCACA,oBACA,iCAEA,2CACA,CACA,cACA,yBAEA,kBACA,gCACA,YACA,gBAEA,OADY,IAAI,gCAAgC,EAAI,GACpD,KAEA,IAAa,GAAgB,GAE7B,OADY,GADiB,CACb,8CAA8C,EAAI,GAClE,KAEA,wBAAgB,GAAsB,wBACtC,YACA,wCACA,yDACA,+BAGA,2CACA,KAEA,iBACA,iCACA,uBAEA,WACA,CAQA,gBACA,uBACA,YACA,oBAAgB,GAAkB,iBAClC,SAGA,OAFY,IAAI,4BAChB,2BACA,UAEA,OACA,wBACA,8BACgB,IAAI,iCAEpB,oBACA,4BAEY,GAAW,KACN,GADM,IAEvB,IAD4B,EAG5B,UAEA,MAA2B,GAAkB,GAO7C,OANA,kBACA,OACA,aACA,s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Ca,IAAS,wBAMtB,YACA,eACA,KANA,sCAQA,cAAyC,EAAY,SACrD,uBACA,EACA,kBACA,WAA4B,GAAkB,aAC9C,EAD8C,EAG9C,EAA2B,GAAkB,cAE7C,CAF6C,CAE7C,wCACA,kBAIA,eAA8B,sBAH9B,aAAuD,EAAoB,mBAC7D,IAAc,SACd,IAAc,MACE,cAC9B,gBAAwC,EAAoB,WAG5D,GAH4D,IAChD,IAAQ,wEACiB,IAAS,oBAK9C,MAA+B,GAAkB,+BAejD,OAdA,IAAyB,GAAQ,CACjC,IADiC,KACjC,eACA,gCACA,UACA,cACA,OACA,OACA,QACA,oBACA,aACA,sBACA,kCACA,4BACS,CAET,CACA,6BACA,EACA,EACA,EACA,sBACA,MAEA,qBACA,IAEA,qBACA,IACA,MAGA,IACA,IACA,KAEA,SAAqC,IAAW,UAChD,wBACA,EAAmC,IAAS,cAC5C,OAAe,IAAW,mBAC1B,CAEA,mBACA,2BAGA,gBACA,uBACA,CACA,CC9HO,SACP,4BACA,GACA,sBACA,CACA,aACA,SACA,kCACA,uBAEA,uBACA,eACA,UACA,GACA,CAAa,EACb,UACgB,GAAkB,mDAClC,GACA,CAAa,CACb,CAAS,CACT,CACA,aACA,kCACA,cAEA,CACA,SACA,kCACA,UAEA,CACA,WACA,SACA,kCACA,qBAEA,2BACA,yBACA,GACA,CAAa,GACb,CAAS,CACT,CACA,ECxCA,YACA,2BACA,yBACA,qBACA,8BACA,CAAC,WAIM,UACP,QACA,iBACA,UACA,iCACA,IAA2B,EAC3B,MtBfO,KsBe2B,ItBf3B,MACP,gBACA,cACA,iBACA,EAkBA,sBACA,MACA,OA7BA,EA6BA,GAIA,GADA,IACQ,GAAW,IAAS,GAAW,IAAS,GAA7B,GACnB,IADuC,CACvC,KAD0D,GAG1D,GAAa,GAAO,GAEpB,IADA,GADoB,CACpB,QACY,GAAO,GACnB,OADmB,CACnB,eAA4C,IAAO,IACnD,sBAGA,GAAiB,GAAQ,IACzB,OADyB,MACzB,QACA,uBAA6C,IAAO,KACpD,WACA,aACA,CACA,OAEA,GAAa,GAAQ,GACrB,GAAY,GAAQ,EAD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C,gBAL0D,CAK/B,CAC3B,QACA,CAQA,aAAwB,EAChB,IAAK,+BACb,SArCA,GAEA,aAIA,qBACQ,IAAW,yBAAyB,GAAmB,CAC/D,aACA,EAF+D,EAE3C,GACpB,IAAoB,GACpB,CACS,GAGL,IAAW,OAN8B,EACL,WAKzB,IACf,EAqBA,cApDA,YAEA,aAIA,eACA,UAA0C,GAC1C,WACQ,IAAO,CAF8C,uBAE9C,IACf,MACA,CACA,WACI,IAAO,4BACX,EAuCA,iBACA,CACA,CC3DO,SACP,SACA,SACA,qBACA,CACA,kCACA,gBACA,cACA,CAAS,CACT,CACA,cACA,oBACA,CACA,WACA,gBACA,CACA,UACA,eACA,CACA,CCfO,SACP,UACA,KACA,cACA,cAAoB,EAAQ,aAC5B,KACA,iBACA,YACA,CACA,eACA,sBAEA,cACA,8BAEA,WACA,oBACA,kBACA,IACA,oHACA,CACA,SACA,wBACA,CACA,CACA,8BAEA,EC9BA,YACA,yBACA,sBACA,CAAC,UAA4C,CEEtC,UACP,UACA,oBACA,cACA,sBACA,qBACA,gBACA,iBACA,QACA,cACA,iCACA,KACA,iBACA,yBACA,uCACA,qBACmB,GAAgB,uCACnC,mBACA,iCACA,eACmB,GAAgB,iCACnC,2BACA,yCACA,uBACmB,GAAgB,gCACnC,0BACA,wCACA,sBACmB,GAAgB,gCACnC,uBAAiC,GAAc,qBAC/C,8CACY,IAAI,2IAChB,4CAEA,CACA,oBACA,4BACA,2BAEA,gBACA,CAEA,cACA,SACA,6BAGA,4BAA6C,IAAU,cAGvD,oBACA,CACA,WACA,gCACA,CACA,YACA,yBACA,SACA,mBAEA,SACA,kBAEA,SACA,0BAEA,CAEA,gBACA,mDAEA,6BACgB,IAAI,+CAEpB,0BACA,MACA,CACA,4BAEY,IAAI,iBAAiB,yBAAyB,qCAC1D,2BAEA,4BACA,uBACA,CAMA,YACA,2BACA,SAEA,iEACA,YAAuC,EAAvC,EAA8C,IAC9C,8BAEA,eACA,UACA,GACA,CAAa,EACb,QACA,CAAS,CACT,CACA,uBAEA,CADA,mBACA,gCACA,kBAEA,oBACA,sBAEA,mBACA,CAAa,4BAED,IAAO,MAAM,GAAgB,CAAO,U1DvHhD,C0DuHwC,O1DvHxC,Q0DuHgD,SAIhD,CACA,uDACA,sBACA,wBAGA,yDAEA,sCACA,gBACA,SAAwC,EAAgB,QACxD,IAGA,WACA,gDAEA,CAAiB,EACjB,OACA,uBAAoD,IAAS,KAC7D,WACA,mCACA,mCACA,SACA,yCAEA,CAEA,SACA,IAGA,0BACwB,GAAkB,GAC1C,IACA,CAAqB,CAErB,CAAa,CACb,CAAS,CACT,CACA,CAP0C,iBAO1C,CACA,qBACA,OACA,WACA,qBACA,sBACA,aACA,qBACA,+BACA,mBACA,wBAEA,CAAa,EACb,UACA,qBACgB,GAAkB,EAClC,CAAa,CACb,EAEA,SAJkC,aAIlC,kCACA,UAEA,wBAEA,2DACkB,YAClB,CACA,cACA,uBACA,0BACA,mBAEA,CACA,CCrMO,iBAAiC,GACxC,mBAD8D,MAC9D,CACA,8BACA,KACA,WACA,cACA,CACA,UACA,wCACA,+BACA,oCACA,qCACA,4BACwB,GAAkB,EAC1C,CAAqB,CAErB,EACA,SAJ0C,aAI1C,MACA,4BACoB,GAAkB,EACtC,CAAiB,CACjB,EACA,6EAEA,6DAEA,CACA,aACA,+BACA,gCACA,gFAEA,wBACA,gEAGA,CACA,CIrDO,SACP,iBACA,iBACA,YACA,CACA,aACA,kCACA,CACA,aACA,MACA,+BACA,wBACA,aAA4B,aAAe,MAI3C,8BAEA,0CACA,UACA,qCAEA,MACA,+BAEA,YACA,uCAEA,YACA,4CAEA,SACA,iEAEA,QACA,mCAEA,2BACA,CACA,SACA,uBACA,CACA,WACA,gCACA,CACA,0BE3CO,UACP,eACA,aACA,CACA,YACA,MAA2B,SAA+B,IAAU,yBAAkC,EACtG,8BDNO,cCOe,CDNtB,QACA,gBACA,eAAgB,GAAa,EAC7B,gBACA,IAAoB,oBAAoB,EACxC,gBACA,YAAkC,KAAS,kBAC3C,SAEA,OACA,6BACA,0BACA,EACA,KACA,0BACA,0CAGA,qEACA,GArBA,WAqBA,gEAEA,0DACA,EAAgC,GAChC,UAD6C,IAC7C,YACA,QACA,4CAEA,MACA,0CAGgB,EAAI,8BAA+B,EAAU,YAC7D,cAEA,mDACA,6BACA,QAUA,OATA,kCACA,uCACA,UACA,gCACA,yCAEA,0DACA,+DAEA,CACA,CAAqB,CACJ,CACjB,CACA,CACA,CACA,EC9CsB,iBACtB,GAAyB,KAAM,EAAgB,QAAU,CACzD,CACA,IAF+C,MAE/C,CACA,8BACA,CACA,CCdO,SACP,eACA,iBACQ,GAAa,cACrB,YAA6B,EAAiB,CAC9C,cAD8C,CAE9C,MACA,CACA,CAAiB,EAAiB,EAAkB,EAAkB,mBACtE,qBAEA,CAAS,CACT,CACA,aACA,kCACA,CACA,aACA,OACA,UAA0B,EAAQ,QAIlC,eACA,2EACA,oFAGA,2BACA,CACA,SACA,uBACA,CACA,WACA,gCACA,CACA,CCpBA,mCAGA,mBACA,cACA,gDACA,2BACA,gBACA,aACA,YACA,OACA,CAAK,CACL,CACO,iBACP,yBACA,iDAGA,OACA,0BACA,kBACA,MACA,CACA,WACA,0DACA,oDAGA,aASA,OARA,qBACA,qBACA,UACA,SAEA,CAAK,EACL,qBACA,UACA,CACA,EACO,aACP,KAKA,kBACA,YANA,CACA,gDACA,kBACA,MACA,CAIA,sCACA,4DAGA,cACA,cACA,SACA,CAAS,CACT,CAAK,CACL,EACO,WACP,cACA,6BACA,kBACA,MACA,CACA,WACA,cAKA,YACA,aALA,sCACA,UACA,2BAMA,EACO,WACP,KAKA,kBACA,YANA,CACA,gDACA,kBACA,MACA,CAIA,sCACA,8DAGA,cACA,cACA,OACA,CAAS,CACT,CAAK,CACL,EACe,eACf,cACA,4BACA,iDAGA,YAGA,CACA,WACA,eACA,aACA,gBCvGO,UACP,mBACA,wBACA,WACA,QACA,OACA,OACA,mBACA,OACA,2BACA,8BACA,kBACA,WAAqB,IAAI,wBACzB,WACA,CAAS,EACT,aAAuB,IAAK,gBAC5B,YAAsB,GAAO,cAC7B,aAAuB,GAAI,eAC3B,+BACA,CAEA,MAAY,EAAY,CAExB,CAFwB,OAEV,EAAc,CAE5B,GAF4B,OAEZ,EAAgB,CAEhC,KAFgC,OAEd,EAAkB,KAEpC,GAFoC,IAEpC,CACA,mBAMA,oBACA,6EACA,+BACA,CAEA,aACA,oBAMA,qBACA,8EACA,CASA,uBACA,6BACA,iBAGA,EAFA,IAOA,2BAEA,CAEA,YACA,oBAMA,aAGA,cACA,WACA,KAEA,CAKA,qBACA,8EACA,CAEA,aACA,oBAUA,mCACA,KAGA,IACA,MACA,CACA,SACA,kGAAoG,EAAa,GACjH,CACA,CACA,CCxHO,iBAAkC,GACzC,mBACA,CAFgE,IAEhE,QACA,sBACA,aAEA,CACA,CC4CO,iBACP,YAMA,aAJA,GACA,WACA,iBACA,mBACA,GACA,+BAEA,cACA,KACA,MACA,qBACA,aAGA,QACA,CCpEO,mBACP,MACA,EACA,IACA,KACA,CACA,SACA,GACA,QACA,CAEA,GADA,OACA,MAEA,QAGA,QACA,CACA,CA6BO,eACP,4BACA,iCACA,+BACA,kBDvDA,YAEA,uBAEA,iBAEA,4BACA,CAAC,sCIkBM,wBACP,WACA,uBACA,eACA,yBAGA,CAIO,0BAeP,GAdA,YACA,SAA+B,EAAG,aAElC,IACA,KAAkC,EAAG,iBACrC,KAAkC,EAAG,yBACrC,KAAkC,EAAG,uBACrC,KAAkC,EAAG,mBACrC,CADqC,EACrC,EAAkC,EAAG,6BACrC,KAAkC,EAAG,iBACrC,GADqC,EACH,EAAG,mBACrC,CADqC,EACrC,EAAkC,EAAG,uBACrC,EAAkC,EAAG,mBAErC,CAFqC,EAErC,CAGA,QAAuC,EAAG,wBAC1C,OACA,eD3CO,+BC2CwD,GAE/D,QAAuC,EAAG,wBAE1C,cACA,eAA8B,4CAA8C,EAE5E,CACA,CAmBA,cACA,yDACA,CAWO,qCAEP,YAEA,WAkEA,aACA,MAAsB,SAAmB,IACzC,EAAoB,SAAmB,IACvC,eACA,MAAkC,SAAmB,CAAC,SAAiB,GAAU,EAAG,eACpF,EAAgC,GADoD,GACpD,GAAmB,CAAC,SAAiB,GAAU,EAAG,gBAClF,IADkF,GAClF,gCACA,uBACA,YACA,MACA,IACA,CAAK,EAML,OALA,YACA,eACA,UACS,EAET,CACA,EArFA,eACA,WACA,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A,CACA,MAAyB,GAAe,uDACxC,kBACA,oBACA,4BACA,6BACA,IACA,wBACA,6BAEA,+BAAgF,EAAgB,KACpF,GAAwB,MAD4D,EAC5D,0CACpC,CACA,CAOA,uBACA,0BACA,CAOA,gBACA,MAAwB,KAAmB,aAC3C,EAAmC,KAAW,GAC9C,kCACA,uBAAqC,EAAgB,QAErD,MAFqD,EAErD,QACA,aAAiC,KAAM,EAAkB,MAAQ,EACjE,IADyD,UACzD,CAAkC,KAAe,oBAGjD,gBACA,yBACA,6CACA,mBACA,uBACA,QACA,CAAS,CA9MT,IA+MA,CAIA,oBACA,WACA,WACA,sBACA,WACA,EAA4B,GAAY,mDACxC,uCACA,qBACA,MACA,uBAEA,4BAiBA,gBACA,oCACA,gBACA,mBACA,qBACA,KACA,CAAqB,CACrB,CACA,gBACA,oCACA,4BACA,kBAGA,gBACA,gBACA,wBACA,KACA,CAAyB,CAEzB,CACA,kBACA,IAEA,MADA,UACA,KACA,MACA,oBACA,OACA,qBAAsD,EAAM,IAC5D,EACA,OAGA,GAEA,CAAiC,KACjC,MACA,CAAiC,CACjC,EACA,GACA,MAGA,MAEA,QACA,CACA,IACA,CACA,CACA,kBACA,IACA,MACA,QACA,CACA,IACA,CACA,CACA,OA1EA,kCACoB,UF3Mb,MACP,EE0MsC,CF1MtC,2CACA,WACA,YACA,yBAEA,uCAMA,uBAuDO,kBAPP,8BAQA,aARA,SASA,uDAGA,mBACA,MAEA,kBACA,OAEA,sBAiBA,YACA,QACA,2BACA,YACA,kBACA,UAGA,YAGA,QACA,EA5BA,GAEA,6BACA,iBAGA,sBACA,kBAEA,4BAEA,EA9EA,QANA,EACA,SAAoB,YAAe,SAmBnC,OAaA,EARA,kBAEA,OADA,4DACA,CACA,OACA,8BACA,EAEA,QAEA,kBACA,GACA,CAAK,EACL,uBACA,SAAmB,CACnB,qBACA,cACA,gBACA,YACA,CAAS,CACT,QACA,IACA,CACA,CAAK,EACL,OACA,sBACA,QACA,CACA,EAnDmC,QAEnC,OADA,SACA,CACA,CAIA,CACA,CACA,kBACA,QAGA,EACA,QACA,OAC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A,kBAAqC,IACrC,qBACA,uBAA6C,IAAO,KACpD,WACA,OACA,SACA,WACA,YAIA,WAGA,CACA,WAEA,cACA,UACA,gBAEA,CACA,aANA,GAMA,CACA,mBACA,QARA,IAQA,GACA,QAAwC,YAAe,EACvD,QAAwC,YAAe,EACvD,WACA,MAZA,EAYA,EACA,CACA,kBACA,CACA,CACA,CACA,MAEA,IAGA,SACA,EAvFA,iBAEA,QACA,CACA,sBACA,MACA,UAEA,CACA,CAqFA,mBACA,sBACA,uBAAoC,IAAO,KAC3C,WACA,wBACA,QAEA,CACA,QACA,CACA,eACA,uBACA,CACA,eACA,0BACA,CACA,eACA,cACA,QACA,QACA,kBACA,CACA,eACA,0BACA,oBACA,qBACA,YACA,mBACA,qBACA,QACA,CCpIO,uBACP,eACA,SAGA,wCACA,CACA,CAUO,iBACP,MAMA,uBALA,0BACA,wBACA,iCACA,CAAS,GACT,CAAK,EACL,WACA,gBACA,GACK,IAEL,MADA,gBACA,CACA,CAAK,CACL,eClCO,UACP,SACA,QACA,sBACA,CACA,kCACA,gBACA,cACA,CAAS,CACT,CACA,cACA,qBAEA,WACA,gBACA,CACA,UACA,eACA,CACA,CCfO,SACP,UACA,MACA,aACA,cAAoB,EAAQ,aAC5B,KACA,iBACA,YACA,CACA,eACA,sBAEA,cACA,8BAEA,WACA,oBACA,kBACA,IACA,oHACA,CACA,SACA,wBACA,CACA,CACA,8BAEA,gBC9BA,QACA,IAAS,IAAY,KACrB,QAAa,IAAY,SACzB,MAAW,IAAY,OACvB,KAAU,IAAY,MACtB,KAAU,IAAY,MACtB,MAAW,IAAY,OACvB,KAAU,IAAY,OAMf,eACP,WAEA,OAEA,iCACA,SACQ,GAAI,4BAA4B,EAAM,qBAAqB,gBAAyB,kBAC7E,IAAY,OAE3B,CACA,gBELO,QACP,OAAW,CDfJ,cACP,uBAEQ,IAAO,MAAM,EAAgB,IAAO,SAAR,EAAQ,KAC5C,eACA,IACA,CAAa,CACb,CAAS,CACT,CAAK,CACL,CCOA,0FCpBA,cAAsC,GAAG,KACzC,aAAoC,GAAG,IAChC,cA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EAAQ,IAAiB,EACjD,CAFsB,QAEtB,EAD+B,CAC/B,EACA,kBACA,kCACA,CAEA,cAGA,OAAa,IAFb,6BAEa,KADb,wCACa,CACb,CAEA,cAEA,SADA,KAEA,CAEA,cAEA,OADA,KACA,UACA,CAfA,eAAqB,GAMrB,YAAkB,GAKlB,kBAAwB,GAKxB,gBAAsB,GACtB,yDACA,cACA,QACA,CACA,cACA,cAEA,0BACA,CACA,OACA,eACA,gCACA,2BACA,EAaA,gBAAsB,CAZtB,YACA,cACA,SAEA,wBACA,eACA,OACA,mBACA,oCACA,+BACA,CACA,gDC1CO,MAAW,SAAO,4KCAlB,cAMP,OAHA,WAFA,OAIA,iBAXA,KAaA,CACO,aACP,MAAqB,GAAW,YAChC,uBACA,MAAqB,GAAW,CAChC,gCAEA,QACA,CAKO,cAGP,SAFA,OACA,uBAAqF,GAAW,QAEhG,CAMO,cAEP,QACA,SAEA,sBAEA,SACA,iBAIA,YAGA,qBACA,qBAGA,sCAEA,CAMO,gBACP,gBACA,YAOA,OALA,MACA,KAEA,GArEA,KAuEA,MAMO,cAEP,SAAmB,WAlFnB,GAkFyC,EAAE,KAAQ,GACnD,uBAnFA,EAmFA,GAEA,OADA,iCACA,iBACA,CAKO,cACP,qBAMO,cACP,wBACA,CAKO,cACP,wBACA,CAKO,cACP,yBACA,cACA,uBACA,sBAMO,cACP,aACA,oBACA,iBACA,CAIO,gBACP,4BAMA,OAJA,MAlIA,MAmIA,MAnIA,IAoIA,SAEA,CACA,+BCxJA,IAAuC,CAA2E,EAAxE,GAAwE,EAClH,MAAmB,EAAQ,IAAoB,EAC/C,EAAgB,EAAQ,EAFyC,EAExB,CAF2B,CA2EpE,CA1E0B,CA0E1B,EAAuC,CANvC,MAnEuB,GAmEvB,KAEA,KAvEsF,CAuEtF,CACA,CAxEyF,aAwEzF,SAuBA,KACA,MApBA,YACA,cACA,gBACA,wBACA,IACA,UACA,qBAGA,SAA2C,4BAAiC,GAAG,mCAA0C,GAAG,qCAA4C,EACxK,WACA,IACA,KACA,YAEA,SACA,CACA,QACA,EAEA,GACA,KACA,cACA,WACA,eACA,iBACA,KACA,aACA,WACA,eACA,cACA,eACA,gBAzGA,cACA,sBACA,WACA,8BACA,iDACA,OACA,OACA,uCACA,qCACA,eACA,qCACA,YAEA,6BACA,8CACA,0CACA,4CACA,gDACA,wBAsBA,cACA,OACA,wBACA,iCACA,GACA,YACA,oCACA,kDACA,EACA,EA/BA,MACA,wCACA,QAEA,YACA,kBACS,CACT,sBAKA,cACA,OACA,4DACA,6CACA,+CACA,6CACA,kDACA,EACA,EAbA,MACA,uCAEA,EA6EA,MACA,QACA,kEACA,QACA,8CACiB,CACjB,CACA,UACA,CAEA,OACA,iCACA,aACA,gBACA,EACA,UACA,UACA,CACA,QACA,EAvDA,EAFA,wBAGA,CACA","sources":["webpack://_N_E/./node_modules/.pnpm/ua-parser-js@1.0.41/node_modules/ua-parser-js/src/ua-parser.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/globalObject/globalObject.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/sdk/faroGlobalObject.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/sdk/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/sdk/internalFaroGlobalObject.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/sdk/registerFaro.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/reactive.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/is.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/json.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/date.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/deepEqual.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/events/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/utils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/exceptions/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/exceptions/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/logLevels.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/logs/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/logs/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/measurements/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/meta/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/traces/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/ItemBuffer.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/userActionLifecycleHandler.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/api/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/instrumentations/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/instrumentations/registerInitial.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/noop.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/internalLogger/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/unpatchedConsole/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/internalLogger/createInternalLogger.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/internalLogger/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/metas/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/sourceMaps.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/metas/registerInitial.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/batchExecutor.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/registerInitial.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/unpatchedConsole/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/initialize.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/config/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/consts.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/stackFrames/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/stackFrames/buildStackFrame.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/stackFrames/getDataFromSafariExtensions.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/stackFrames/getStackFramesFromError.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/stackFrames/parseStacktrace.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/sessionConstants.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/consts.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/metas/browser/meta.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/metas/k6/meta.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/metas/page/meta.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/extensions/baseExtension.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/base.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/promiseBuffer.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/transports/utils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/utils/throttle.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/utils/webStorage.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/utils/shortId.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/semantic.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/sampling.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/sessionManagerUtils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/PersistentSessionsManager.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/VolatileSessionManager.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/sessionManager/getSessionManagerByConfig.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/transports/fetch/transport.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-core@1.19.0/node_modules/@grafana/faro-core/dist/esm/instrumentations/base.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/domMutationMonitor.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/utils/url.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/httpRequestMonitor.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/instrumentationConstants.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/performance/performanceConstants.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/performance/performanceUtils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/performance/navigation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/performance/resource.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/performance/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/performanceEntriesMonitor.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/util.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/processUserActionEventHandler.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/userActions/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/const.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/getValueAndTypeFromMessage.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/getErrorDetails.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/registerOnerror.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/registerOnunhandledrejection.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/errors/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/web-vitals@4.2.4/node_modules/web-vitals/dist/web-vitals.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/webVitals/webVitalsBasic.js","webpack://_N_E/./node_modules/.pnpm/web-vitals@4.2.4/node_modules/web-vitals/dist/web-vitals.attribution.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/webVitals/webVitalsWithAttribution.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/webVitals/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/metas/session/createSession.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/session/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/view/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/csp/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/instrumentations/console/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/config/getWebInstrumentations.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/config/makeCoreConfig.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-sdk@1.19.0/node_modules/@grafana/faro-web-sdk/dist/esm/initialize.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/validators.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/metrics.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/platform/browser/globalThis.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/api/logs.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api-logs@0.202.0/node_modules/@opentelemetry/api-logs/build/esm/index.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/semconv.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/merge.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-web@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-web@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/promise.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/semconv.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/faroMetaAttributesSpanProcessor.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/faroTraceExporter.utils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/faroTraceExporter.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/faroUserActionSpanProcessor.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/shimmer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/semconvStability.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-web@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-web@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-web/build/esm/semconv.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+sdk-trace-web@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-fetch@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-fetch@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fetch/build/esm/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-fetch@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-fetch@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/semconv.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-xml-http-request@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/faroXhrInstrumentation.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/instrumentationUtils.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/getDefaultOTELInstrumentations.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/sampler.js","webpack://_N_E/./node_modules/.pnpm/@grafana+faro-web-tracing@1.19.0/node_modules/@grafana/faro-web-tracing/dist/esm/instrumentation.js","webpack://_N_E/./src/frontendObservability.tsx","webpack://_N_E/./src/pages/_app.tsx","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/semconv.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/validators.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/merge.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/timeout.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/promise.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/configuration.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/exporter.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+otlp-transformer@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/src/common/internal.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+otlp-transformer@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/src/trace/internal-types.js","webpack://_N_E/./src/styles/globals.css","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+otlp-transformer@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/src/common/hex-to-binary.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+instrumentation-fetch@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fetch/build/src/semconv.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js","webpack://_N_E/?3f71","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/propagation.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/url.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+otlp-transformer@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/src/common/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+otlp-transformer@0.202.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/src/trace/internal.js"],"sourcesContent":["/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v1.0.41\n   Copyright © 2012-2025 Faisal Salman <f@faisalman.com>\n   MIT License *//*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n\n    'use strict';\n\n    //////////////\n    // Constants\n    /////////////\n\n\n    var LIBVERSION  = '1.0.41',\n        EMPTY       = '',\n        UNKNOWN     = '?',\n        FUNC_TYPE   = 'function',\n        UNDEF_TYPE  = 'undefined',\n        OBJ_TYPE    = 'object',\n        STR_TYPE    = 'string',\n        MAJOR       = 'major',\n        MODEL       = 'model',\n        NAME        = 'name',\n        TYPE        = 'type',\n        VENDOR      = 'vendor',\n        VERSION     = 'version',\n        ARCHITECTURE= 'architecture',\n        CONSOLE     = 'console',\n        MOBILE      = 'mobile',\n        TABLET      = 'tablet',\n        SMARTTV     = 'smarttv',\n        WEARABLE    = 'wearable',\n        EMBEDDED    = 'embedded',\n        UA_MAX_LENGTH = 500;\n\n    var AMAZON  = 'Amazon',\n        APPLE   = 'Apple',\n        ASUS    = 'ASUS',\n        BLACKBERRY = 'BlackBerry',\n        BROWSER = 'Browser',\n        CHROME  = 'Chrome',\n        EDGE    = 'Edge',\n        FIREFOX = 'Firefox',\n        GOOGLE  = 'Google',\n        HONOR   = 'Honor',\n        HUAWEI  = 'Huawei',\n        LENOVO  = 'Lenovo',\n        LG      = 'LG',\n        MICROSOFT = 'Microsoft',\n        MOTOROLA  = 'Motorola',\n        NVIDIA  = 'Nvidia',\n        ONEPLUS = 'OnePlus',\n        OPERA   = 'Opera',\n        OPPO    = 'OPPO',\n        SAMSUNG = 'Samsung',\n        SHARP   = 'Sharp',\n        SONY    = 'Sony',\n        XIAOMI  = 'Xiaomi',\n        ZEBRA   = 'Zebra',\n        FACEBOOK    = 'Facebook',\n        CHROMIUM_OS = 'Chromium OS',\n        MAC_OS  = 'Mac OS',\n        SUFFIX_BROWSER = ' Browser';\n\n    ///////////\n    // Helper\n    //////////\n\n    var extend = function (regexes, extensions) {\n            var mergedRegexes = {};\n            for (var i in regexes) {\n                if (extensions[i] && extensions[i].length % 2 === 0) {\n                    mergedRegexes[i] = extensions[i].concat(regexes[i]);\n                } else {\n                    mergedRegexes[i] = regexes[i];\n                }\n            }\n            return mergedRegexes;\n        },\n        enumerize = function (arr) {\n            var enums = {};\n            for (var i=0; i<arr.length; i++) {\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        },\n        has = function (str1, str2) {\n            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        },\n        lowerize = function (str) {\n            return str.toLowerCase();\n        },\n        majorize = function (version) {\n            return typeof(version) === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined;\n        },\n        trim = function (str, len) {\n            if (typeof(str) === STR_TYPE) {\n                str = str.replace(/^\\s\\s*/, EMPTY);\n                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n    };\n\n    ///////////////\n    // Map helper\n    //////////////\n\n    var rgxMapper = function (ua, arrays) {\n\n            var i = 0, j, k, p, q, matches, match;\n\n            // loop through all regexes maps\n            while (i < arrays.length && !matches) {\n\n                var regex = arrays[i],       // even sequence (0,2,4,..)\n                    props = arrays[i + 1];   // odd sequence (1,3,5,..)\n                j = k = 0;\n\n                // try matching uastring with regexes\n                while (j < regex.length && !matches) {\n\n                    if (!regex[j]) { break; }\n                    matches = regex[j++].exec(ua);\n\n                    if (!!matches) {\n                        for (p = 0; p < props.length; p++) {\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length === 3) {\n                                    // check whether function or regex\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        // call function (usually string mapper)\n                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                                    } else {\n                                        // sanitize match using given regex\n                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                                    }\n                                } else if (q.length === 4) {\n                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                                }\n                            } else {\n                                this[q] = match ? match : undefined;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        },\n\n        strMapper = function (str, map) {\n\n            for (var i in map) {\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for (var j = 0; j < map[i].length; j++) {\n                        if (has(map[i][j], str)) {\n                            return (i === UNKNOWN) ? undefined : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return (i === UNKNOWN) ? undefined : i;\n                }\n            }\n            return map.hasOwnProperty('*') ? map['*'] : str;\n    };\n\n    ///////////////\n    // String map\n    //////////////\n\n    // Safari < 3.0\n    var oldSafariMap = {\n            '1.0'   : '/8',\n            '1.2'   : '/1',\n            '1.3'   : '/3',\n            '2.0'   : '/412',\n            '2.0.2' : '/416',\n            '2.0.3' : '/417',\n            '2.0.4' : '/419',\n            '?'     : '/'\n        },\n        windowsVersionMap = {\n            'ME'        : '4.90',\n            'NT 3.11'   : 'NT3.51',\n            'NT 4.0'    : 'NT4.0',\n            '2000'      : 'NT 5.0',\n            'XP'        : ['NT 5.1', 'NT 5.2'],\n            'Vista'     : 'NT 6.0',\n            '7'         : 'NT 6.1',\n            '8'         : 'NT 6.2',\n            '8.1'       : 'NT 6.3',\n            '10'        : ['NT 6.4', 'NT 10.0'],\n            'RT'        : 'ARM'\n    };\n\n    //////////////\n    // Regex map\n    /////////////\n\n    var regexes = {\n\n        browser : [[\n\n            /\\b(?:crmo|crios)\\/([\\w\\.]+)/i                                      // Chrome for Android/iOS\n            ], [VERSION, [NAME, 'Chrome']], [\n            /edg(?:e|ios|a)?\\/([\\w\\.]+)/i                                       // Microsoft Edge\n            ], [VERSION, [NAME, 'Edge']], [\n\n            // Presto based\n            /(opera mini)\\/([-\\w\\.]+)/i,                                        // Opera Mini\n            /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,                 // Opera Mobi/Tablet\n            /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i                           // Opera\n            ], [NAME, VERSION], [\n            /opios[\\/ ]+([\\w\\.]+)/i                                             // Opera mini on iphone >= 8.0\n            ], [VERSION, [NAME, OPERA+' Mini']], [\n            /\\bop(?:rg)?x\\/([\\w\\.]+)/i                                          // Opera GX\n            ], [VERSION, [NAME, OPERA+' GX']], [\n            /\\bopr\\/([\\w\\.]+)/i                                                 // Opera Webkit\n            ], [VERSION, [NAME, OPERA]], [\n\n            // Mixed\n            /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i            // Baidu\n            ], [VERSION, [NAME, 'Baidu']], [\n            /\\b(?:mxbrowser|mxios|myie2)\\/?([-\\w\\.]*)\\b/i                       // Maxthon\n            ], [VERSION, [NAME, 'Maxthon']], [\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,      \n                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n            // Trident based\n            /(avant|iemobile|slim(?:browser|boat|jet))[\\/ ]?([\\d\\.]*)/i,        // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet\n            /(?:ms|\\()(ie) ([\\w\\.]+)/i,                                         // Internet Explorer\n\n            // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\\/([-\\w\\.]+)/i,\n                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon\n            /(heytap|ovi|115)browser\\/([\\d\\.]+)/i,                              // HeyTap/Ovi/115\n            /(weibo)__([\\d\\.]+)/i                                               // Weibo\n            ], [NAME, VERSION], [\n            /quark(?:pc)?\\/([-\\w\\.]+)/i                                         // Quark\n            ], [VERSION, [NAME, 'Quark']], [\n            /\\bddg\\/([\\w\\.]+)/i                                                 // DuckDuckGo\n            ], [VERSION, [NAME, 'DuckDuckGo']], [\n            /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i                 // UCBrowser\n            ], [VERSION, [NAME, 'UC'+BROWSER]], [\n            /microm.+\\bqbcore\\/([\\w\\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser\n            /\\bqbcore\\/([\\w\\.]+).+microm/i,\n            /micromessenger\\/([\\w\\.]+)/i                                        // WeChat\n            ], [VERSION, [NAME, 'WeChat']], [\n            /konqueror\\/([\\w\\.]+)/i                                             // Konqueror\n            ], [VERSION, [NAME, 'Konqueror']], [\n            /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i                       // IE11\n            ], [VERSION, [NAME, 'IE']], [\n            /ya(?:search)?browser\\/([\\w\\.]+)/i                                  // Yandex\n            ], [VERSION, [NAME, 'Yandex']], [\n            /slbrowser\\/([\\w\\.]+)/i                                             // Smart Lenovo Browser\n            ], [VERSION, [NAME, 'Smart Lenovo '+BROWSER]], [\n            /(avast|avg)\\/([\\w\\.]+)/i                                           // Avast/AVG Secure Browser\n            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [\n            /\\bfocus\\/([\\w\\.]+)/i                                               // Firefox Focus\n            ], [VERSION, [NAME, FIREFOX+' Focus']], [\n            /\\bopt\\/([\\w\\.]+)/i                                                 // Opera Touch\n            ], [VERSION, [NAME, OPERA+' Touch']], [\n            /coc_coc\\w+\\/([\\w\\.]+)/i                                            // Coc Coc Browser\n            ], [VERSION, [NAME, 'Coc Coc']], [\n            /dolfin\\/([\\w\\.]+)/i                                                // Dolphin\n            ], [VERSION, [NAME, 'Dolphin']], [\n            /coast\\/([\\w\\.]+)/i                                                 // Opera Coast\n            ], [VERSION, [NAME, OPERA+' Coast']], [\n            /miuibrowser\\/([\\w\\.]+)/i                                           // MIUI Browser\n            ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [\n            /fxios\\/([\\w\\.-]+)/i                                                // Firefox for iOS\n            ], [VERSION, [NAME, FIREFOX]], [\n            /\\bqihoobrowser\\/?([\\w\\.]*)/i                                       // 360\n            ], [VERSION, [NAME, '360']], [\n            /\\b(qq)\\/([\\w\\.]+)/i                                                // QQ\n            ], [[NAME, /(.+)/, '$1Browser'], VERSION], [\n            /(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i\n            ], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n            /samsungbrowser\\/([\\w\\.]+)/i                                        // Samsung Internet\n            ], [VERSION, [NAME, SAMSUNG + ' Internet']], [\n            /metasr[\\/ ]?([\\d\\.]+)/i                                            // Sogou Explorer\n            ], [VERSION, [NAME, 'Sogou Explorer']], [\n            /(sogou)mo\\w+\\/([\\d\\.]+)/i                                          // Sogou Mobile\n            ], [[NAME, 'Sogou Mobile'], VERSION], [\n            /(electron)\\/([\\w\\.]+) safari/i,                                    // Electron-based App\n            /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,                   // Tesla\n            /m?(qqbrowser|2345(?=browser|chrome|explorer))\\w*[\\/ ]?v?([\\w\\.]+)/i   // QQ/2345\n            ], [NAME, VERSION], [\n            /(lbbrowser|rekonq)/i,                                              // LieBao Browser/Rekonq\n            /\\[(linkedin)app\\]/i                                                // LinkedIn App for iOS & Android\n            ], [NAME], [\n            /ome\\/([\\w\\.]+) \\w* ?(iron) saf/i,                                  // Iron\n            /ome\\/([\\w\\.]+).+qihu (360)[es]e/i                                  // 360\n            ], [VERSION, NAME], [\n\n            // WebView\n            /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i       // Facebook App for iOS & Android\n            ], [[NAME, FACEBOOK], VERSION], [\n            /(Klarna)\\/([\\w\\.]+)/i,                                             // Klarna Shopping Browser for iOS & Android\n            /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,                             // Kakao App\n            /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,                                  // Naver InApp\n            /(daum)apps[\\/ ]([\\w\\.]+)/i,                                        // Daum App\n            /safari (line)\\/([\\w\\.]+)/i,                                        // Line App for iOS\n            /\\b(line)\\/([\\w\\.]+)\\/iab/i,                                        // Line App for Android\n            /(alipay)client\\/([\\w\\.]+)/i,                                       // Alipay\n            /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,                               // Twitter\n            /(chromium|instagram|snapchat)[\\/ ]([-\\w\\.]+)/i                     // Chromium/Instagram/Snapchat\n            ], [NAME, VERSION], [\n            /\\bgsa\\/([\\w\\.]+) .*safari\\//i                                      // Google Search Appliance on iOS\n            ], [VERSION, [NAME, 'GSA']], [\n            /musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i                        // TikTok\n            ], [VERSION, [NAME, 'TikTok']], [\n\n            /headlesschrome(?:\\/([\\w\\.]+)| )/i                                  // Chrome Headless\n            ], [VERSION, [NAME, CHROME+' Headless']], [\n\n            / wv\\).+(chrome)\\/([\\w\\.]+)/i                                       // Chrome WebView\n            ], [[NAME, CHROME+' WebView'], VERSION], [\n\n            /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i           // Android Browser\n            ], [VERSION, [NAME, 'Android '+BROWSER]], [\n\n            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia\n            ], [NAME, VERSION], [\n\n            /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i                      // Mobile Safari\n            ], [VERSION, [NAME, 'Mobile Safari']], [\n            /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile\n            ], [VERSION, NAME], [\n            /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i                      // Safari < 3.0\n            ], [NAME, [VERSION, strMapper, oldSafariMap]], [\n\n            /(webkit|khtml)\\/([\\w\\.]+)/i\n            ], [NAME, VERSION], [\n\n            // Gecko based\n            /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i                              // Netscape\n            ], [[NAME, 'Netscape'], VERSION], [\n            /(wolvic|librewolf)\\/([\\w\\.]+)/i                                    // Wolvic/LibreWolf\n            ], [NAME, VERSION], [\n            /mobile vr; rv:([\\w\\.]+)\\).+firefox/i                               // Firefox Reality\n            ], [VERSION, [NAME, FIREFOX+' Reality']], [\n            /ekiohf.+(flow)\\/([\\w\\.]+)/i,                                       // Flow\n            /(swiftfox)/i,                                                      // Swiftfox\n            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n            /(firefox)\\/([\\w\\.]+)/i,                                            // Other Firefox-based\n            /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,                         // Mozilla\n\n            // Other\n            /(amaya|dillo|doris|icab|ladybird|lynx|mosaic|netsurf|obigo|polaris|w3m|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser/Ladybird\n            /\\b(links) \\(([\\w\\.]+)/i                                            // Links\n            ], [NAME, [VERSION, /_/g, '.']], [\n            \n            /(cobalt)\\/([\\w\\.]+)/i                                              // Cobalt\n            ], [NAME, [VERSION, /master.|lts./, \"\"]]\n        ],\n\n        cpu : [[\n\n            /\\b((amd|x|x86[-_]?|wow|win)64)\\b/i                                 // AMD64 (x64)\n            ], [[ARCHITECTURE, 'amd64']], [\n\n            /(ia32(?=;))/i,                                                     // IA32 (quicktime)\n            /\\b((i[346]|x)86)(pc)?\\b/i                                          // IA32 (x86)\n            ], [[ARCHITECTURE, 'ia32']], [\n\n            /\\b(aarch64|arm(v?[89]e?l?|_?64))\\b/i                               // ARM64\n            ], [[ARCHITECTURE, 'arm64']], [\n\n            /\\b(arm(v[67])?ht?n?[fl]p?)\\b/i                                     // ARMHF\n            ], [[ARCHITECTURE, 'armhf']], [\n\n            // PocketPC mistakenly identified as PowerPC\n            /( (ce|mobile); ppc;|\\/[\\w\\.]+arm\\b)/i\n            ], [[ARCHITECTURE, 'arm']], [\n\n            /((ppc|powerpc)(64)?)( mac|;|\\))/i                                  // PowerPC\n            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [\n\n            / sun4\\w[;\\)]/i                                                     // SPARC\n            ], [[ARCHITECTURE, 'sparc']], [\n\n            /\\b(avr32|ia64(?=;)|68k(?=\\))|\\barm(?=v([1-7]|[5-7]1)l?|;|eabi)|(irix|mips|sparc)(64)?\\b|pa-risc)/i\n                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n            ], [[ARCHITECTURE, lowerize]]\n        ],\n\n        device : [[\n\n            //////////////////////////\n            // MOBILES & TABLETS\n            /////////////////////////\n\n            // Samsung\n            /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [\n            /\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,\n            /samsung[- ]((?!sm-[lr])[-\\w]+)/i,\n            /sec-(sgh\\w+)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n\n            // Apple\n            /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i                          // iPod/iPhone\n            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [\n            /\\((ipad);[-\\w\\),; ]+apple/i,                                       // iPad\n            /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n            /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [\n            /(macintosh);/i\n            ], [MODEL, [VENDOR, APPLE]], [\n\n            // Sharp\n            /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n\n            // Honor\n            /\\b((?:brt|eln|hey2?|gdi|jdn)-a?[lnw]09|(?:ag[rm]3?|jdn2|kob2)-a?[lw]0[09]hn)(?: bui|\\)|;)/i\n            ], [MODEL, [VENDOR, HONOR], [TYPE, TABLET]], [\n            /honor([-\\w ]+)[;\\)]/i\n            ], [MODEL, [VENDOR, HONOR], [TYPE, MOBILE]], [\n\n            // Huawei\n            /\\b((?:ag[rs][2356]?k?|bah[234]?|bg[2o]|bt[kv]|cmr|cpn|db[ry]2?|jdn2|got|kob2?k?|mon|pce|scm|sht?|[tw]gr|vrd)-[ad]?[lw][0125][09]b?|605hw|bg2-u03|(?:gem|fdr|m2|ple|t1)-[7a]0[1-4][lu]|t1-a2[13][lw]|mediapad[\\w\\. ]*(?= bui|\\)))\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [\n            /(?:huawei)([-\\w ]+)[;\\)]/i,\n            /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n\n            // Xiaomi\n            /oid[^\\)]+; (2[\\dbc]{4}(182|283|rp\\w{2})[cgl]|m2105k81a?c)(?: bui|\\))/i,\n            /\\b((?:red)?mi[-_ ]?pad[\\w- ]*)(?: bui|\\))/i                                // Mi Pad tablets\n            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n\n            /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,                  // Xiaomi POCO\n            /\\b; (\\w+) build\\/hm\\1/i,                                           // Xiaomi Hongmi 'numeric' models\n            /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,                             // Xiaomi Hongmi\n            /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,                   // Xiaomi Redmi\n            /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,        // Xiaomi Redmi 'numeric' models\n            /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i, // Xiaomi Mi\n            / ([\\w ]+) miui\\/v?\\d/i\n            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [\n\n            // OPPO\n            /; (\\w+) bui.+ oppo/i,\n            /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n            ], [MODEL, [VENDOR, OPPO], [TYPE, MOBILE]], [\n            /\\b(opd2(\\d{3}a?))(?: bui|\\))/i\n            ], [MODEL, [VENDOR, strMapper, { 'OnePlus' : ['304', '403', '203'], '*' : OPPO }], [TYPE, TABLET]], [\n\n            // Vivo\n            /vivo (\\w+)(?: bui|\\))/i,\n            /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n\n            // Realme\n            /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i\n            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n\n            // Motorola\n            /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n            /\\bmot(?:orola)?[- ](\\w*)/i,\n            /((?:moto(?! 360)[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [\n            /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n\n            // LG\n            /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [\n            /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n            /\\blg[-e;\\/ ]+((?!browser|netcast|android tv|watch)\\w+)/i,\n            /\\blg-?([\\d\\w]+) bui/i\n            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n\n            // Lenovo\n            /(ideatab[-\\w ]+|602lv|d-42a|a101lv|a2109a|a3500-hv|s[56]000|pb-6505[my]|tb-?x?\\d{3,4}(?:f[cu]|xu|[av])|yt\\d?-[jx]?\\d+[lfmx])( bui|;|\\)|\\/)/i,\n            /lenovo ?(b[68]0[08]0-?[hf]?|tab(?:[\\w- ]+?)|tb[\\w-]{6,7})( bui|;|\\)|\\/)/i\n            ], [MODEL, [VENDOR, LENOVO], [TYPE, TABLET]], [\n\n            // Nokia\n            /(nokia) (t[12][01])/i\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n            /(?:maemo|nokia).*(n900|lumia \\d+|rm-\\d+)/i,\n            /nokia[-_ ]?(([-\\w\\. ]*))/i\n            ], [[MODEL, /_/g, ' '], [TYPE, MOBILE], [VENDOR, 'Nokia']], [\n\n            // Google\n            /(pixel (c|tablet))\\b/i                                             // Google Pixel C/Tablet\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [\n            /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i                         // Google Pixel\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n\n            // Sony\n            /droid.+; (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [\n            /sony tablet [ps]/i,\n            /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n\n            // OnePlus\n            / (kb2005|in20[12]5|be20[12][59])\\b/i,\n            /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n            ], [MODEL, [VENDOR, ONEPLUS], [TYPE, MOBILE]], [\n\n            // Amazon\n            /(alexa)webm/i,\n            /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,                           // Kindle Fire without Silk / Echo Show\n            /(kf[a-z]+)( bui|\\)).+silk\\//i                                      // Kindle Fire HD\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [\n            /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i                     // Fire Phone\n            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n\n            // BlackBerry\n            /(playbook);[-\\w\\),; ]+(rim)/i                                      // BlackBerry PlayBook\n            ], [MODEL, VENDOR, [TYPE, TABLET]], [\n            /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n            /\\(bb10; (\\w+)/i                                                    // BlackBerry 10\n            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n\n            // Asus\n            /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [\n            / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n\n            // HTC\n            /(nexus 9)/i                                                        // HTC Nexus 9\n            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [\n            /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,                         // HTC\n\n            // ZTE\n            /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n\n            // TCL\n            /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\\w*(\\)| bui)/i\n            ], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [\n\n            // itel\n            /(itel) ((\\w+))/i\n            ], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { 'tablet' : ['p10001l', 'w7001'], '*' : 'mobile' }]], [\n\n            // Acer\n            /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n\n            // Meizu\n            /droid.+; (m[1-5] note) bui/i,\n            /\\bmz-([-\\w]{2,})/i\n            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n                \n            // Ulefone\n            /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [\n\n            // Energizer\n            /; (energy ?\\w+)(?: bui|\\))/i,\n            /; energizer ([\\w ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [\n\n            // Cat\n            /; cat (b35);/i,\n            /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [\n\n            // Smartfren\n            /((?:new )?andromax[\\w- ]+)(?: bui|\\))/i\n            ], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [\n\n            // Nothing\n            /droid.+; (a(?:015|06[35]|142p?))/i\n            ], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [\n\n            // Archos\n            /; (x67 5g|tikeasy \\w+|ac[1789]\\d\\w+)( b|\\))/i,\n            /archos ?(5|gamepad2?|([\\w ]*[t1789]|hello) ?\\d+[\\w ]*)( b|\\))/i\n            ], [MODEL, [VENDOR, 'Archos'], [TYPE, TABLET]], [\n            /archos ([\\w ]+)( b|\\))/i,\n            /; (ac[3-6]\\d\\w{2,8})( b|\\))/i \n            ], [MODEL, [VENDOR, 'Archos'], [TYPE, MOBILE]], [\n\n            // MIXED\n            /(imo) (tab \\w+)/i,                                                 // IMO\n            /(infinix) (x1101b?)/i                                              // Infinix XPad\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus(?! zenw)|dell|jolla|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\\w]*)/i,\n                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan\n            /; (hmd|imo) ([\\w ]+?)(?: bui|\\))/i,                                // HMD/IMO\n            /(hp) ([\\w ]+\\w)/i,                                                 // HP iPAQ\n            /(microsoft); (lumia[\\w ]+)/i,                                      // Microsoft Lumia\n            /(lenovo)[-_ ]?([-\\w ]+?)(?: bui|\\)|\\/)/i,                          // Lenovo\n            /(oppo) ?([\\w ]+) bui/i                                             // OPPO\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\n            /(kobo)\\s(ereader|touch)/i,                                         // Kobo\n            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(nook)[\\w ]+build\\/(\\w+)/i,                                        // Nook\n            /(dell) (strea[kpr\\d ]*[\\dko])/i,                                   // Dell Streak\n            /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,                                  // Le Pan Tablets\n            /(trinity)[- ]*(t\\d{3}) bui/i,                                      // Trinity Tablets\n            /(gigaset)[- ]+(q\\w{1,9}) bui/i,                                    // Gigaset Tablets\n            /(vodafone) ([\\w ]+)(?:\\)| bui)/i                                   // Vodafone\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(surface duo)/i                                                    // Surface Duo\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [\n            /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i                                 // Fairphone\n            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [\n            /(u304aa)/i                                                         // AT&T\n            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [\n            /\\bsie-(\\w*)/i                                                      // Siemens\n            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [\n            /\\b(rct\\w+) b/i                                                     // RCA Tablets\n            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [\n            /\\b(venue[\\d ]{2,7}) b/i                                            // Dell Venue Tablets\n            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [\n            /\\b(q(?:mv|ta)\\w+) b/i                                              // Verizon Tablet\n            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [\n            /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i                       // Barnes & Noble Tablet\n            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [\n            /\\b(tm\\d{3}\\w+) b/i\n            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [\n            /\\b(k88) b/i                                                        // ZTE K Series Tablet\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [\n            /\\b(nx\\d{3}j) b/i                                                   // ZTE Nubia\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [\n            /\\b(gen\\d{3}) b.+49h/i                                              // Swiss GEN Mobile\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [\n            /\\b(zur\\d{3}) b/i                                                   // Swiss ZUR Tablet\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [\n            /\\b((zeki)?tb.*\\b) b/i                                              // Zeki Tablets\n            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [\n            /\\b([yr]\\d{2}) b/i,\n            /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i                                // Dragon Touch Tablet\n            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [\n            /\\b(ns-?\\w{0,9}) b/i                                                // Insignia Tablets\n            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [\n            /\\b((nxa|next)-?\\w{0,9}) b/i                                        // NextBook Tablets\n            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [\n            /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones\n            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [\n            /\\b(lvtel\\-)?(v1[12]) b/i                                           // LvTel Phones\n            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [\n            /\\b(ph-1) /i                                                        // Essential PH-1\n            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [\n            /\\b(v(100md|700na|7011|917g).*\\b) b/i                               // Envizen Tablets\n            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [\n            /\\b(trio[-\\w\\. ]+) b/i                                              // MachSpeed Tablets\n            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [\n            /\\btu_(1491) b/i                                                    // Rotor Tablets\n            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [\n            /((?:tegranote|shield t(?!.+d tv))[\\w- ]*?)(?: b|\\))/i              // Nvidia Tablets\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, TABLET]], [\n            /(sprint) (\\w+)/i                                                   // Sprint Phones\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n            /(kin\\.[onetw]{3})/i                                                // Microsoft Kin\n            ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [\n            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i             // Zebra\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [\n            /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n\n            ///////////////////\n            // SMARTTVS\n            ///////////////////\n\n            /smart-tv.+(samsung)/i                                              // Samsung\n            ], [VENDOR, [TYPE, SMARTTV]], [\n            /hbbtv.+maple;(\\d+)/i\n            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [\n            /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i        // LG SmartTV\n            ], [[VENDOR, LG], [TYPE, SMARTTV]], [\n            /(apple) ?tv/i                                                      // Apple TV\n            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [\n            /crkey/i                                                            // Google Chromecast\n            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /droid.+aft(\\w+)( bui|\\))/i                                         // Fire TV\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [\n            /(shield \\w+ tv)/i                                                  // Nvidia Shield TV\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, SMARTTV]], [\n            /\\(dtv[\\);].+(aquos)/i,\n            /(aquos-tv[\\w ]+)\\)/i                                               // Sharp\n            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[\n            /(bravia[\\w ]+)( bui|\\))/i                                              // Sony\n            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [\n            /(mi(tv|box)-?\\w+) bui/i                                            // Xiaomi\n            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [\n            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT\n            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [\n            /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,                          // Roku\n            /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i         // HbbTV devices\n            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [\n                                                                                // SmartTV from Unidentified Vendors\n            /droid.+; ([\\w- ]+) (?:android tv|smart[- ]?tv)/i\n            ], [MODEL, [TYPE, SMARTTV]], [\n            /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i\n            ], [[TYPE, SMARTTV]], [\n\n            ///////////////////\n            // CONSOLES\n            ///////////////////\n\n            /(ouya)/i,                                                          // Ouya\n            /(nintendo) ([wids3utch]+)/i                                        // Nintendo\n            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [\n            /droid.+; (shield)( bui|\\))/i                                       // Nvidia Portable\n            ], [MODEL, [VENDOR, NVIDIA], [TYPE, CONSOLE]], [\n            /(playstation \\w+)/i                                                // Playstation\n            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [\n            /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i                                // Microsoft Xbox\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n\n            ///////////////////\n            // WEARABLES\n            ///////////////////\n\n            /\\b(sm-[lr]\\d\\d[0156][fnuw]?s?|gear live)\\b/i                       // Samsung Galaxy Watch\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [\n            /((pebble))app/i,                                                   // Pebble\n            /(asus|google|lg|oppo) ((pixel |zen)?watch[\\w ]*)( bui|\\))/i        // Asus ZenWatch / LG Watch / Pixel Watch\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /(ow(?:19|20)?we?[1-3]{1,3})/i                                      // Oppo Watch\n            ], [MODEL, [VENDOR, OPPO], [TYPE, WEARABLE]], [\n            /(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i                              // Apple Watch\n            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [\n            /(opwwe\\d{3})/i                                                     // OnePlus Watch\n            ], [MODEL, [VENDOR, ONEPLUS], [TYPE, WEARABLE]], [\n            /(moto 360)/i                                                       // Motorola 360\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, WEARABLE]], [\n            /(smartwatch 3)/i                                                   // Sony SmartWatch\n            ], [MODEL, [VENDOR, SONY], [TYPE, WEARABLE]], [\n            /(g watch r)/i                                                      // LG G Watch R\n            ], [MODEL, [VENDOR, LG], [TYPE, WEARABLE]], [\n            /droid.+; (wt63?0{2,3})\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // XR\n            ///////////////////\n\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [\n            /(pico) (4|neo3(?: link|pro)?)/i                                    // Pico\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /; (quest( \\d| pro)?)/i                                             // Oculus Quest\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // EMBEDDED\n            ///////////////////\n\n            /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i                              // Tesla\n            ], [VENDOR, [TYPE, EMBEDDED]], [\n            /(aeobc)\\b/i                                                        // Echo Dot\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n            /(homepod).+mac os/i                                                // Apple HomePod\n            ], [MODEL, [VENDOR, APPLE], [TYPE, EMBEDDED]], [\n            /windows iot/i\n            ], [[TYPE, EMBEDDED]], [\n\n            ////////////////////\n            // MIXED (GENERIC)\n            ///////////////////\n\n            /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+? mobile safari/i    // Android Phones from Unidentified Vendors\n            ], [MODEL, [TYPE, MOBILE]], [\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors\n            ], [MODEL, [TYPE, TABLET]], [\n            /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i                      // Unidentifiable Tablet\n            ], [[TYPE, TABLET]], [\n            /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile\n            ], [[TYPE, MOBILE]], [\n            /droid .+?; ([\\w\\. -]+)( bui|\\))/i                                  // Generic Android Device\n            ], [MODEL, [VENDOR, 'Generic']]\n        ],\n\n        engine : [[\n\n            /windows.+ edge\\/([\\w\\.]+)/i                                       // EdgeHTML\n            ], [VERSION, [NAME, EDGE+'HTML']], [\n\n            /(arkweb)\\/([\\w\\.]+)/i                                              // ArkWeb\n            ], [NAME, VERSION], [\n\n            /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i                         // Blink\n            ], [VERSION, [NAME, 'Blink']], [\n\n            /(presto)\\/([\\w\\.]+)/i,                                             // Presto\n            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo\n            /ekioh(flow)\\/([\\w\\.]+)/i,                                          // Flow\n            /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,                           // KHTML/Tasman/Links\n            /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,                                      // iCab\n\n            /\\b(libweb)/i                                                       // LibWeb\n            ], [NAME, VERSION], [\n            /ladybird\\//i\n            ], [[NAME, 'LibWeb']], [\n\n            /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i                                     // Gecko\n            ], [VERSION, NAME]\n        ],\n\n        os : [[\n\n            // Windows\n            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)\n            ], [NAME, VERSION], [\n            /(windows (?:phone(?: os)?|mobile|iot))[\\/ ]?([\\d\\.\\w ]*)/i         // Windows Phone\n            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [\n            /windows nt 6\\.2; (arm)/i,                                          // Windows RT\n            /windows[\\/ ]([ntce\\d\\. ]+\\w)(?!.+xbox)/i,\n            /(?:win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n            ], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [\n\n            // iOS/macOS\n            /[adehimnop]{4,7}\\b(?:.*os ([\\w]+) like mac|; opera)/i,             // iOS\n            /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i,\n            /cfnetwork\\/.+darwin/i\n            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [\n            /(mac os x) ?([\\w\\. ]*)/i,\n            /(macintosh|mac_powerpc\\b)(?!.+haiku)/i                             // Mac OS\n            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [\n\n            // Mobile OSes\n            /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS\n            ], [VERSION, NAME], [                                               \n            /(ubuntu) ([\\w\\.]+) like android/i                                  // Ubuntu Touch\n            ], [[NAME, /(.+)/, '$1 Touch'], VERSION], [\n                                                                                // Android/Blackberry/WebOS/QNX/Bada/RIM/KaiOS/Maemo/MeeGo/S40/Sailfish OS/OpenHarmony/Tizen\n            /(android|bada|blackberry|kaios|maemo|meego|openharmony|qnx|rim tablet os|sailfish|series40|symbian|tizen|webos)\\w*[-\\/; ]?([\\d\\.]*)/i\n            ], [NAME, VERSION], [\n            /\\(bb(10);/i                                                        // BlackBerry 10\n            ], [VERSION, [NAME, BLACKBERRY]], [\n            /(?:symbian ?os|symbos|s60(?=;)|series ?60)[-\\/ ]?([\\w\\.]*)/i       // Symbian\n            ], [VERSION, [NAME, 'Symbian']], [\n            /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n            ], [VERSION, [NAME, FIREFOX+' OS']], [\n            /web0s;.+rt(tv)/i,\n            /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i                              // WebOS\n            ], [VERSION, [NAME, 'webOS']], [\n            /watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i                              // watchOS\n            ], [VERSION, [NAME, 'watchOS']], [\n\n            // Google Chromecast\n            /crkey\\/([\\d\\.]+)/i                                                 // Google Chromecast\n            ], [VERSION, [NAME, CHROME+'cast']], [\n            /(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i                                  // Chromium OS\n            ], [[NAME, CHROMIUM_OS], VERSION],[\n\n            // Smart TVs\n            /panasonic;(viera)/i,                                               // Panasonic Viera\n            /(netrange)mmh/i,                                                   // Netrange\n            /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,                                         // NetTV\n\n            // Console\n            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation\n            /(xbox); +xbox ([^\\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n            // Other\n            /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,                            // Joli/Palm\n            /(mint)[\\/\\(\\) ]?(\\w*)/i,                                           // Mint\n            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux\n            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n            /(hurd|linux)(?: arm\\w*| x86\\w*| ?)([\\w\\.]*)/i,                     // Hurd/Linux\n            /(gnu) ?([\\w\\.]*)/i,                                                // GNU\n            /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n            /(haiku) (\\w+)/i                                                    // Haiku\n            ], [NAME, VERSION], [\n            /(sunos) ?([\\w\\.\\d]*)/i                                             // Solaris\n            ], [[NAME, 'Solaris'], VERSION], [\n            /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,                              // Solaris\n            /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,                                  // AIX\n            /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n            /(unix) ?([\\w\\.]*)/i                                                // UNIX\n            ], [NAME, VERSION]\n        ]\n    };\n\n    /////////////////\n    // Constructor\n    ////////////////\n\n    var UAParser = function (ua, extensions) {\n\n        if (typeof ua === OBJ_TYPE) {\n            extensions = ua;\n            ua = undefined;\n        }\n\n        if (!(this instanceof UAParser)) {\n            return new UAParser(ua, extensions).getResult();\n        }\n\n        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;\n        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);\n        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;\n        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n        var _isSelfNav = _navigator && _navigator.userAgent == _ua;\n\n        this.getBrowser = function () {\n            var _browser = {};\n            _browser[NAME] = undefined;\n            _browser[VERSION] = undefined;\n            rgxMapper.call(_browser, _ua, _rgxmap.browser);\n            _browser[MAJOR] = majorize(_browser[VERSION]);\n            // Brave-specific detection\n            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {\n                _browser[NAME] = 'Brave';\n            }\n            return _browser;\n        };\n        this.getCPU = function () {\n            var _cpu = {};\n            _cpu[ARCHITECTURE] = undefined;\n            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n            return _cpu;\n        };\n        this.getDevice = function () {\n            var _device = {};\n            _device[VENDOR] = undefined;\n            _device[MODEL] = undefined;\n            _device[TYPE] = undefined;\n            rgxMapper.call(_device, _ua, _rgxmap.device);\n            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {\n                _device[TYPE] = MOBILE;\n            }\n            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {\n                _device[MODEL] = 'iPad';\n                _device[TYPE] = TABLET;\n            }\n            return _device;\n        };\n        this.getEngine = function () {\n            var _engine = {};\n            _engine[NAME] = undefined;\n            _engine[VERSION] = undefined;\n            rgxMapper.call(_engine, _ua, _rgxmap.engine);\n            return _engine;\n        };\n        this.getOS = function () {\n            var _os = {};\n            _os[NAME] = undefined;\n            _os[VERSION] = undefined;\n            rgxMapper.call(_os, _ua, _rgxmap.os);\n            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {\n                _os[NAME] = _uach.platform  \n                                    .replace(/chrome os/i, CHROMIUM_OS)\n                                    .replace(/macos/i, MAC_OS);           // backward compatibility\n            }\n            return _os;\n        };\n        this.getResult = function () {\n            return {\n                ua      : this.getUA(),\n                browser : this.getBrowser(),\n                engine  : this.getEngine(),\n                os      : this.getOS(),\n                device  : this.getDevice(),\n                cpu     : this.getCPU()\n            };\n        };\n        this.getUA = function () {\n            return _ua;\n        };\n        this.setUA = function (ua) {\n            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;\n            return this;\n        };\n        this.setUA(_ua);\n        return this;\n    };\n\n    UAParser.VERSION = LIBVERSION;\n    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);\n    UAParser.CPU = enumerize([ARCHITECTURE]);\n    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n    ///////////\n    // Export\n    //////////\n\n    // check js environment\n    if (typeof(exports) !== UNDEF_TYPE) {\n        // nodejs env\n        if (typeof module !== UNDEF_TYPE && module.exports) {\n            exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n    } else {\n        // requirejs env (optional)\n        if (typeof(define) === FUNC_TYPE && define.amd) {\n            define(function () {\n                return UAParser;\n            });\n        } else if (typeof window !== UNDEF_TYPE) {\n            // browser env\n            window.UAParser = UAParser;\n        }\n    }\n\n    // jQuery/Zepto specific (optional)\n    // Note:\n    //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n    //   and we should catch that.\n    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n    if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n            return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n            parser.setUA(ua);\n            var result = parser.getResult();\n            for (var prop in result) {\n                $.ua[prop] = result[prop];\n            }\n        };\n    }\n\n})(typeof window === 'object' ? window : this);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result.\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling didn't run because the request was aborted.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling was skipped because the response had started.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was not handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease was acquired\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the endpoint limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the global limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was canceled\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match failed\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match succeeded\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * A value that indicates whether the user is authenticated.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_USER_IS_AUTHENTICATED = 'aspnetcore.user.is_authenticated';\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port';\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nexport const ATTR_CODE_COLUMN_NUMBER = 'code.column.number';\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nexport const ATTR_CODE_FILE_PATH = 'code.file.path';\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nexport const ATTR_CODE_FUNCTION_NAME = 'code.function.name';\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nexport const ATTR_CODE_LINE_NUMBER = 'code.line.number';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_CODE_STACKTRACE = 'code.stacktrace';\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nexport const ATTR_DB_COLLECTION_NAME = 'db.collection.name';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nexport const ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nexport const ATTR_DB_QUERY_SUMMARY = 'db.query.summary';\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nexport const ATTR_DB_QUERY_TEXT = 'db.query.text';\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nexport const ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nexport const ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name';\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nexport const ATTR_DB_SYSTEM_NAME = 'db.system.name';\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MariaDB](https://mariadb.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\";\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [Microsoft SQL Server](https://www.microsoft.com/sql-server)\n */\nexport const DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\";\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MySQL](https://www.mysql.com/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\";\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [PostgreSQL](https://www.postgresql.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\";\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 0\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 1\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 2\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Large Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Pinned Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n *\n * A fallback error value to be used when the instrumentation doesn't define a custom value.\n */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * Any HTTP method that the instrumentation has no prior knowledge of.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * CONNECT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * DELETE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * GET method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * HEAD method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * OPTIONS method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PATCH method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * POST method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PUT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * TRACE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Heap memory.\n */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Non-heap memory\n */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is blocked waiting for a monitor lock is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has not yet started is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread executing in the Java virtual machine is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has exited is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting indefinitely for another thread to perform a particular action is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Named or anonymous pipe.\n */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * QUIC\n */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * TCP\n */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * UDP\n */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Unix domain socket\n */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type';\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv4\n */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv6\n */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation contains an error.\n */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation has been validated by an Application developer or Operator to have completed successfully.\n */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed because the app is shutting down.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed normally.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed due to a timeout.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * LongPolling protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * ServerSentEvents protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * WebSockets protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map","// This does not uses isUndefined method because it will throw an error in non-browser environments\nexport const globalObject = (typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n        ? global\n        : typeof self !== 'undefined'\n            ? self\n            : undefined);\n//# sourceMappingURL=globalObject.js.map","import { globalObject } from '../globalObject';\nexport function setFaroOnGlobalObject(faro) {\n    if (!faro.config.preventGlobalExposure) {\n        faro.internalLogger.debug(`Registering public faro reference in the global scope using \"${faro.config.globalObjectKey}\" key`);\n        if (faro.config.globalObjectKey in globalObject) {\n            faro.internalLogger.warn(`Skipping global registration due to key \"${faro.config.globalObjectKey}\" being used already. Please set \"globalObjectKey\" to something else or set \"preventGlobalExposure\" to \"true\"`);\n            return;\n        }\n        Object.defineProperty(globalObject, faro.config.globalObjectKey, {\n            configurable: false,\n            writable: false,\n            value: faro,\n        });\n    }\n    else {\n        faro.internalLogger.debug('Skipping registering public Faro instance in the global scope');\n    }\n}\n//# sourceMappingURL=faroGlobalObject.js.map","export const internalGlobalObjectKey = '_faroInternal';\n//# sourceMappingURL=const.js.map","import { globalObject } from '../globalObject';\nimport { internalGlobalObjectKey } from './const';\nexport function getInternalFromGlobalObject() {\n    return globalObject[internalGlobalObjectKey];\n}\nexport function setInternalFaroOnGlobalObject(faro) {\n    if (!faro.config.isolate) {\n        faro.internalLogger.debug('Registering internal Faro instance on global object');\n        Object.defineProperty(globalObject, internalGlobalObjectKey, {\n            configurable: false,\n            enumerable: false,\n            writable: false,\n            value: faro,\n        });\n    }\n    else {\n        faro.internalLogger.debug('Skipping registering internal Faro instance on global object');\n    }\n}\nexport function isInternalFaroOnGlobalObject() {\n    return internalGlobalObjectKey in globalObject;\n}\n//# sourceMappingURL=internalFaroGlobalObject.js.map","import { setFaroOnGlobalObject } from './faroGlobalObject';\nimport { setInternalFaroOnGlobalObject } from './internalFaroGlobalObject';\nexport let faro = {};\nexport function registerFaro(unpatchedConsole, internalLogger, config, metas, transports, api, instrumentations) {\n    internalLogger.debug('Initializing Faro');\n    faro = {\n        api,\n        config,\n        instrumentations,\n        internalLogger,\n        metas,\n        pause: transports.pause,\n        transports,\n        unpatchedConsole,\n        unpause: transports.unpause,\n    };\n    setInternalFaroOnGlobalObject(faro);\n    setFaroOnGlobalObject(faro);\n    return faro;\n}\n//# sourceMappingURL=registerFaro.js.map","export class Observable {\n    constructor() {\n        this.subscribers = [];\n    }\n    subscribe(subscriber) {\n        this.subscribers.push(subscriber);\n        return {\n            unsubscribe: () => this.unsubscribe(subscriber),\n        };\n    }\n    unsubscribe(subscriber) {\n        this.subscribers = this.subscribers.filter((sub) => sub !== subscriber);\n    }\n    notify(value) {\n        this.subscribers.forEach((subscriber) => subscriber(value));\n    }\n    first() {\n        const result = new Observable();\n        const internalSubscriber = (data) => {\n            result.notify(data);\n            subscription.unsubscribe();\n        };\n        const subscription = this.subscribe(internalSubscriber);\n        const resultUnsubscribeFn = result.unsubscribe.bind(result);\n        return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n    }\n    takeWhile(predicate) {\n        const result = new Observable();\n        const internalSubscriber = (value) => {\n            if (predicate(value)) {\n                result.notify(value);\n            }\n            else {\n                result.unsubscribe(internalSubscriber);\n            }\n        };\n        this.subscribe(internalSubscriber);\n        const resultUnsubscribeFn = result.unsubscribe.bind(result);\n        return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n    }\n    filter(predicate) {\n        const result = new Observable();\n        const internalSubscriber = (value) => {\n            if (predicate(value)) {\n                result.notify(value);\n            }\n        };\n        this.subscribe(internalSubscriber);\n        const resultUnsubscribeFn = result.unsubscribe.bind(result);\n        return this.withUnsubscribeOverride(result, resultUnsubscribeFn, internalSubscriber);\n    }\n    merge(...observables) {\n        const mergerObservable = new Observable();\n        const subscriptions = [];\n        observables.forEach((observable) => {\n            const subscription = observable.subscribe((value) => {\n                mergerObservable.notify(value);\n            });\n            subscriptions.push(subscription);\n        });\n        const originalUnsubscribeAll = mergerObservable.unsubscribeAll.bind(mergerObservable);\n        mergerObservable.unsubscribe = () => {\n            subscriptions.forEach((subscription) => subscription.unsubscribe());\n            originalUnsubscribeAll();\n        };\n        return mergerObservable;\n    }\n    withUnsubscribeOverride(observable, resultUnsubscribeFn, internalSubscriber) {\n        observable.unsubscribe = (subscriber) => {\n            resultUnsubscribeFn(subscriber);\n            this.unsubscribe(internalSubscriber);\n        };\n        return observable;\n    }\n    unsubscribeAll() {\n        this.subscribers = [];\n    }\n}\n//# sourceMappingURL=reactive.js.map","export var TransportItemType;\n(function (TransportItemType) {\n    TransportItemType[\"EXCEPTION\"] = \"exception\";\n    TransportItemType[\"LOG\"] = \"log\";\n    TransportItemType[\"MEASUREMENT\"] = \"measurement\";\n    TransportItemType[\"TRACE\"] = \"trace\";\n    TransportItemType[\"EVENT\"] = \"event\";\n})(TransportItemType || (TransportItemType = {}));\nexport const transportItemTypeToBodyKey = {\n    [TransportItemType.EXCEPTION]: 'exceptions',\n    [TransportItemType.LOG]: 'logs',\n    [TransportItemType.MEASUREMENT]: 'measurements',\n    [TransportItemType.TRACE]: 'traces',\n    [TransportItemType.EVENT]: 'events',\n};\n//# sourceMappingURL=const.js.map","export function isTypeof(value, type) {\n    return typeof value === type;\n}\nexport function isToString(value, type) {\n    return Object.prototype.toString.call(value) === `[object ${type}]`;\n}\nexport function isInstanceOf(value, reference) {\n    try {\n        return value instanceof reference;\n    }\n    catch (err) {\n        return false;\n    }\n}\nexport const isUndefined = ((value) => isTypeof(value, 'undefined'));\nexport const isNull = ((value) => isTypeof(value, 'null'));\nexport const isString = ((value) => isTypeof(value, 'string'));\nexport const isNumber = ((value) => (isTypeof(value, 'number') && !isNaN(value)) || isTypeof(value, 'bigint'));\nexport const isInt = ((value) => isNumber(value) && Number.isInteger(value));\nexport const isBoolean = ((value) => isTypeof(value, 'boolean'));\nexport const isSymbol = ((value) => isTypeof(value, 'symbol'));\nexport const isObject = ((value) => !isNull(value) && isTypeof(value, 'object'));\nexport const isFunction = ((value) => isTypeof(value, 'function'));\nexport const isArray = ((value) => isToString(value, 'Array'));\nexport const isRegExp = ((value) => isToString(value, 'RegExp'));\nexport const isThenable = ((value) => isFunction(value === null || value === void 0 ? void 0 : value.then));\nexport const isPrimitive = ((value) => !isObject(value) && !isFunction(value));\nexport const isEventDefined = typeof Event !== 'undefined';\nexport const isEvent = ((value) => isEventDefined && isInstanceOf(value, Event));\nexport const isErrorDefined = typeof Error !== 'undefined';\nexport const isError = ((value) => isErrorDefined && isInstanceOf(value, Error));\nexport const isErrorEvent = ((value) => isToString(value, 'ErrorEvent'));\nexport const isDomError = ((value) => isToString(value, 'DOMError'));\nexport const isDomException = ((value) => isToString(value, 'DOMException'));\nexport const isElementDefined = typeof Element !== 'undefined';\nexport const isElement = ((value) => isElementDefined && isInstanceOf(value, Element));\nexport const isMapDefined = typeof Map !== 'undefined';\nexport const isMap = ((value) => isMapDefined && isInstanceOf(value, Map));\nexport const isSyntheticEvent = ((value) => isObject(value) &&\n    'nativeEvent' in value &&\n    'preventDefault' in value &&\n    'stopPropagation' in value);\nexport function isEmpty(value) {\n    if (value == null) {\n        return true;\n    }\n    if (isArray(value) || isString(value)) {\n        return value.length === 0;\n    }\n    if (isObject(value)) {\n        return Object.keys(value).length === 0;\n    }\n    return false;\n}\n//# sourceMappingURL=is.js.map","import { isObject } from './is';\nexport function getCircularDependencyReplacer() {\n    const valueSeen = new WeakSet();\n    return function (_key, value) {\n        if (isObject(value) && value !== null) {\n            if (valueSeen.has(value)) {\n                return null;\n            }\n            valueSeen.add(value);\n        }\n        return value;\n    };\n}\nexport function stringifyExternalJson(json = {}) {\n    return JSON.stringify(json !== null && json !== void 0 ? json : {}, getCircularDependencyReplacer());\n}\nexport function stringifyObjectValues(obj = {}) {\n    const o = {};\n    for (const [key, value] of Object.entries(obj)) {\n        o[key] = isObject(value) && value !== null ? stringifyExternalJson(value) : String(value);\n    }\n    return o;\n}\n//# sourceMappingURL=json.js.map","export function dateNow() {\n    return Date.now();\n}\nexport function getCurrentTimestamp() {\n    return new Date().toISOString();\n}\nexport function timestampToIsoString(value) {\n    return new Date(value).toISOString();\n}\n//# sourceMappingURL=date.js.map","import { isArray, isObject, isTypeof } from './is';\n// This function was inspired by fast-deep-equal\n// fast-deep-equal has issues with Rollup and also it checks for some edge cases that we don't need\nexport function deepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    // Using isTypeOf instead of isNumber as isNumber also checks against NaN\n    if (isTypeof(a, 'number') && isNaN(a)) {\n        return isTypeof(b, 'number') && isNaN(b);\n    }\n    const aIsArray = isArray(a);\n    const bIsArray = isArray(b);\n    if (aIsArray !== bIsArray) {\n        return false;\n    }\n    if (aIsArray && bIsArray) {\n        const length = a.length;\n        if (length !== b.length) {\n            return false;\n        }\n        for (let idx = length; idx-- !== 0;) {\n            if (!deepEqual(a[idx], b[idx])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    const aIsObject = isObject(a);\n    const bIsObject = isObject(b);\n    if (aIsObject !== bIsObject) {\n        return false;\n    }\n    if (a && b && aIsObject && bIsObject) {\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n        const aLength = aKeys.length;\n        const bLength = bKeys.length;\n        if (aLength !== bLength) {\n            return false;\n        }\n        for (let aKey of aKeys) {\n            if (!bKeys.includes(aKey)) {\n                return false;\n            }\n        }\n        for (let aKey of aKeys) {\n            if (!deepEqual(a[aKey], b[aKey])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=deepEqual.js.map","export const USER_ACTION_START = 'user-action-start';\nexport const USER_ACTION_END = 'user-action-end';\nexport const USER_ACTION_CANCEL = 'user-action-cancel';\nexport const USER_ACTION_HALT = 'user-action-halt';\n//# sourceMappingURL=const.js.map","import { TransportItemType } from '../../transports';\nimport { deepEqual, getCurrentTimestamp, isEmpty, isNull, stringifyObjectValues } from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nexport function initializeEventsAPI({ internalLogger, config, metas, transports, tracesApi, actionBuffer, getMessage, }) {\n    let lastPayload = null;\n    const pushEvent = (name, attributes, domain, { skipDedupe, spanContext, timestampOverwriteMs, customPayloadTransformer = (payload) => payload } = {}) => {\n        try {\n            const attrs = stringifyObjectValues(attributes);\n            const item = {\n                meta: metas.value,\n                payload: customPayloadTransformer({\n                    name,\n                    domain: domain !== null && domain !== void 0 ? domain : config.eventDomain,\n                    attributes: isEmpty(attrs) ? undefined : attrs,\n                    timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(),\n                    trace: spanContext\n                        ? {\n                            trace_id: spanContext.traceId,\n                            span_id: spanContext.spanId,\n                        }\n                        : tracesApi.getTraceContext(),\n                }),\n                type: TransportItemType.EVENT,\n            };\n            const testingPayload = {\n                name: item.payload.name,\n                attributes: item.payload.attributes,\n                domain: item.payload.domain,\n            };\n            if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n                internalLogger.debug('Skipping event push because it is the same as the last one\\n', item.payload);\n                return;\n            }\n            lastPayload = testingPayload;\n            internalLogger.debug('Pushing event\\n', item);\n            const msg = getMessage();\n            if (msg && msg.type === USER_ACTION_START) {\n                actionBuffer.addItem(item);\n            }\n            else {\n                transports.execute(item);\n            }\n        }\n        catch (err) {\n            internalLogger.error('Error pushing event', err);\n        }\n    };\n    return {\n        pushEvent,\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { isString } from '../utils/is';\nexport function shouldIgnoreEvent(patterns, msg) {\n    return patterns.some((pattern) => {\n        return isString(pattern) ? msg.includes(pattern) : !!msg.match(pattern);\n    });\n}\n//# sourceMappingURL=utils.js.map","import { isObject, stringifyExternalJson } from '../../utils';\nexport const defaultExceptionType = 'Error';\nexport const defaultErrorArgsSerializer = (args) => {\n    return args\n        .map((arg) => {\n        if (isObject(arg)) {\n            return stringifyExternalJson(arg);\n        }\n        return String(arg);\n    })\n        .join(' ');\n};\n//# sourceMappingURL=const.js.map","import { TransportItemType } from '../../transports';\nimport { deepEqual, getCurrentTimestamp, isArray, isEmpty, isError, isNull, isObject, stringifyExternalJson, stringifyObjectValues, } from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nimport { shouldIgnoreEvent } from '../utils';\nimport { defaultExceptionType } from './const';\nlet stacktraceParser;\nexport function initializeExceptionsAPI({ internalLogger, config, metas, transports, tracesApi, actionBuffer, getMessage, }) {\n    var _a;\n    internalLogger.debug('Initializing exceptions API');\n    let lastPayload = null;\n    stacktraceParser = (_a = config.parseStacktrace) !== null && _a !== void 0 ? _a : stacktraceParser;\n    const changeStacktraceParser = (newStacktraceParser) => {\n        internalLogger.debug('Changing stacktrace parser');\n        stacktraceParser = newStacktraceParser !== null && newStacktraceParser !== void 0 ? newStacktraceParser : stacktraceParser;\n    };\n    const getStacktraceParser = () => stacktraceParser;\n    const { ignoreErrors = [], preserveOriginalError } = config;\n    const pushError = (error, { skipDedupe, stackFrames, type, context, spanContext, timestampOverwriteMs, originalError } = {}) => {\n        if (isErrorIgnored(ignoreErrors, originalError !== null && originalError !== void 0 ? originalError : error)) {\n            return;\n        }\n        try {\n            const ctx = stringifyObjectValues(Object.assign(Object.assign({}, parseCause(originalError !== null && originalError !== void 0 ? originalError : error)), (context !== null && context !== void 0 ? context : {})));\n            const item = {\n                meta: metas.value,\n                payload: Object.assign(Object.assign({ type: type || error.name || defaultExceptionType, value: error.message, timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(), trace: spanContext\n                        ? {\n                            trace_id: spanContext.traceId,\n                            span_id: spanContext.spanId,\n                        }\n                        : tracesApi.getTraceContext() }, (isEmpty(ctx) ? {} : { context: ctx })), (preserveOriginalError ? { originalError } : {})),\n                type: TransportItemType.EXCEPTION,\n            };\n            stackFrames = stackFrames !== null && stackFrames !== void 0 ? stackFrames : (error.stack ? stacktraceParser === null || stacktraceParser === void 0 ? void 0 : stacktraceParser(error).frames : undefined);\n            if (stackFrames === null || stackFrames === void 0 ? void 0 : stackFrames.length) {\n                item.payload.stacktrace = {\n                    frames: stackFrames,\n                };\n            }\n            const testingPayload = {\n                type: item.payload.type,\n                value: item.payload.value,\n                stackTrace: item.payload.stacktrace,\n                context: item.payload.context,\n            };\n            if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n                internalLogger.debug('Skipping error push because it is the same as the last one\\n', item.payload);\n                return;\n            }\n            lastPayload = testingPayload;\n            internalLogger.debug('Pushing exception\\n', item);\n            const msg = getMessage();\n            if (msg && msg.type === USER_ACTION_START) {\n                actionBuffer.addItem(item);\n            }\n            else {\n                transports.execute(item);\n            }\n        }\n        catch (err) {\n            internalLogger.error('Error pushing event', err);\n        }\n    };\n    changeStacktraceParser(config.parseStacktrace);\n    return {\n        changeStacktraceParser,\n        getStacktraceParser,\n        pushError,\n    };\n}\nfunction parseCause(error) {\n    let cause = error.cause;\n    if (isError(cause)) {\n        cause = error.cause.toString();\n        // typeof operator on null returns \"object\". This is a well-known quirk in JavaScript and is considered a bug that cannot be fixed due to backward compatibility issues.\n        // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null\n    }\n    else if (cause !== null && (isObject(error.cause) || isArray(error.cause))) {\n        cause = stringifyExternalJson(error.cause);\n    }\n    else if (cause != null) {\n        cause = error.cause.toString();\n    }\n    return cause == null ? {} : { cause };\n}\nfunction isErrorIgnored(ignoreErrors, error) {\n    const { message, name, stack } = error;\n    return shouldIgnoreEvent(ignoreErrors, message + ' ' + name + ' ' + stack);\n}\n//# sourceMappingURL=initialize.js.map","export var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"TRACE\"] = \"trace\";\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"LOG\"] = \"log\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n})(LogLevel || (LogLevel = {}));\nexport const defaultLogLevel = LogLevel.LOG;\nexport const allLogLevels = [\n    LogLevel.TRACE,\n    LogLevel.DEBUG,\n    LogLevel.INFO,\n    LogLevel.LOG,\n    LogLevel.WARN,\n    LogLevel.ERROR,\n];\n//# sourceMappingURL=logLevels.js.map","export const defaultLogArgsSerializer = (args) => args\n    .map((arg) => {\n    try {\n        return String(arg);\n    }\n    catch (err) {\n        return '';\n    }\n})\n    .join(' ');\n//# sourceMappingURL=const.js.map","import { TransportItemType } from '../../transports';\nimport { deepEqual, defaultLogLevel, getCurrentTimestamp, isEmpty, isNull, stringifyObjectValues } from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nimport { defaultLogArgsSerializer } from './const';\nexport function initializeLogsAPI({ internalLogger, config, metas, transports, tracesApi, actionBuffer, getMessage, }) {\n    var _a;\n    internalLogger.debug('Initializing logs API');\n    let lastPayload = null;\n    const logArgsSerializer = (_a = config.logArgsSerializer) !== null && _a !== void 0 ? _a : defaultLogArgsSerializer;\n    const pushLog = (args, { context, level, skipDedupe, spanContext, timestampOverwriteMs } = {}) => {\n        try {\n            const ctx = stringifyObjectValues(context);\n            const item = {\n                type: TransportItemType.LOG,\n                payload: {\n                    message: logArgsSerializer(args),\n                    level: level !== null && level !== void 0 ? level : defaultLogLevel,\n                    context: isEmpty(ctx) ? undefined : ctx,\n                    timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(),\n                    trace: spanContext\n                        ? {\n                            trace_id: spanContext.traceId,\n                            span_id: spanContext.spanId,\n                        }\n                        : tracesApi.getTraceContext(),\n                },\n                meta: metas.value,\n            };\n            const testingPayload = {\n                message: item.payload.message,\n                level: item.payload.level,\n                context: item.payload.context,\n            };\n            if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n                internalLogger.debug('Skipping log push because it is the same as the last one\\n', item.payload);\n                return;\n            }\n            lastPayload = testingPayload;\n            internalLogger.debug('Pushing log\\n', item);\n            const msg = getMessage();\n            if (msg && msg.type === USER_ACTION_START) {\n                actionBuffer.addItem(item);\n            }\n            else {\n                transports.execute(item);\n            }\n        }\n        catch (err) {\n            internalLogger.error('Error pushing log\\n', err);\n        }\n    };\n    return {\n        pushLog,\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { TransportItemType } from '../../transports';\nimport { deepEqual, getCurrentTimestamp, isEmpty, isNull, stringifyObjectValues } from '../../utils';\nimport { timestampToIsoString } from '../../utils/date';\nimport { USER_ACTION_START } from '../const';\nexport function initializeMeasurementsAPI({ internalLogger, config, metas, transports, tracesApi, actionBuffer, getMessage, }) {\n    internalLogger.debug('Initializing measurements API');\n    let lastPayload = null;\n    const pushMeasurement = (payload, { skipDedupe, context, spanContext, timestampOverwriteMs } = {}) => {\n        try {\n            const ctx = stringifyObjectValues(context);\n            const item = {\n                type: TransportItemType.MEASUREMENT,\n                payload: Object.assign(Object.assign({}, payload), { trace: spanContext\n                        ? {\n                            trace_id: spanContext.traceId,\n                            span_id: spanContext.spanId,\n                        }\n                        : tracesApi.getTraceContext(), timestamp: timestampOverwriteMs ? timestampToIsoString(timestampOverwriteMs) : getCurrentTimestamp(), context: isEmpty(ctx) ? undefined : ctx }),\n                meta: metas.value,\n            };\n            const testingPayload = {\n                type: item.payload.type,\n                values: item.payload.values,\n                context: item.payload.context,\n            };\n            if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n                internalLogger.debug('Skipping measurement push because it is the same as the last one\\n', item.payload);\n                return;\n            }\n            lastPayload = testingPayload;\n            internalLogger.debug('Pushing measurement\\n', item);\n            const msg = getMessage();\n            if (msg && msg.type === USER_ACTION_START) {\n                actionBuffer.addItem(item);\n            }\n            else {\n                transports.execute(item);\n            }\n        }\n        catch (err) {\n            internalLogger.error('Error pushing measurement\\n', err);\n        }\n    };\n    return {\n        pushMeasurement,\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { isEmpty, isString } from '../../utils/is';\nexport function initializeMetaAPI({ internalLogger, metas, }) {\n    internalLogger.debug('Initializing meta API');\n    let metaSession = undefined;\n    let metaUser = undefined;\n    let metaView = undefined;\n    let metaPage = undefined;\n    const setUser = (user) => {\n        if (metaUser) {\n            metas.remove(metaUser);\n        }\n        metaUser = {\n            user,\n        };\n        metas.add(metaUser);\n    };\n    const setSession = (session, options) => {\n        var _a;\n        const newOverrides = options === null || options === void 0 ? void 0 : options.overrides;\n        const overrides = newOverrides\n            ? {\n                overrides: Object.assign(Object.assign({}, (_a = metaSession === null || metaSession === void 0 ? void 0 : metaSession.session) === null || _a === void 0 ? void 0 : _a.overrides), newOverrides),\n            }\n            : {};\n        if (metaSession) {\n            metas.remove(metaSession);\n        }\n        metaSession = {\n            session: Object.assign(Object.assign({}, (isEmpty(session) ? undefined : session)), overrides),\n        };\n        metas.add(metaSession);\n    };\n    const getSession = () => metas.value.session;\n    const setView = (view, options) => {\n        var _a;\n        if (options === null || options === void 0 ? void 0 : options.overrides) {\n            setSession(getSession(), { overrides: options.overrides });\n        }\n        if (((_a = metaView === null || metaView === void 0 ? void 0 : metaView.view) === null || _a === void 0 ? void 0 : _a.name) === (view === null || view === void 0 ? void 0 : view.name)) {\n            return;\n        }\n        const previousView = metaView;\n        metaView = {\n            view,\n        };\n        metas.add(metaView);\n        if (previousView) {\n            metas.remove(previousView);\n        }\n    };\n    const getView = () => metas.value.view;\n    const setPage = (page) => {\n        var _a;\n        const pageMeta = isString(page)\n            ? Object.assign(Object.assign({}, ((_a = metaPage === null || metaPage === void 0 ? void 0 : metaPage.page) !== null && _a !== void 0 ? _a : getPage())), { id: page }) : page;\n        if (metaPage) {\n            metas.remove(metaPage);\n        }\n        metaPage = {\n            page: pageMeta,\n        };\n        metas.add(metaPage);\n    };\n    const getPage = () => metas.value.page;\n    return {\n        setUser,\n        resetUser: setUser,\n        setSession,\n        resetSession: setSession,\n        getSession,\n        setView,\n        getView,\n        setPage,\n        getPage,\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { TransportItemType } from '../../transports';\nexport function initializeTracesAPI(_unpatchedConsole, internalLogger, _config, metas, transports) {\n    internalLogger.debug('Initializing traces API');\n    let otel = undefined;\n    const initOTEL = (trace, context) => {\n        internalLogger.debug('Initializing OpenTelemetry');\n        otel = {\n            trace,\n            context,\n        };\n    };\n    const getTraceContext = () => {\n        const ctx = otel === null || otel === void 0 ? void 0 : otel.trace.getSpanContext(otel.context.active());\n        return !ctx\n            ? undefined\n            : {\n                trace_id: ctx.traceId,\n                span_id: ctx.spanId,\n            };\n    };\n    const pushTraces = (payload) => {\n        try {\n            const item = {\n                type: TransportItemType.TRACE,\n                payload,\n                meta: metas.value,\n            };\n            internalLogger.debug('Pushing trace\\n', item);\n            transports.execute(item);\n        }\n        catch (err) {\n            internalLogger.error('Error pushing trace\\n', err);\n        }\n    };\n    const getOTEL = () => otel;\n    const isOTELInitialized = () => !!otel;\n    return {\n        getOTEL,\n        getTraceContext,\n        initOTEL,\n        isOTELInitialized,\n        pushTraces,\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { isFunction } from '../utils/is';\nexport class ItemBuffer {\n    constructor() {\n        this.buffer = [];\n    }\n    addItem(item) {\n        this.buffer.push(item);\n    }\n    flushBuffer(cb) {\n        if (isFunction(cb)) {\n            for (const item of this.buffer) {\n                cb(item);\n            }\n        }\n        this.buffer.length = 0;\n    }\n    size() {\n        return this.buffer.length;\n    }\n}\n//# sourceMappingURL=ItemBuffer.js.map","import { TransportItemType } from '../transports';\nimport { USER_ACTION_CANCEL, USER_ACTION_END, USER_ACTION_HALT, USER_ACTION_START } from './const';\nimport { ItemBuffer } from './ItemBuffer';\nexport function createUserActionLifecycleHandler({ apiMessageBus, transports, config, }) {\n    const actionBuffer = new ItemBuffer();\n    const trackUserActionsExcludeItem = config.trackUserActionsExcludeItem;\n    let message;\n    apiMessageBus.subscribe((msg) => {\n        if (USER_ACTION_START === msg.type || USER_ACTION_HALT === msg.type) {\n            message = msg;\n            return;\n        }\n        if (msg.type === USER_ACTION_END) {\n            const { id, name } = msg;\n            actionBuffer.flushBuffer((item) => {\n                if (isExcludeFromUserAction(item, trackUserActionsExcludeItem)) {\n                    transports.execute(item);\n                    return;\n                }\n                const userActionItem = Object.assign(Object.assign({}, item), { payload: Object.assign(Object.assign({}, item.payload), { action: {\n                            parentId: id,\n                            name,\n                        } }) });\n                transports.execute(userActionItem);\n            });\n            message = undefined;\n            return;\n        }\n        if (msg.type === USER_ACTION_CANCEL) {\n            message = undefined;\n            actionBuffer.flushBuffer((item) => {\n                transports.execute(item);\n            });\n        }\n    });\n    const getMessage = () => message;\n    return { actionBuffer, getMessage };\n}\nfunction isExcludeFromUserAction(item, trackUserActionsExcludeItem) {\n    return ((trackUserActionsExcludeItem === null || trackUserActionsExcludeItem === void 0 ? void 0 : trackUserActionsExcludeItem(item)) ||\n        (item.type === TransportItemType.MEASUREMENT && item.payload.type === 'web-vitals'));\n}\n//# sourceMappingURL=userActionLifecycleHandler.js.map","import { Observable } from '../utils';\nimport { initializeEventsAPI } from './events';\nimport { initializeExceptionsAPI } from './exceptions';\nimport { initializeLogsAPI } from './logs';\nimport { initializeMeasurementsAPI } from './measurements';\nimport { initializeMetaAPI } from './meta';\nimport { initializeTracesAPI } from './traces';\nimport { createUserActionLifecycleHandler } from './userActionLifecycleHandler';\nexport const apiMessageBus = new Observable();\nexport function initializeAPI(unpatchedConsole, internalLogger, config, metas, transports) {\n    internalLogger.debug('Initializing API');\n    const { actionBuffer, getMessage } = createUserActionLifecycleHandler({ apiMessageBus, transports, config });\n    const tracesApi = initializeTracesAPI(unpatchedConsole, internalLogger, config, metas, transports);\n    const props = {\n        unpatchedConsole,\n        internalLogger,\n        config,\n        metas,\n        transports,\n        tracesApi,\n        actionBuffer,\n        getMessage,\n    };\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, tracesApi), initializeExceptionsAPI(props)), initializeMetaAPI(props)), initializeLogsAPI(props)), initializeMeasurementsAPI(props)), initializeEventsAPI(props));\n}\n//# sourceMappingURL=initialize.js.map","export function initializeInstrumentations(unpatchedConsole, internalLogger, config, metas, transports, api) {\n    internalLogger.debug('Initializing instrumentations');\n    const instrumentations = [];\n    const add = (...newInstrumentations) => {\n        internalLogger.debug('Adding instrumentations');\n        newInstrumentations.forEach((newInstrumentation) => {\n            internalLogger.debug(`Adding \"${newInstrumentation.name}\" instrumentation`);\n            const exists = instrumentations.some((existingInstrumentation) => existingInstrumentation.name === newInstrumentation.name);\n            if (exists) {\n                internalLogger.warn(`Instrumentation ${newInstrumentation.name} is already added`);\n                return;\n            }\n            newInstrumentation.unpatchedConsole = unpatchedConsole;\n            newInstrumentation.internalLogger = internalLogger;\n            newInstrumentation.config = config;\n            newInstrumentation.metas = metas;\n            newInstrumentation.transports = transports;\n            newInstrumentation.api = api;\n            instrumentations.push(newInstrumentation);\n            newInstrumentation.initialize();\n        });\n    };\n    const remove = (...instrumentationsToRemove) => {\n        internalLogger.debug('Removing instrumentations');\n        instrumentationsToRemove.forEach((instrumentationToRemove) => {\n            var _a, _b;\n            internalLogger.debug(`Removing \"${instrumentationToRemove.name}\" instrumentation`);\n            const existingInstrumentationIndex = instrumentations.reduce((acc, existingInstrumentation, existingTransportIndex) => {\n                if (acc === null && existingInstrumentation.name === instrumentationToRemove.name) {\n                    return existingTransportIndex;\n                }\n                return null;\n            }, null);\n            if (existingInstrumentationIndex === null) {\n                internalLogger.warn(`Instrumentation \"${instrumentationToRemove.name}\" is not added`);\n                return;\n            }\n            (_b = (_a = instrumentations[existingInstrumentationIndex]).destroy) === null || _b === void 0 ? void 0 : _b.call(_a);\n            instrumentations.splice(existingInstrumentationIndex, 1);\n        });\n    };\n    return {\n        add,\n        get instrumentations() {\n            return [...instrumentations];\n        },\n        remove,\n    };\n}\n//# sourceMappingURL=initialize.js.map","export function registerInitialInstrumentations(faro) {\n    faro.instrumentations.add(...faro.config.instrumentations);\n}\n//# sourceMappingURL=registerInitial.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { noop } from '../utils';\nexport var InternalLoggerLevel;\n(function (InternalLoggerLevel) {\n    InternalLoggerLevel[InternalLoggerLevel[\"OFF\"] = 0] = \"OFF\";\n    InternalLoggerLevel[InternalLoggerLevel[\"ERROR\"] = 1] = \"ERROR\";\n    InternalLoggerLevel[InternalLoggerLevel[\"WARN\"] = 2] = \"WARN\";\n    InternalLoggerLevel[InternalLoggerLevel[\"INFO\"] = 3] = \"INFO\";\n    InternalLoggerLevel[InternalLoggerLevel[\"VERBOSE\"] = 4] = \"VERBOSE\";\n})(InternalLoggerLevel || (InternalLoggerLevel = {}));\nexport const defaultInternalLoggerPrefix = 'Faro';\nexport const defaultInternalLogger = {\n    debug: noop,\n    error: noop,\n    info: noop,\n    prefix: defaultInternalLoggerPrefix,\n    warn: noop,\n};\nexport const defaultInternalLoggerLevel = InternalLoggerLevel.ERROR;\n//# sourceMappingURL=const.js.map","export const defaultUnpatchedConsole = Object.assign({}, console);\n//# sourceMappingURL=const.js.map","import { defaultUnpatchedConsole } from '../unpatchedConsole';\nimport { noop } from '../utils';\nimport { defaultInternalLogger, defaultInternalLoggerLevel, InternalLoggerLevel } from './const';\nexport function createInternalLogger(unpatchedConsole = defaultUnpatchedConsole, internalLoggerLevel = defaultInternalLoggerLevel) {\n    const internalLogger = defaultInternalLogger;\n    if (internalLoggerLevel > InternalLoggerLevel.OFF) {\n        internalLogger.error =\n            internalLoggerLevel >= InternalLoggerLevel.ERROR\n                ? function (...args) {\n                    unpatchedConsole.error(`${internalLogger.prefix}\\n`, ...args);\n                }\n                : noop;\n        internalLogger.warn =\n            internalLoggerLevel >= InternalLoggerLevel.WARN\n                ? function (...args) {\n                    unpatchedConsole.warn(`${internalLogger.prefix}\\n`, ...args);\n                }\n                : noop;\n        internalLogger.info =\n            internalLoggerLevel >= InternalLoggerLevel.INFO\n                ? function (...args) {\n                    unpatchedConsole.info(`${internalLogger.prefix}\\n`, ...args);\n                }\n                : noop;\n        internalLogger.debug =\n            internalLoggerLevel >= InternalLoggerLevel.VERBOSE\n                ? function (...args) {\n                    unpatchedConsole.debug(`${internalLogger.prefix}\\n`, ...args);\n                }\n                : noop;\n    }\n    return internalLogger;\n}\n//# sourceMappingURL=createInternalLogger.js.map","import { defaultInternalLogger } from './const';\nimport { createInternalLogger } from './createInternalLogger';\nexport let internalLogger = defaultInternalLogger;\nexport function initializeInternalLogger(unpatchedConsole, config) {\n    internalLogger = createInternalLogger(unpatchedConsole, config.internalLoggerLevel);\n    return internalLogger;\n}\n//# sourceMappingURL=initialize.js.map","import { isFunction } from '../utils';\nexport function initializeMetas(_unpatchedConsole, internalLogger, _config) {\n    let items = [];\n    let listeners = [];\n    const getValue = () => items.reduce((acc, item) => Object.assign(acc, isFunction(item) ? item() : item), {});\n    const notifyListeners = () => {\n        if (listeners.length) {\n            const value = getValue();\n            listeners.forEach((listener) => listener(value));\n        }\n    };\n    const add = (...newItems) => {\n        internalLogger.debug('Adding metas\\n', newItems);\n        items.push(...newItems);\n        notifyListeners();\n    };\n    const remove = (...itemsToRemove) => {\n        internalLogger.debug('Removing metas\\n', itemsToRemove);\n        items = items.filter((currentItem) => !itemsToRemove.includes(currentItem));\n        notifyListeners();\n    };\n    const addListener = (listener) => {\n        internalLogger.debug('Adding metas listener\\n', listener);\n        listeners.push(listener);\n    };\n    const removeListener = (listener) => {\n        internalLogger.debug('Removing metas listener\\n', listener);\n        listeners = listeners.filter((currentListener) => currentListener !== listener);\n    };\n    return {\n        add,\n        remove,\n        addListener,\n        removeListener,\n        get value() {\n            return getValue();\n        },\n    };\n}\n//# sourceMappingURL=initialize.js.map","import { globalObject } from '../globalObject';\nexport function getBundleId(appName) {\n    return globalObject === null || globalObject === void 0 ? void 0 : globalObject[`__faroBundleId_${appName}`];\n}\n//# sourceMappingURL=sourceMaps.js.map","// auto-generated by bin/genVersion.ts\nexport const VERSION = '1.19.0';\n//# sourceMappingURL=version.js.map","import { getBundleId } from '../utils/sourceMaps';\nimport { VERSION } from '../version';\nexport function registerInitialMetas(faro) {\n    var _a, _b;\n    const initial = {\n        sdk: {\n            version: VERSION,\n        },\n        app: {\n            bundleId: faro.config.app.name && getBundleId(faro.config.app.name),\n        },\n    };\n    const session = (_a = faro.config.sessionTracking) === null || _a === void 0 ? void 0 : _a.session;\n    if (session) {\n        faro.api.setSession(session);\n    }\n    if (faro.config.app) {\n        initial.app = Object.assign(Object.assign({}, faro.config.app), initial.app);\n    }\n    if (faro.config.user) {\n        initial.user = faro.config.user;\n    }\n    if (faro.config.view) {\n        initial.view = faro.config.view;\n    }\n    faro.metas.add(initial, ...((_b = faro.config.metas) !== null && _b !== void 0 ? _b : []));\n}\n//# sourceMappingURL=registerInitial.js.map","const DEFAULT_SEND_TIMEOUT_MS = 250;\nconst DEFAULT_BATCH_ITEM_LIMIT = 50;\nexport class BatchExecutor {\n    constructor(sendFn, options) {\n        var _a, _b;\n        this.signalBuffer = [];\n        this.itemLimit = (_a = options === null || options === void 0 ? void 0 : options.itemLimit) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_ITEM_LIMIT;\n        this.sendTimeout = (_b = options === null || options === void 0 ? void 0 : options.sendTimeout) !== null && _b !== void 0 ? _b : DEFAULT_SEND_TIMEOUT_MS;\n        this.paused = (options === null || options === void 0 ? void 0 : options.paused) || false;\n        this.sendFn = sendFn;\n        this.flushInterval = -1;\n        if (!this.paused) {\n            this.start();\n        }\n        // Send batched/buffered data when user navigates to new page, switches or closes the tab, minimizes or closes the browser.\n        // If on mobile, it also sends data if user switches from the browser to a different app.\n        document.addEventListener('visibilitychange', () => {\n            if (document.visibilityState === 'hidden') {\n                this.flush();\n            }\n        });\n    }\n    addItem(item) {\n        if (this.paused) {\n            return;\n        }\n        this.signalBuffer.push(item);\n        if (this.signalBuffer.length >= this.itemLimit) {\n            this.flush();\n        }\n    }\n    start() {\n        this.paused = false;\n        if (this.sendTimeout > 0) {\n            this.flushInterval = window.setInterval(() => this.flush(), this.sendTimeout);\n        }\n    }\n    pause() {\n        this.paused = true;\n        clearInterval(this.flushInterval);\n    }\n    groupItems(items) {\n        const itemMap = new Map();\n        items.forEach((item) => {\n            const metaKey = JSON.stringify(item.meta);\n            let currentItems = itemMap.get(metaKey);\n            if (currentItems === undefined) {\n                currentItems = [item];\n            }\n            else {\n                currentItems = [...currentItems, item];\n            }\n            itemMap.set(metaKey, currentItems);\n        });\n        return Array.from(itemMap.values());\n    }\n    flush() {\n        if (this.paused || this.signalBuffer.length === 0) {\n            return;\n        }\n        const itemGroups = this.groupItems(this.signalBuffer);\n        itemGroups.forEach(this.sendFn);\n        this.signalBuffer = [];\n    }\n}\n//# sourceMappingURL=batchExecutor.js.map","import { BatchExecutor } from './batchExecutor';\nimport { TransportItemType } from './const';\nexport function initializeTransports(unpatchedConsole, internalLogger, config, metas) {\n    var _a;\n    internalLogger.debug('Initializing transports');\n    const transports = [];\n    let paused = config.paused;\n    let beforeSendHooks = [];\n    const add = (...newTransports) => {\n        internalLogger.debug('Adding transports');\n        newTransports.forEach((newTransport) => {\n            internalLogger.debug(`Adding \"${newTransport.name}\" transport`);\n            const exists = transports.some((existingTransport) => existingTransport === newTransport);\n            if (exists) {\n                internalLogger.warn(`Transport ${newTransport.name} is already added`);\n                return;\n            }\n            newTransport.unpatchedConsole = unpatchedConsole;\n            newTransport.internalLogger = internalLogger;\n            newTransport.config = config;\n            newTransport.metas = metas;\n            transports.push(newTransport);\n        });\n    };\n    const addBeforeSendHooks = (...newBeforeSendHooks) => {\n        internalLogger.debug('Adding beforeSendHooks\\n', beforeSendHooks);\n        newBeforeSendHooks.forEach((beforeSendHook) => {\n            if (beforeSendHook) {\n                beforeSendHooks.push(beforeSendHook);\n            }\n        });\n    };\n    const applyBeforeSendHooks = (items) => {\n        let filteredItems = items;\n        for (const hook of beforeSendHooks) {\n            const modified = filteredItems.map(hook).filter(Boolean);\n            if (modified.length === 0) {\n                return [];\n            }\n            filteredItems = sanitizeItems(modified, config);\n        }\n        return filteredItems;\n    };\n    const batchedSend = (items) => {\n        const filteredItems = applyBeforeSendHooks(items);\n        if (filteredItems.length === 0) {\n            return;\n        }\n        for (const transport of transports) {\n            internalLogger.debug(`Transporting item using ${transport.name}\\n`, filteredItems);\n            if (transport.isBatched()) {\n                transport.send(filteredItems);\n            }\n        }\n    };\n    const instantSend = (item) => {\n        var _a, _b;\n        // prevent all beforeSend hooks being executed twice if batching is enabled.\n        if (((_a = config.batching) === null || _a === void 0 ? void 0 : _a.enabled) && transports.every((transport) => transport.isBatched())) {\n            return;\n        }\n        const [filteredItem] = applyBeforeSendHooks([item]);\n        if (filteredItem === undefined) {\n            return;\n        }\n        for (const transport of transports) {\n            internalLogger.debug(`Transporting item using ${transport.name}\\n`, filteredItem);\n            if (!transport.isBatched()) {\n                transport.send(filteredItem);\n            }\n            else if (!((_b = config.batching) === null || _b === void 0 ? void 0 : _b.enabled)) {\n                transport.send([filteredItem]);\n            }\n        }\n    };\n    let batchExecutor;\n    if ((_a = config.batching) === null || _a === void 0 ? void 0 : _a.enabled) {\n        batchExecutor = new BatchExecutor(batchedSend, {\n            sendTimeout: config.batching.sendTimeout,\n            itemLimit: config.batching.itemLimit,\n            paused,\n        });\n    }\n    // Send a signal to the appropriate transports\n    //\n    // 1. If SDK is paused, early return\n    // 2. If batching is not enabled send the signal to all transports\n    //    instantly.\n    // 3i. If batching is enabled, enqueue the signal\n    // 3ii. Send the signal instantly to all un-batched transports\n    const execute = (item) => {\n        var _a;\n        if (paused) {\n            return;\n        }\n        if ((_a = config.batching) === null || _a === void 0 ? void 0 : _a.enabled) {\n            batchExecutor === null || batchExecutor === void 0 ? void 0 : batchExecutor.addItem(item);\n        }\n        instantSend(item);\n    };\n    const getBeforeSendHooks = () => [...beforeSendHooks];\n    const isPaused = () => paused;\n    const pause = () => {\n        internalLogger.debug('Pausing transports');\n        batchExecutor === null || batchExecutor === void 0 ? void 0 : batchExecutor.pause();\n        paused = true;\n    };\n    const remove = (...transportsToRemove) => {\n        internalLogger.debug('Removing transports');\n        transportsToRemove.forEach((transportToRemove) => {\n            internalLogger.debug(`Removing \"${transportToRemove.name}\" transport`);\n            const existingTransportIndex = transports.indexOf(transportToRemove);\n            if (existingTransportIndex === -1) {\n                internalLogger.warn(`Transport \"${transportToRemove.name}\" is not added`);\n                return;\n            }\n            transports.splice(existingTransportIndex, 1);\n        });\n    };\n    const removeBeforeSendHooks = (...beforeSendHooksToRemove) => {\n        beforeSendHooks.filter((beforeSendHook) => !beforeSendHooksToRemove.includes(beforeSendHook));\n    };\n    const unpause = () => {\n        internalLogger.debug('Unpausing transports');\n        batchExecutor === null || batchExecutor === void 0 ? void 0 : batchExecutor.start();\n        paused = false;\n    };\n    return {\n        add,\n        addBeforeSendHooks,\n        getBeforeSendHooks,\n        execute,\n        isPaused,\n        pause,\n        remove,\n        removeBeforeSendHooks,\n        get transports() {\n            return [...transports];\n        },\n        unpause,\n    };\n}\n/**\n * Removes the `payload.originalError` property from the provided `TransportItem[]` parameter.\n */\nfunction sanitizeItems(filteredItems, config) {\n    if (config.preserveOriginalError) {\n        for (const item of filteredItems) {\n            if (item.type === TransportItemType.EXCEPTION) {\n                delete item.payload.originalError;\n            }\n        }\n    }\n    return filteredItems;\n}\n//# sourceMappingURL=initialize.js.map","export function registerInitialTransports(faro) {\n    faro.transports.add(...faro.config.transports);\n    faro.transports.addBeforeSendHooks(faro.config.beforeSend);\n}\n//# sourceMappingURL=registerInitial.js.map","import { defaultUnpatchedConsole } from './const';\nexport let unpatchedConsole = defaultUnpatchedConsole;\nexport function initializeUnpatchedConsole(config) {\n    var _a;\n    unpatchedConsole = (_a = config.unpatchedConsole) !== null && _a !== void 0 ? _a : unpatchedConsole;\n    return unpatchedConsole;\n}\n//# sourceMappingURL=initialize.js.map","import { initializeAPI } from './api';\nimport { initializeInstrumentations, registerInitialInstrumentations } from './instrumentations';\nimport { initializeInternalLogger } from './internalLogger';\nimport { initializeMetas, registerInitialMetas } from './metas';\nimport { isInternalFaroOnGlobalObject, registerFaro } from './sdk';\nimport { initializeTransports, registerInitialTransports } from './transports';\nimport { initializeUnpatchedConsole } from './unpatchedConsole';\nexport function initializeFaro(config) {\n    const unpatchedConsole = initializeUnpatchedConsole(config);\n    const internalLogger = initializeInternalLogger(unpatchedConsole, config);\n    if (isInternalFaroOnGlobalObject() && !config.isolate) {\n        internalLogger.error('Faro is already registered. Either add instrumentations, transports etc. to the global faro instance or use the \"isolate\" property');\n        return undefined;\n    }\n    internalLogger.debug('Initializing');\n    // Initializing the APIs\n    const metas = initializeMetas(unpatchedConsole, internalLogger, config);\n    const transports = initializeTransports(unpatchedConsole, internalLogger, config, metas);\n    const api = initializeAPI(unpatchedConsole, internalLogger, config, metas, transports);\n    const instrumentations = initializeInstrumentations(unpatchedConsole, internalLogger, config, metas, transports, api);\n    const faro = registerFaro(unpatchedConsole, internalLogger, config, metas, transports, api, instrumentations);\n    // make sure Faro is initialized before registering default metas, instrumentations, transports etc.\n    registerInitialMetas(faro);\n    registerInitialTransports(faro);\n    registerInitialInstrumentations(faro);\n    return faro;\n}\n//# sourceMappingURL=initialize.js.map","export const defaultGlobalObjectKey = 'faro';\nexport const defaultBatchingConfig = {\n    enabled: true,\n    sendTimeout: 250,\n    itemLimit: 50,\n};\n//# sourceMappingURL=const.js.map","export const defaultEventDomain = 'browser';\n//# sourceMappingURL=consts.js.map","export const newLineString = '\\n';\nexport const evalString = 'eval';\nexport const unknownSymbolString = '?';\nexport const atString = '@';\nexport const webkitLineRegex = /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nexport const webkitEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nexport const webkitEvalString = 'eval';\nexport const webkitAddressAtString = 'address at ';\nexport const webkitAddressAtStringLength = webkitAddressAtString.length;\nexport const firefoxLineRegex = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|safari-extension|safari-web-extension|capacitor)?:\\/.*?|\\[native code]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nexport const firefoxEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nexport const firefoxEvalString = ' > eval';\nexport const safariExtensionString = 'safari-extension';\nexport const safariWebExtensionString = 'safari-web-extension';\nexport const reactMinifiedRegex = /Minified React error #\\d+;/i;\n//# sourceMappingURL=const.js.map","import { unknownSymbolString } from './const';\nexport function buildStackFrame(filename, func, lineno, colno) {\n    const stackFrame = {\n        filename: filename || document.location.href,\n        function: func || unknownSymbolString,\n    };\n    if (lineno !== undefined) {\n        stackFrame.lineno = lineno;\n    }\n    if (colno !== undefined) {\n        stackFrame.colno = colno;\n    }\n    return stackFrame;\n}\n//# sourceMappingURL=buildStackFrame.js.map","import { atString, safariExtensionString, safariWebExtensionString } from './const';\nexport function getDataFromSafariExtensions(func, filename) {\n    const isSafariExtension = func === null || func === void 0 ? void 0 : func.includes(safariExtensionString);\n    const isSafariWebExtension = !isSafariExtension && (func === null || func === void 0 ? void 0 : func.includes(safariWebExtensionString));\n    if (!isSafariExtension && !isSafariWebExtension) {\n        return [func, filename];\n    }\n    return [\n        (func === null || func === void 0 ? void 0 : func.includes(atString)) ? func.split(atString)[0] : func,\n        isSafariExtension ? `${safariExtensionString}:${filename}` : `${safariWebExtensionString}:${filename}`,\n    ];\n}\n//# sourceMappingURL=getDataFromSafariExtensions.js.map","import { isNumber } from '@grafana/faro-core';\nimport { buildStackFrame } from './buildStackFrame';\nimport { evalString, firefoxEvalRegex, firefoxEvalString, firefoxLineRegex, newLineString, reactMinifiedRegex, webkitAddressAtString, webkitAddressAtStringLength, webkitEvalRegex, webkitEvalString, webkitLineRegex, } from './const';\nimport { getDataFromSafariExtensions } from './getDataFromSafariExtensions';\nexport function getStackFramesFromError(error) {\n    let lines = [];\n    if (error.stacktrace) {\n        lines = error.stacktrace.split(newLineString).filter((_line, idx) => idx % 2 === 0);\n    }\n    else if (error.stack) {\n        lines = error.stack.split(newLineString);\n    }\n    const stackFrames = lines.reduce((acc, line, idx) => {\n        let parts;\n        let func;\n        let filename;\n        let lineno;\n        let colno;\n        if ((parts = webkitLineRegex.exec(line))) {\n            func = parts[1];\n            filename = parts[2];\n            lineno = parts[3];\n            colno = parts[4];\n            if (filename === null || filename === void 0 ? void 0 : filename.startsWith(webkitEvalString)) {\n                const submatch = webkitEvalRegex.exec(filename);\n                if (submatch) {\n                    filename = submatch[1];\n                    lineno = submatch[2];\n                    colno = submatch[3];\n                }\n            }\n            filename = (filename === null || filename === void 0 ? void 0 : filename.startsWith(webkitAddressAtString))\n                ? filename.substring(webkitAddressAtStringLength)\n                : filename;\n            [func, filename] = getDataFromSafariExtensions(func, filename);\n        }\n        else if ((parts = firefoxLineRegex.exec(line))) {\n            func = parts[1];\n            filename = parts[3];\n            lineno = parts[4];\n            colno = parts[5];\n            if (!!filename && filename.includes(firefoxEvalString)) {\n                const submatch = firefoxEvalRegex.exec(filename);\n                if (submatch) {\n                    func = func || evalString;\n                    filename = submatch[1];\n                    lineno = submatch[2];\n                }\n            }\n            else if (idx === 0 && !colno && isNumber(error.columnNumber)) {\n                colno = String(error.columnNumber + 1);\n            }\n            [func, filename] = getDataFromSafariExtensions(func, filename);\n        }\n        if (filename || func) {\n            acc.push(buildStackFrame(filename, func, lineno ? Number(lineno) : undefined, colno ? Number(colno) : undefined));\n        }\n        return acc;\n    }, []);\n    if (reactMinifiedRegex.test(error.message)) {\n        return stackFrames.slice(1);\n    }\n    return stackFrames;\n}\n//# sourceMappingURL=getStackFramesFromError.js.map","import { getStackFramesFromError } from './getStackFramesFromError';\nexport function parseStacktrace(error) {\n    return {\n        frames: getStackFramesFromError(error),\n    };\n}\n//# sourceMappingURL=parseStacktrace.js.map","export const STORAGE_KEY = 'com.grafana.faro.session';\nexport const SESSION_EXPIRATION_TIME = 4 * 60 * 60 * 1000; // hrs\nexport const SESSION_INACTIVITY_TIME = 15 * 60 * 1000; // minutes\nexport const STORAGE_UPDATE_DELAY = 1 * 1000; // seconds\n/**\n * @deprecated MAX_SESSION_PERSISTENCE_TIME_BUFFER is not used anymore. The constant will be removed in the future\n */\nexport const MAX_SESSION_PERSISTENCE_TIME_BUFFER = 1 * 60 * 1000;\nexport const MAX_SESSION_PERSISTENCE_TIME = SESSION_INACTIVITY_TIME;\nexport const defaultSessionTrackingConfig = {\n    enabled: true,\n    persistent: false,\n    maxSessionPersistenceTime: MAX_SESSION_PERSISTENCE_TIME,\n};\n//# sourceMappingURL=sessionConstants.js.map","export const MESSAGE_TYPE_RESOURCE_ENTRY = 'resource-entry';\nexport const MESSAGE_TYPE_HTTP_REQUEST_START = 'http-request-start';\nexport const MESSAGE_TYPE_HTTP_REQUEST_END = 'http-request-end';\nexport const MESSAGE_TYPE_DOM_MUTATION = 'dom-mutation';\nexport const userActionDataAttributeParsed = 'faroUserActionName';\nexport const userActionDataAttribute = 'data-faro-user-action-name';\nexport const userActionStartByApiCallEventName = 'faroApiCall';\n//# sourceMappingURL=const.js.map","export const unknownString = 'unknown';\n//# sourceMappingURL=consts.js.map","import { UAParser } from 'ua-parser-js';\nimport { unknownString } from '@grafana/faro-core';\nexport const browserMeta = () => {\n    const parser = new UAParser();\n    const { name, version } = parser.getBrowser();\n    const { name: osName, version: osVersion } = parser.getOS();\n    const userAgent = parser.getUA();\n    const language = navigator.language;\n    const mobile = navigator.userAgent.includes('Mobi');\n    const brands = getBrands();\n    return {\n        browser: {\n            name: name !== null && name !== void 0 ? name : unknownString,\n            version: version !== null && version !== void 0 ? version : unknownString,\n            os: `${osName !== null && osName !== void 0 ? osName : unknownString} ${osVersion !== null && osVersion !== void 0 ? osVersion : unknownString}`,\n            userAgent: userAgent !== null && userAgent !== void 0 ? userAgent : unknownString,\n            language: language !== null && language !== void 0 ? language : unknownString,\n            mobile,\n            brands: brands !== null && brands !== void 0 ? brands : unknownString,\n            viewportWidth: `${window.innerWidth}`,\n            viewportHeight: `${window.innerHeight}`,\n        },\n    };\n    function getBrands() {\n        if (!name || !version) {\n            return undefined;\n        }\n        if ('userAgentData' in navigator && navigator.userAgentData) {\n            // userAgentData in experimental (only Chrome supports it) thus TS does not ship the respective type declarations\n            return navigator.userAgentData.brands;\n        }\n        return undefined;\n    }\n};\n//# sourceMappingURL=meta.js.map","export const k6Meta = () => {\n    const k6Properties = window.k6;\n    return {\n        k6: Object.assign({ \n            // we only add the k6 meta if Faro is running inside a k6 environment, so this is always true\n            isK6Browser: true }, ((k6Properties === null || k6Properties === void 0 ? void 0 : k6Properties.testRunId) && { testRunId: k6Properties === null || k6Properties === void 0 ? void 0 : k6Properties.testRunId })),\n    };\n};\n//# sourceMappingURL=meta.js.map","import { isFunction } from '@grafana/faro-core';\nlet currentHref;\nlet pageId;\nexport function createPageMeta({ generatePageId, initialPageMeta } = {}) {\n    const pageMeta = () => {\n        const locationHref = location.href;\n        if (isFunction(generatePageId) && currentHref !== locationHref) {\n            currentHref = locationHref;\n            pageId = generatePageId(location);\n        }\n        return {\n            page: Object.assign(Object.assign({ url: locationHref }, (pageId ? { id: pageId } : {})), initialPageMeta),\n        };\n    };\n    return pageMeta;\n}\n//# sourceMappingURL=meta.js.map","import { defaultInternalLogger } from '../internalLogger';\nimport { defaultUnpatchedConsole } from '../unpatchedConsole';\nexport class BaseExtension {\n    constructor() {\n        this.unpatchedConsole = defaultUnpatchedConsole;\n        this.internalLogger = defaultInternalLogger;\n        this.config = {};\n        this.metas = {};\n    }\n    logDebug(...args) {\n        this.internalLogger.debug(`${this.name}\\n`, ...args);\n    }\n    logInfo(...args) {\n        this.internalLogger.info(`${this.name}\\n`, ...args);\n    }\n    logWarn(...args) {\n        this.internalLogger.warn(`${this.name}\\n`, ...args);\n    }\n    logError(...args) {\n        this.internalLogger.error(`${this.name}\\n`, ...args);\n    }\n}\n//# sourceMappingURL=baseExtension.js.map","import { BaseExtension } from '../extensions';\nexport class BaseTransport extends BaseExtension {\n    isBatched() {\n        return false;\n    }\n    getIgnoreUrls() {\n        return [];\n    }\n}\n//# sourceMappingURL=base.js.map","export function createPromiseBuffer(options) {\n    const { size, concurrency } = options;\n    const buffer = []; // pending, not-yet-started tasks\n    let inProgress = 0; // counter for tasks currently in progress\n    const work = () => {\n        // if there's space for a task and buffer is not empty,\n        // take one task from buffer and run it\n        if (inProgress < concurrency && buffer.length) {\n            const { producer, resolve, reject } = buffer.shift();\n            inProgress++;\n            producer().then((result) => {\n                inProgress--;\n                work();\n                resolve(result);\n            }, (reason) => {\n                inProgress--;\n                work();\n                reject(reason);\n            });\n        }\n    };\n    const add = (promiseProducer) => {\n        if (buffer.length + inProgress >= size) {\n            throw new Error('Task buffer full');\n        }\n        return new Promise((resolve, reject) => {\n            buffer.push({\n                producer: promiseProducer,\n                resolve,\n                reject,\n            });\n            work();\n        });\n    };\n    return {\n        add,\n    };\n}\n//# sourceMappingURL=promiseBuffer.js.map","import { TransportItemType, transportItemTypeToBodyKey } from './const';\nexport function mergeResourceSpans(traces, resourceSpans) {\n    var _a, _b;\n    if (resourceSpans === undefined) {\n        return traces;\n    }\n    if (traces === undefined) {\n        return {\n            resourceSpans,\n        };\n    }\n    const currentResource = (_a = traces.resourceSpans) === null || _a === void 0 ? void 0 : _a[0];\n    if (currentResource === undefined) {\n        return traces;\n    }\n    const currentSpans = (currentResource === null || currentResource === void 0 ? void 0 : currentResource.scopeSpans) || [];\n    const newSpans = ((_b = resourceSpans === null || resourceSpans === void 0 ? void 0 : resourceSpans[0]) === null || _b === void 0 ? void 0 : _b.scopeSpans) || [];\n    return Object.assign(Object.assign({}, traces), { resourceSpans: [\n            Object.assign(Object.assign({}, currentResource), { scopeSpans: [...currentSpans, ...newSpans] }),\n        ] });\n}\nexport function getTransportBody(item) {\n    let body = {\n        meta: {},\n    };\n    if (item[0] !== undefined) {\n        body.meta = item[0].meta;\n    }\n    item.forEach((currentItem) => {\n        switch (currentItem.type) {\n            case TransportItemType.LOG:\n            case TransportItemType.EVENT:\n            case TransportItemType.EXCEPTION:\n            case TransportItemType.MEASUREMENT:\n                const bk = transportItemTypeToBodyKey[currentItem.type];\n                const signals = body[bk];\n                body = Object.assign(Object.assign({}, body), { [bk]: signals === undefined ? [currentItem.payload] : [...signals, currentItem.payload] });\n                break;\n            case TransportItemType.TRACE:\n                body = Object.assign(Object.assign({}, body), { traces: mergeResourceSpans(body.traces, currentItem.payload.resourceSpans) });\n                break;\n        }\n    });\n    return body;\n}\n//# sourceMappingURL=utils.js.map","/**\n * Tail based throttle which caches the args of the last call and updates\n */\nexport function throttle(callback, delay) {\n    let pause = false;\n    let lastPending;\n    const timeoutBehavior = () => {\n        if (lastPending == null) {\n            pause = false;\n            return;\n        }\n        callback(...lastPending);\n        lastPending = null;\n        setTimeout(timeoutBehavior, delay);\n    };\n    return (...args) => {\n        if (pause) {\n            lastPending = args;\n            return;\n        }\n        callback(...args);\n        pause = true;\n        setTimeout(timeoutBehavior, delay);\n    };\n}\n//# sourceMappingURL=throttle.js.map","import { faro } from '@grafana/faro-core';\nexport const webStorageType = {\n    session: 'sessionStorage',\n    local: 'localStorage',\n};\n/**\n * Check if selected web storage mechanism is available.\n * @param type storage mechanism to test availability for.\n * @returns\n */\nexport function isWebStorageAvailable(type) {\n    var _a;\n    try {\n        let storage;\n        storage = window[type];\n        const testItem = '__faro_storage_test__';\n        storage.setItem(testItem, testItem);\n        storage.removeItem(testItem);\n        return true;\n    }\n    catch (error) {\n        // the above can throw\n        (_a = faro.internalLogger) === null || _a === void 0 ? void 0 : _a.info(`Web storage of type ${type} is not available. Reason: ${error}`);\n        return false;\n    }\n}\n/**\n * Get item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function getItem(key, webStorageMechanism) {\n    if (isWebStorageTypeAvailable(webStorageMechanism)) {\n        return window[webStorageMechanism].getItem(key);\n    }\n    return null;\n}\n/**\n * Store item in SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param value: the item data.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function setItem(key, value, webStorageMechanism) {\n    if (isWebStorageTypeAvailable(webStorageMechanism)) {\n        try {\n            window[webStorageMechanism].setItem(key, value);\n        }\n        catch (error) {\n            // do nothing\n        }\n    }\n}\n/**\n * Remove item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function removeItem(key, webStorageMechanism) {\n    if (isWebStorageTypeAvailable(webStorageMechanism)) {\n        window[webStorageMechanism].removeItem(key);\n    }\n}\nexport const isLocalStorageAvailable = isWebStorageAvailable(webStorageType.local);\nexport const isSessionStorageAvailable = isWebStorageAvailable(webStorageType.session);\nfunction isWebStorageTypeAvailable(webStorageMechanism) {\n    if (webStorageMechanism === webStorageType.local) {\n        return isLocalStorageAvailable;\n    }\n    if (webStorageMechanism === webStorageType.session) {\n        return isSessionStorageAvailable;\n    }\n    return false;\n}\n//# sourceMappingURL=webStorage.js.map","const alphabet = 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ0123456789';\nexport function genShortID(length = 10) {\n    return Array.from(Array(length))\n        .map(() => alphabet[Math.floor(Math.random() * alphabet.length)])\n        .join('');\n}\n//# sourceMappingURL=shortId.js.map","/**\n * @deprecated The conventions object will be removed in a future version\n */\nexport const Conventions = {\n    /**\n     * @deprecated The event names object will be removed in a future version\n     */\n    EventNames: {\n        CLICK: 'click',\n        NAVIGATION: 'navigation',\n        SESSION_START: 'session_start',\n        VIEW_CHANGED: 'view_changed',\n    },\n};\nexport const EVENT_CLICK = 'click';\nexport const EVENT_NAVIGATION = 'navigation';\nexport const EVENT_VIEW_CHANGED = 'view_changed';\nexport const EVENT_SESSION_START = 'session_start';\nexport const EVENT_SESSION_RESUME = 'session_resume';\nexport const EVENT_SESSION_EXTEND = 'session_extend';\nexport const EVENT_OVERRIDES_SERVICE_NAME = 'service_name_override';\nexport const EVENT_ROUTE_CHANGE = 'route_change';\n//# sourceMappingURL=semantic.js.map","import { faro } from '@grafana/faro-core';\nexport function isSampled() {\n    var _a, _b, _c;\n    const sendAllSignals = 1;\n    const sessionTracking = faro.config.sessionTracking;\n    let samplingRate = (_c = (_b = (_a = sessionTracking === null || sessionTracking === void 0 ? void 0 : sessionTracking.sampler) === null || _a === void 0 ? void 0 : _a.call(sessionTracking, { metas: faro.metas.value })) !== null && _b !== void 0 ? _b : sessionTracking === null || sessionTracking === void 0 ? void 0 : sessionTracking.samplingRate) !== null && _c !== void 0 ? _c : sendAllSignals;\n    if (typeof samplingRate !== 'number') {\n        const sendNoSignals = 0;\n        samplingRate = sendNoSignals;\n    }\n    return Math.random() < samplingRate;\n}\n//# sourceMappingURL=sampling.js.map","import { dateNow, deepEqual, EVENT_OVERRIDES_SERVICE_NAME, faro, genShortID, isEmpty } from '@grafana/faro-core';\nimport { isLocalStorageAvailable, isSessionStorageAvailable } from '../../../utils';\nimport { isSampled } from './sampling';\nimport { SESSION_EXPIRATION_TIME, SESSION_INACTIVITY_TIME } from './sessionConstants';\nexport function createUserSessionObject({ sessionId, started, lastActivity, isSampled = true, } = {}) {\n    var _a, _b;\n    const now = dateNow();\n    const generateSessionId = (_b = (_a = faro.config) === null || _a === void 0 ? void 0 : _a.sessionTracking) === null || _b === void 0 ? void 0 : _b.generateSessionId;\n    if (sessionId == null) {\n        sessionId = typeof generateSessionId === 'function' ? generateSessionId() : genShortID();\n    }\n    return {\n        sessionId,\n        lastActivity: lastActivity !== null && lastActivity !== void 0 ? lastActivity : now,\n        started: started !== null && started !== void 0 ? started : now,\n        isSampled: isSampled,\n    };\n}\nexport function isUserSessionValid(session) {\n    if (session == null) {\n        return false;\n    }\n    const now = dateNow();\n    const lifetimeValid = now - session.started < SESSION_EXPIRATION_TIME;\n    if (!lifetimeValid) {\n        return false;\n    }\n    const inactivityPeriodValid = now - session.lastActivity < SESSION_INACTIVITY_TIME;\n    return inactivityPeriodValid;\n}\nexport function getUserSessionUpdater({ fetchUserSession, storeUserSession, }) {\n    return function updateSession({ forceSessionExtend } = { forceSessionExtend: false }) {\n        var _a, _b, _c;\n        if (!fetchUserSession || !storeUserSession) {\n            return;\n        }\n        const sessionTrackingConfig = faro.config.sessionTracking;\n        const isPersistentSessions = sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.persistent;\n        if ((isPersistentSessions && !isLocalStorageAvailable) || (!isPersistentSessions && !isSessionStorageAvailable)) {\n            return;\n        }\n        const sessionFromStorage = fetchUserSession();\n        if (forceSessionExtend === false && isUserSessionValid(sessionFromStorage)) {\n            storeUserSession(Object.assign(Object.assign({}, sessionFromStorage), { lastActivity: dateNow() }));\n        }\n        else {\n            let newSession = addSessionMetadataToNextSession(createUserSessionObject({ isSampled: isSampled() }), sessionFromStorage);\n            storeUserSession(newSession);\n            (_a = faro.api) === null || _a === void 0 ? void 0 : _a.setSession(newSession.sessionMeta);\n            (_b = sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.onSessionChange) === null || _b === void 0 ? void 0 : _b.call(sessionTrackingConfig, (_c = sessionFromStorage === null || sessionFromStorage === void 0 ? void 0 : sessionFromStorage.sessionMeta) !== null && _c !== void 0 ? _c : null, newSession.sessionMeta);\n        }\n    };\n}\nexport function addSessionMetadataToNextSession(newSession, previousSession) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const sessionWithMeta = Object.assign(Object.assign({}, newSession), { sessionMeta: {\n            id: newSession.sessionId,\n            attributes: Object.assign(Object.assign(Object.assign({}, (_b = (_a = faro.config.sessionTracking) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.attributes), ((_d = (_c = faro.metas.value.session) === null || _c === void 0 ? void 0 : _c.attributes) !== null && _d !== void 0 ? _d : {})), { isSampled: newSession.isSampled.toString() }),\n        } });\n    const overrides = (_f = (_e = faro.metas.value.session) === null || _e === void 0 ? void 0 : _e.overrides) !== null && _f !== void 0 ? _f : (_g = previousSession === null || previousSession === void 0 ? void 0 : previousSession.sessionMeta) === null || _g === void 0 ? void 0 : _g.overrides;\n    if (!isEmpty(overrides)) {\n        sessionWithMeta.sessionMeta.overrides = overrides;\n    }\n    const previousSessionId = previousSession === null || previousSession === void 0 ? void 0 : previousSession.sessionId;\n    if (previousSessionId != null) {\n        sessionWithMeta.sessionMeta.attributes['previousSession'] = previousSessionId;\n    }\n    return sessionWithMeta;\n}\nexport function getSessionMetaUpdateHandler({ fetchUserSession, storeUserSession, }) {\n    return function syncSessionIfChangedExternally(meta) {\n        const session = meta.session;\n        const sessionFromSessionStorage = fetchUserSession();\n        let sessionId = session === null || session === void 0 ? void 0 : session.id;\n        const sessionAttributes = session === null || session === void 0 ? void 0 : session.attributes;\n        const sessionOverrides = session === null || session === void 0 ? void 0 : session.overrides;\n        const storedSessionMeta = sessionFromSessionStorage === null || sessionFromSessionStorage === void 0 ? void 0 : sessionFromSessionStorage.sessionMeta;\n        const storedSessionMetaOverrides = storedSessionMeta === null || storedSessionMeta === void 0 ? void 0 : storedSessionMeta.overrides;\n        const hasSessionOverridesChanged = !!sessionOverrides && !deepEqual(sessionOverrides, storedSessionMetaOverrides);\n        const hasAttributesChanged = !!sessionAttributes && !deepEqual(sessionAttributes, storedSessionMeta === null || storedSessionMeta === void 0 ? void 0 : storedSessionMeta.attributes);\n        const hasSessionIdChanged = !!session && sessionId !== (sessionFromSessionStorage === null || sessionFromSessionStorage === void 0 ? void 0 : sessionFromSessionStorage.sessionId);\n        if (hasSessionIdChanged || hasAttributesChanged || hasSessionOverridesChanged) {\n            const userSession = addSessionMetadataToNextSession(createUserSessionObject({ sessionId, isSampled: isSampled() }), sessionFromSessionStorage);\n            storeUserSession(userSession);\n            sendOverrideEvent(hasSessionOverridesChanged, sessionOverrides, storedSessionMetaOverrides);\n            faro.api.setSession(userSession.sessionMeta);\n        }\n    };\n}\nfunction sendOverrideEvent(hasSessionOverridesChanged, sessionOverrides = {}, storedSessionOverrides = {}) {\n    var _a, _b, _c;\n    if (!hasSessionOverridesChanged) {\n        return;\n    }\n    const serviceName = sessionOverrides.serviceName;\n    const previousServiceName = (_c = (_a = storedSessionOverrides.serviceName) !== null && _a !== void 0 ? _a : (_b = faro.metas.value.app) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n    if (serviceName && serviceName !== previousServiceName) {\n        faro.api.pushEvent(EVENT_OVERRIDES_SERVICE_NAME, {\n            serviceName,\n            previousServiceName,\n        });\n    }\n}\n//# sourceMappingURL=sessionManagerUtils.js.map","import { faro, stringifyExternalJson } from '@grafana/faro-core';\nimport { throttle } from '../../../utils';\nimport { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';\nimport { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';\nimport { getSessionMetaUpdateHandler, getUserSessionUpdater } from './sessionManagerUtils';\nexport class PersistentSessionsManager {\n    constructor() {\n        this.updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);\n        this.updateUserSession = getUserSessionUpdater({\n            fetchUserSession: PersistentSessionsManager.fetchUserSession,\n            storeUserSession: PersistentSessionsManager.storeUserSession,\n        });\n        this.init();\n    }\n    static removeUserSession() {\n        removeItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n    }\n    static storeUserSession(session) {\n        setItem(STORAGE_KEY, stringifyExternalJson(session), PersistentSessionsManager.storageTypeLocal);\n    }\n    static fetchUserSession() {\n        const storedSession = getItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n        if (storedSession) {\n            return JSON.parse(storedSession);\n        }\n        return null;\n    }\n    init() {\n        document.addEventListener('visibilitychange', () => {\n            if (document.visibilityState === 'visible') {\n                this.updateSession();\n            }\n        });\n        // Users can call the setSession() method, so we need to sync this with the local storage session\n        faro.metas.addListener(getSessionMetaUpdateHandler({\n            fetchUserSession: PersistentSessionsManager.fetchUserSession,\n            storeUserSession: PersistentSessionsManager.storeUserSession,\n        }));\n    }\n}\nPersistentSessionsManager.storageTypeLocal = webStorageType.local;\n//# sourceMappingURL=PersistentSessionsManager.js.map","import { faro, stringifyExternalJson } from '@grafana/faro-core';\nimport { throttle } from '../../../utils';\nimport { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';\nimport { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';\nimport { getSessionMetaUpdateHandler, getUserSessionUpdater } from './sessionManagerUtils';\nexport class VolatileSessionsManager {\n    constructor() {\n        this.updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);\n        this.updateUserSession = getUserSessionUpdater({\n            fetchUserSession: VolatileSessionsManager.fetchUserSession,\n            storeUserSession: VolatileSessionsManager.storeUserSession,\n        });\n        this.init();\n    }\n    static removeUserSession() {\n        removeItem(STORAGE_KEY, VolatileSessionsManager.storageTypeSession);\n    }\n    static storeUserSession(session) {\n        setItem(STORAGE_KEY, stringifyExternalJson(session), VolatileSessionsManager.storageTypeSession);\n    }\n    static fetchUserSession() {\n        const storedSession = getItem(STORAGE_KEY, VolatileSessionsManager.storageTypeSession);\n        if (storedSession) {\n            return JSON.parse(storedSession);\n        }\n        return null;\n    }\n    init() {\n        document.addEventListener('visibilitychange', () => {\n            if (document.visibilityState === 'visible') {\n                this.updateSession();\n            }\n        });\n        // Users can call the setSession() method, so we need to sync this with the local storage session\n        faro.metas.addListener(getSessionMetaUpdateHandler({\n            fetchUserSession: VolatileSessionsManager.fetchUserSession,\n            storeUserSession: VolatileSessionsManager.storeUserSession,\n        }));\n    }\n}\nVolatileSessionsManager.storageTypeSession = webStorageType.session;\n//# sourceMappingURL=VolatileSessionManager.js.map","import { PersistentSessionsManager } from './PersistentSessionsManager';\nimport { VolatileSessionsManager } from './VolatileSessionManager';\nexport function getSessionManagerByConfig(sessionTrackingConfig) {\n    return (sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.persistent) ? PersistentSessionsManager : VolatileSessionsManager;\n}\n//# sourceMappingURL=getSessionManagerByConfig.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { BaseExtension, BaseTransport, createPromiseBuffer, getTransportBody, noop, VERSION } from '@grafana/faro-core';\nimport { getSessionManagerByConfig } from '../../instrumentations/session/sessionManager';\nimport { getUserSessionUpdater } from '../../instrumentations/session/sessionManager/sessionManagerUtils';\nconst DEFAULT_BUFFER_SIZE = 30;\nconst DEFAULT_CONCURRENCY = 5; // chrome supports 10 total, firefox 17\nconst DEFAULT_RATE_LIMIT_BACKOFF_MS = 5000;\nconst BEACON_BODY_SIZE_LIMIT = 60000;\nconst TOO_MANY_REQUESTS = 429;\nconst ACCEPTED = 202;\nexport class FetchTransport extends BaseTransport {\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this.options = options;\n        this.name = '@grafana/faro-web-sdk:transport-fetch';\n        this.version = VERSION;\n        this.disabledUntil = new Date();\n        this.rateLimitBackoffMs = (_a = options.defaultRateLimitBackoffMs) !== null && _a !== void 0 ? _a : DEFAULT_RATE_LIMIT_BACKOFF_MS;\n        this.getNow = (_b = options.getNow) !== null && _b !== void 0 ? _b : (() => Date.now());\n        this.promiseBuffer = createPromiseBuffer({\n            size: (_c = options.bufferSize) !== null && _c !== void 0 ? _c : DEFAULT_BUFFER_SIZE,\n            concurrency: (_d = options.concurrency) !== null && _d !== void 0 ? _d : DEFAULT_CONCURRENCY,\n        });\n    }\n    send(items) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.disabledUntil > new Date(this.getNow())) {\n                    this.logWarn(`Dropping transport item due to too many requests. Backoff until ${this.disabledUntil}`);\n                    return Promise.resolve();\n                }\n                yield this.promiseBuffer.add(() => {\n                    const body = JSON.stringify(getTransportBody(items));\n                    const { url, requestOptions, apiKey } = this.options;\n                    const _a = requestOptions !== null && requestOptions !== void 0 ? requestOptions : {}, { headers } = _a, restOfRequestOptions = __rest(_a, [\"headers\"]);\n                    let sessionId;\n                    const sessionMeta = this.metas.value.session;\n                    if (sessionMeta != null) {\n                        sessionId = sessionMeta.id;\n                    }\n                    return fetch(url, Object.assign({ method: 'POST', headers: Object.assign(Object.assign(Object.assign({ 'Content-Type': 'application/json' }, (headers !== null && headers !== void 0 ? headers : {})), (apiKey ? { 'x-api-key': apiKey } : {})), (sessionId ? { 'x-faro-session-id': sessionId } : {})), body, keepalive: body.length <= BEACON_BODY_SIZE_LIMIT }, (restOfRequestOptions !== null && restOfRequestOptions !== void 0 ? restOfRequestOptions : {})))\n                        .then((response) => __awaiter(this, void 0, void 0, function* () {\n                        if (response.status === ACCEPTED) {\n                            const sessionExpired = response.headers.get('X-Faro-Session-Status') === 'invalid';\n                            if (sessionExpired) {\n                                this.extendFaroSession(this.config, this.logDebug);\n                            }\n                        }\n                        if (response.status === TOO_MANY_REQUESTS) {\n                            this.disabledUntil = this.getRetryAfterDate(response);\n                            this.logWarn(`Too many requests, backing off until ${this.disabledUntil}`);\n                        }\n                        // read the body so the connection can be closed\n                        response.text().catch(noop);\n                        return response;\n                    }))\n                        .catch((err) => {\n                        this.logError('Failed sending payload to the receiver\\n', JSON.parse(body), err);\n                    });\n                });\n            }\n            catch (err) {\n                this.logError(err);\n            }\n        });\n    }\n    getIgnoreUrls() {\n        var _a;\n        return [this.options.url].concat((_a = this.config.ignoreUrls) !== null && _a !== void 0 ? _a : []);\n    }\n    isBatched() {\n        return true;\n    }\n    getRetryAfterDate(response) {\n        const now = this.getNow();\n        const retryAfterHeader = response.headers.get('Retry-After');\n        if (retryAfterHeader) {\n            const delay = Number(retryAfterHeader);\n            if (!isNaN(delay)) {\n                return new Date(delay * 1000 + now);\n            }\n            const date = Date.parse(retryAfterHeader);\n            if (!isNaN(date)) {\n                return new Date(date);\n            }\n        }\n        return new Date(now + this.rateLimitBackoffMs);\n    }\n    extendFaroSession(config, logDebug) {\n        const SessionExpiredString = `Session expired`;\n        const sessionTrackingConfig = config.sessionTracking;\n        if (sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.enabled) {\n            const { fetchUserSession, storeUserSession } = getSessionManagerByConfig(sessionTrackingConfig);\n            getUserSessionUpdater({ fetchUserSession, storeUserSession })({ forceSessionExtend: true });\n            logDebug(`${SessionExpiredString} created new session.`);\n        }\n        else {\n            logDebug(`${SessionExpiredString}.`);\n        }\n    }\n}\n//# sourceMappingURL=transport.js.map","import { BaseExtension } from '../extensions';\nexport class BaseInstrumentation extends BaseExtension {\n    constructor() {\n        super(...arguments);\n        this.api = {};\n        this.transports = {};\n    }\n}\n//# sourceMappingURL=base.js.map","import { Observable } from '@grafana/faro-core';\nimport { MESSAGE_TYPE_DOM_MUTATION } from './const';\nexport function monitorDomMutations() {\n    const observable = new Observable();\n    const observer = new MutationObserver((_mutationsList, _observer) => {\n        observable.notify({ type: MESSAGE_TYPE_DOM_MUTATION });\n    });\n    observer.observe(document, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n    });\n    return observable;\n}\n//# sourceMappingURL=domMutationMonitor.js.map","import { faro, isEmpty, isFunction, isString } from '@grafana/faro-core';\n/**\n * Retrieves a list of URLs to be ignored by aggregating the ignore URLs from all transports.\n *\n * @returns {string[]} An array of URLs to be ignored.\n */\nexport function getIgnoreUrls() {\n    return faro.transports.transports.flatMap((transport) => transport.getIgnoreUrls());\n}\n/**\n * Checks if the given URL should be ignored based on a list of ignored URLs.\n *\n * @param url - The URL to check.\n * @returns `true` if the URL is in the list of ignored URLs, `false` otherwise.\n */\nexport function isUrlIgnored(url = '') {\n    return getIgnoreUrls().some((ignoredUrl) => url && url.match(ignoredUrl) != null);\n}\n/**\n * Extracts a URL string from the given resource.\n *\n * @param resource - The input resource which can be a string, a URL object, or an object with a `toString` method.\n * @returns The URL as a string if the resource is a valid URL-like object, or `undefined` if the resource is not valid.\n *\n */\nexport function getUrlFromResource(resource) {\n    if (isString(resource)) {\n        return resource;\n    }\n    if (resource instanceof URL) {\n        return resource.href;\n    }\n    if (!isEmpty(resource) && isFunction(resource === null || resource === void 0 ? void 0 : resource.toString)) {\n        return resource.toString();\n    }\n    return undefined;\n}\n//# sourceMappingURL=url.js.map","import { genShortID, Observable } from '@grafana/faro-core';\nimport { getUrlFromResource, isUrlIgnored } from '../../utils/url';\nimport { MESSAGE_TYPE_HTTP_REQUEST_END, MESSAGE_TYPE_HTTP_REQUEST_START } from './const';\nconst apiTypeFetch = 'fetch';\nconst apiTypeXhr = 'xhr';\n/**\n * Monitors if any http requests are in progress.\n */\nexport function monitorHttpRequests() {\n    const observable = new Observable();\n    function emitStartMessage(requestProps) {\n        observable.notify({\n            type: MESSAGE_TYPE_HTTP_REQUEST_START,\n            request: requestProps,\n        });\n    }\n    function emitEndMessage(requestProps) {\n        observable.notify({\n            type: MESSAGE_TYPE_HTTP_REQUEST_END,\n            request: requestProps,\n        });\n    }\n    monitorFetch({\n        onRequestStart: emitStartMessage,\n        onRequestEnd: emitEndMessage,\n    });\n    monitorXhr({\n        onRequestStart: emitStartMessage,\n        onRequestEnd: emitEndMessage,\n    });\n    return observable;\n}\nfunction monitorXhr({ onRequestStart, onRequestEnd, }) {\n    const originalOpen = XMLHttpRequest.prototype.open;\n    XMLHttpRequest.prototype.open = function () {\n        const url = arguments[1];\n        const isIgnoredUrl = isUrlIgnored(url);\n        const method = arguments[0];\n        const requestId = genShortID();\n        // request has started to load data.\n        this.addEventListener('loadstart', function () {\n            if (!isIgnoredUrl) {\n                onRequestStart({ url, method, requestId, apiType: apiTypeXhr });\n            }\n        });\n        // transaction completes successfully.\n        this.addEventListener('load', function () {\n            if (!isIgnoredUrl) {\n                onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n            }\n        });\n        this.addEventListener('error', function () {\n            if (!isIgnoredUrl) {\n                onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n            }\n        });\n        this.addEventListener('abort', function () {\n            if (!isIgnoredUrl) {\n                onRequestEnd({ url, method, requestId, apiType: apiTypeXhr });\n            }\n        });\n        originalOpen.apply(this, arguments);\n    };\n}\nfunction monitorFetch({ onRequestEnd, onRequestStart, }) {\n    const originalFetch = window.fetch;\n    window.fetch = function () {\n        var _a, _b;\n        const url = (_a = getUrlFromResource(arguments[0])) !== null && _a !== void 0 ? _a : '';\n        const isIgnoredUrl = isUrlIgnored(url);\n        const method = ((_b = arguments[1]) !== null && _b !== void 0 ? _b : {}).method;\n        const requestId = genShortID();\n        if (!isIgnoredUrl) {\n            onRequestStart({ url, method, requestId, apiType: apiTypeFetch });\n        }\n        return originalFetch\n            .apply(this, arguments)\n            .then((response) => {\n            if (!isIgnoredUrl) {\n                onRequestEnd({ url, method, requestId, apiType: apiTypeFetch });\n            }\n            return response;\n        })\n            .catch((error) => {\n            if (!isIgnoredUrl) {\n                onRequestEnd({ url, method, requestId, apiType: apiTypeFetch });\n            }\n            throw error;\n        });\n    };\n}\n//# sourceMappingURL=httpRequestMonitor.js.map","export const NAVIGATION_ID_STORAGE_KEY = 'com.grafana.faro.lastNavigationId';\n//# sourceMappingURL=instrumentationConstants.js.map","export const NAVIGATION_ENTRY = 'navigation';\nexport const RESOURCE_ENTRY = 'resource';\n//# sourceMappingURL=performanceConstants.js.map","import { isArray, unknownString } from '@grafana/faro-core';\nconst w3cTraceparentFormat = /^00-[a-f0-9]{32}-[a-f0-9]{16}-[0-9]{1,2}$/;\n// Extract traceparent from serverTiming, if present\nexport function getSpanContextFromServerTiming(serverTimings = []) {\n    for (const serverEntry of serverTimings) {\n        if (serverEntry.name === 'traceparent') {\n            if (!w3cTraceparentFormat.test(serverEntry.description)) {\n                continue;\n            }\n            const [, traceId, spanId] = serverEntry.description.split('-');\n            if (traceId != null && spanId != null) {\n                return { traceId, spanId };\n            }\n            break;\n        }\n    }\n    return undefined;\n}\nexport function performanceObserverSupported() {\n    return 'PerformanceObserver' in window;\n}\nexport function onDocumentReady(handleReady) {\n    if (document.readyState === 'complete') {\n        handleReady();\n    }\n    else {\n        const readyStateCompleteHandler = () => {\n            if (document.readyState === 'complete') {\n                handleReady();\n                document.removeEventListener('readystatechange', readyStateCompleteHandler);\n            }\n        };\n        document.addEventListener('readystatechange', readyStateCompleteHandler);\n    }\n}\nexport function includePerformanceEntry(performanceEntryJSON, allowProps = {}) {\n    for (const [allowPropKey, allowPropValue] of Object.entries(allowProps)) {\n        const perfEntryPropVal = performanceEntryJSON[allowPropKey];\n        if (perfEntryPropVal == null) {\n            return false;\n        }\n        if (isArray(allowPropValue)) {\n            return allowPropValue.includes(perfEntryPropVal);\n        }\n        return perfEntryPropVal === allowPropValue;\n    }\n    // empty object allows all\n    return true;\n}\nexport function createFaroResourceTiming(resourceEntryRaw) {\n    const { connectEnd, connectStart, decodedBodySize, domainLookupEnd, domainLookupStart, duration, encodedBodySize, fetchStart, initiatorType, name, nextHopProtocol, redirectEnd, redirectStart, \n    // @ts-expect-error the renderBlockingStatus property is not available in all browsers\n    renderBlockingStatus: rbs, requestStart, responseEnd, responseStart, responseStatus, secureConnectionStart, transferSize, workerStart, } = resourceEntryRaw;\n    return {\n        name: name,\n        duration: toFaroPerformanceTimingString(duration),\n        tcpHandshakeTime: toFaroPerformanceTimingString(connectEnd - connectStart),\n        dnsLookupTime: toFaroPerformanceTimingString(domainLookupEnd - domainLookupStart),\n        tlsNegotiationTime: toFaroPerformanceTimingString(connectEnd - secureConnectionStart),\n        responseStatus: toFaroPerformanceTimingString(responseStatus),\n        redirectTime: toFaroPerformanceTimingString(redirectEnd - redirectStart),\n        requestTime: toFaroPerformanceTimingString(responseStart - requestStart),\n        responseTime: toFaroPerformanceTimingString(responseEnd - responseStart),\n        fetchTime: toFaroPerformanceTimingString(responseEnd - fetchStart),\n        serviceWorkerTime: toFaroPerformanceTimingString(fetchStart - workerStart),\n        decodedBodySize: toFaroPerformanceTimingString(decodedBodySize),\n        encodedBodySize: toFaroPerformanceTimingString(encodedBodySize),\n        cacheHitStatus: getCacheType(),\n        renderBlockingStatus: toFaroPerformanceTimingString(rbs),\n        protocol: nextHopProtocol,\n        initiatorType: initiatorType,\n        visibilityState: document.visibilityState,\n        ttfb: toFaroPerformanceTimingString(responseStart - requestStart),\n        transferSize: toFaroPerformanceTimingString(transferSize),\n        // TODO: add in future iteration, ideally after nested objects are supported by the collector.\n        // serverTiming: resourceEntryRaw.serverTiming,\n    };\n    function getCacheType() {\n        let cacheType = 'fullLoad';\n        if (transferSize === 0) {\n            if (decodedBodySize > 0) {\n                cacheType = 'cache';\n            }\n        }\n        else {\n            if (responseStatus != null) {\n                if (responseStatus === 304) {\n                    cacheType = 'conditionalFetch';\n                }\n            }\n            else if (encodedBodySize > 0 && transferSize < encodedBodySize) {\n                cacheType = 'conditionalFetch';\n            }\n        }\n        return cacheType;\n    }\n}\nexport function createFaroNavigationTiming(navigationEntryRaw) {\n    const { activationStart, domComplete, domContentLoadedEventEnd, domContentLoadedEventStart, domInteractive, fetchStart, loadEventEnd, loadEventStart, responseStart, type, } = navigationEntryRaw;\n    const parserStart = getDocumentParsingTime();\n    return Object.assign(Object.assign({}, createFaroResourceTiming(navigationEntryRaw)), { pageLoadTime: toFaroPerformanceTimingString(domComplete - fetchStart), documentParsingTime: toFaroPerformanceTimingString(parserStart ? domInteractive - parserStart : null), domProcessingTime: toFaroPerformanceTimingString(domComplete - domInteractive), domContentLoadHandlerTime: toFaroPerformanceTimingString(domContentLoadedEventEnd - domContentLoadedEventStart), onLoadTime: toFaroPerformanceTimingString(loadEventEnd - loadEventStart), \n        // For navigation entries we can calculate the TTFB based on activationStart. We overwrite the TTFB value coming with the resource entry.\n        // For more accuracy on prerendered pages page we calculate relative top the activationStart instead of the start of the navigation.\n        // clamp to 0 if activationStart occurs after first byte is received.\n        ttfb: toFaroPerformanceTimingString(Math.max(responseStart - (activationStart !== null && activationStart !== void 0 ? activationStart : 0), 0)), type: type });\n}\nfunction getDocumentParsingTime() {\n    var _a;\n    if (((_a = performance.timing) === null || _a === void 0 ? void 0 : _a.domLoading) != null) {\n        // the browser is about to start parsing the first received bytes of the HTML document.\n        // This property is deprecated but there isn't a really good alternative atm.\n        // For now we stick with domLoading and keep researching a better alternative.\n        return performance.timing.domLoading - performance.timeOrigin;\n    }\n    return null;\n}\nfunction toFaroPerformanceTimingString(v) {\n    if (v == null) {\n        return unknownString;\n    }\n    if (typeof v === 'number') {\n        return Math.round(v > 0 ? v : 0).toString();\n    }\n    return v.toString();\n}\n//# sourceMappingURL=performanceUtils.js.map","import { genShortID, unknownString } from '@grafana/faro-core';\nimport { getItem, setItem, webStorageType } from '../../utils';\nimport { isUrlIgnored } from '../../utils/url';\nimport { NAVIGATION_ID_STORAGE_KEY } from '../instrumentationConstants';\nimport { NAVIGATION_ENTRY } from './performanceConstants';\nimport { createFaroNavigationTiming, getSpanContextFromServerTiming } from './performanceUtils';\nexport function getNavigationTimings(pushEvent) {\n    let faroNavigationEntryResolve;\n    const faroNavigationEntryPromise = new Promise((resolve) => {\n        faroNavigationEntryResolve = resolve;\n    });\n    const observer = new PerformanceObserver((observedEntries) => {\n        var _a;\n        const [navigationEntryRaw] = observedEntries.getEntries();\n        if (navigationEntryRaw == null || isUrlIgnored(navigationEntryRaw.name)) {\n            return;\n        }\n        const navEntryJson = navigationEntryRaw.toJSON();\n        let spanContext = getSpanContextFromServerTiming(navEntryJson === null || navEntryJson === void 0 ? void 0 : navEntryJson.serverTiming);\n        const faroPreviousNavigationId = (_a = getItem(NAVIGATION_ID_STORAGE_KEY, webStorageType.session)) !== null && _a !== void 0 ? _a : unknownString;\n        const faroNavigationEntry = Object.assign(Object.assign({}, createFaroNavigationTiming(navEntryJson)), { faroNavigationId: genShortID(), faroPreviousNavigationId });\n        setItem(NAVIGATION_ID_STORAGE_KEY, faroNavigationEntry.faroNavigationId, webStorageType.session);\n        pushEvent('faro.performance.navigation', faroNavigationEntry, undefined, {\n            spanContext,\n            timestampOverwriteMs: performance.timeOrigin + navEntryJson.startTime,\n        });\n        faroNavigationEntryResolve(faroNavigationEntry);\n    });\n    observer.observe({\n        type: NAVIGATION_ENTRY,\n        buffered: true,\n    });\n    return faroNavigationEntryPromise;\n}\n//# sourceMappingURL=navigation.js.map","import { faro, genShortID } from '@grafana/faro-core';\nimport { isUrlIgnored } from '../../utils/url';\nimport { RESOURCE_ENTRY } from './performanceConstants';\nimport { createFaroResourceTiming, getSpanContextFromServerTiming, includePerformanceEntry } from './performanceUtils';\nconst DEFAULT_TRACK_RESOURCES = { initiatorType: ['xmlhttprequest', 'fetch'] };\nexport function observeResourceTimings(faroNavigationId, pushEvent, observable) {\n    const trackResources = faro.config.trackResources;\n    const observer = new PerformanceObserver((observedEntries) => {\n        const entries = observedEntries.getEntries();\n        for (const resourceEntryRaw of entries) {\n            if (isUrlIgnored(resourceEntryRaw.name)) {\n                return;\n            }\n            const resourceEntryJson = resourceEntryRaw.toJSON();\n            let spanContext = getSpanContextFromServerTiming(resourceEntryJson === null || resourceEntryJson === void 0 ? void 0 : resourceEntryJson.serverTiming);\n            if ((trackResources == null && includePerformanceEntry(resourceEntryJson, DEFAULT_TRACK_RESOURCES)) ||\n                trackResources) {\n                const faroResourceEntry = Object.assign(Object.assign({}, createFaroResourceTiming(resourceEntryJson)), { faroNavigationId, faroResourceId: genShortID() });\n                if (faro.config.trackUserActionsPreview) {\n                    observable === null || observable === void 0 ? void 0 : observable.notify({\n                        type: RESOURCE_ENTRY,\n                    });\n                }\n                pushEvent('faro.performance.resource', faroResourceEntry, undefined, {\n                    spanContext,\n                    timestampOverwriteMs: performance.timeOrigin + resourceEntryJson.startTime,\n                });\n            }\n        }\n    });\n    observer.observe({\n        type: RESOURCE_ENTRY,\n        buffered: true,\n    });\n}\n//# sourceMappingURL=resource.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseInstrumentation, Observable, VERSION } from '@grafana/faro-core';\nimport { getNavigationTimings } from './navigation';\nimport { onDocumentReady, performanceObserverSupported } from './performanceUtils';\nimport { observeResourceTimings } from './resource';\nexport const performanceEntriesSubscription = new Observable();\nexport class PerformanceInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-performance';\n        this.version = VERSION;\n    }\n    initialize() {\n        if (!performanceObserverSupported()) {\n            this.logDebug('performance observer not supported. Disable performance instrumentation.');\n            return;\n        }\n        onDocumentReady(() => __awaiter(this, void 0, void 0, function* () {\n            const pushEvent = this.api.pushEvent;\n            const { faroNavigationId } = yield getNavigationTimings(pushEvent);\n            if (faroNavigationId != null) {\n                observeResourceTimings(faroNavigationId, pushEvent, performanceEntriesSubscription);\n            }\n        }));\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","import { Observable } from '@grafana/faro-core';\nimport { performanceEntriesSubscription } from '../performance/instrumentation';\nimport { RESOURCE_ENTRY } from '../performance/performanceConstants';\nimport { MESSAGE_TYPE_RESOURCE_ENTRY } from './const';\nexport function monitorPerformanceEntries() {\n    const observable = new Observable();\n    performanceEntriesSubscription.subscribe((data) => {\n        if (data.type === RESOURCE_ENTRY) {\n            observable.notify({ type: MESSAGE_TYPE_RESOURCE_ENTRY });\n        }\n    });\n    return observable;\n}\n//# sourceMappingURL=performanceEntriesMonitor.js.map","/**\n * Parses the action attribute name by removing the 'data-' prefix and converting\n * the remaining string to camelCase.\n *\n * This is needed because the browser will remove the 'data-' prefix and the dashes from\n * data attributes and make then camelCase.\n */\nexport function convertDataAttributeName(userActionDataAttribute) {\n    const withoutData = userActionDataAttribute.split('data-')[1];\n    const withUpperCase = withoutData === null || withoutData === void 0 ? void 0 : withoutData.replace(/-(.)/g, (_, char) => char.toUpperCase());\n    return withUpperCase === null || withUpperCase === void 0 ? void 0 : withUpperCase.replace(/-/g, '');\n}\n//# sourceMappingURL=util.js.map","import { apiMessageBus, dateNow, genShortID, Observable, stringifyObjectValues, USER_ACTION_CANCEL, USER_ACTION_END, USER_ACTION_HALT, USER_ACTION_START, } from '@grafana/faro-core';\nimport { MESSAGE_TYPE_HTTP_REQUEST_END, MESSAGE_TYPE_HTTP_REQUEST_START, userActionDataAttributeParsed as userActionDataAttribute, userActionStartByApiCallEventName, } from './const';\nimport { monitorDomMutations } from './domMutationMonitor';\nimport { monitorHttpRequests } from './httpRequestMonitor';\nimport { monitorPerformanceEntries } from './performanceEntriesMonitor';\nimport { convertDataAttributeName } from './util';\nconst maxFollowUpActionTimeRange = 100;\nexport function getUserEventHandler(faro) {\n    const { api, config } = faro;\n    const httpMonitor = monitorHttpRequests();\n    const domMutationsMonitor = monitorDomMutations();\n    const performanceEntriesMonitor = monitorPerformanceEntries();\n    let timeoutId;\n    let actionRunning = false;\n    function processUserEvent(event) {\n        var _a;\n        let userActionName;\n        const isApiEventDetected = isApiEvent(event);\n        if (isApiEventDetected) {\n            userActionName = event.name;\n        }\n        else {\n            userActionName = getUserActionName(event.target, (_a = config.trackUserActionsDataAttributeName) !== null && _a !== void 0 ? _a : userActionDataAttribute);\n        }\n        if (actionRunning || userActionName == null) {\n            return;\n        }\n        actionRunning = true;\n        const startTime = dateNow();\n        let endTime;\n        const actionId = genShortID();\n        apiMessageBus.notify({\n            type: USER_ACTION_START,\n            name: userActionName,\n            startTime: startTime,\n            parentId: actionId,\n        });\n        // Triggers if no initial action happened within the first 100ms\n        timeoutId = startTimeout(timeoutId, () => {\n            endTime = dateNow();\n            // Listening for follow up activities stops once action is cancelled (set to false)\n            actionRunning = false;\n            sendUserActionCancelMessage(userActionName, actionId);\n        }, maxFollowUpActionTimeRange);\n        const runningRequests = new Map();\n        let isHalted = false;\n        let pendingActionTimeoutId;\n        const allMonitorsSub = new Observable()\n            .merge(httpMonitor, domMutationsMonitor, performanceEntriesMonitor)\n            .takeWhile(() => actionRunning)\n            .filter((msg) => {\n            // If the user action is in halt state, we only keep listening to ended http requests\n            if (isHalted && !(isRequestEndMessage(msg) && runningRequests.has(msg.request.requestId))) {\n                return false;\n            }\n            return true;\n        })\n            .subscribe((msg) => {\n            if (isRequestStartMessage(msg)) {\n                // An action is on halt if it has pending items, like pending HTTP requests.\n                // In this case we start a separate timeout to wait for the requests to finish\n                // If in the halt state, we stop adding Faro signals to the action's buffer (see userActionLifecycleHandler.ts)\n                // But we are still subscribed to\n                runningRequests.set(msg.request.requestId, msg.request);\n            }\n            if (isRequestEndMessage(msg)) {\n                runningRequests.delete(msg.request.requestId);\n            }\n            // A http request, a DOM mutation or a performance entry happened so we have a follow up activity and start the timeout again\n            // If timeout is triggered the user action is done and we send respective messages and events\n            timeoutId = startTimeout(timeoutId, () => {\n                endTime = dateNow();\n                const userActionParentEventProps = Object.assign({ api,\n                    userActionName,\n                    startTime, endTime: endTime, actionId,\n                    event }, (isApiEventDetected ? { attributes: event.attributes } : {}));\n                const hasPendingRequests = runningRequests.size > 0;\n                const isAllPendingRequestsResolved = isHalted && !hasPendingRequests;\n                if (isAllPendingRequestsResolved) {\n                    clearTimeout(pendingActionTimeoutId);\n                    isHalted = false;\n                }\n                if (hasPendingRequests) {\n                    isHalted = true;\n                    apiMessageBus.notify({\n                        type: USER_ACTION_HALT,\n                        name: userActionName,\n                        parentId: actionId,\n                        reason: 'pending-requests',\n                        haltTime: dateNow(),\n                    });\n                    pendingActionTimeoutId = startTimeout(undefined, () => {\n                        unsubscribeAllMonitors(allMonitorsSub);\n                        endUserAction(userActionParentEventProps);\n                        actionRunning = false;\n                        isHalted = false;\n                    }, 1000 * 10);\n                }\n                else {\n                    unsubscribeAllMonitors(allMonitorsSub);\n                    endUserAction(userActionParentEventProps);\n                    actionRunning = false;\n                    isHalted = false;\n                }\n            }, maxFollowUpActionTimeRange);\n        });\n    }\n    return processUserEvent;\n}\n/**\n * User action was successfully completed and we send the final event(s)\n */\nfunction endUserAction(props) {\n    const { api, userActionName, startTime, endTime, actionId, event, attributes } = props;\n    const duration = endTime - startTime;\n    const eventType = event.type;\n    // order matters, first emit the user-action-end event and afterwards push the parent event\n    apiMessageBus.notify({\n        type: USER_ACTION_END,\n        name: userActionName,\n        id: actionId,\n        startTime,\n        endTime,\n        duration,\n        eventType,\n    });\n    // Send the final action parent event\n    api.pushEvent(userActionName, Object.assign({ userActionStartTime: startTime.toString(), userActionEndTime: endTime.toString(), userActionDuration: duration.toString(), userActionTrigger: eventType }, stringifyObjectValues(attributes)), undefined, {\n        timestampOverwriteMs: startTime,\n        customPayloadTransformer: (payload) => {\n            payload.action = {\n                id: actionId,\n                name: userActionName,\n            };\n            return payload;\n        },\n    });\n}\nfunction getUserActionName(element, dataAttributeName) {\n    const parsedDataAttributeName = convertDataAttributeName(dataAttributeName);\n    const dataset = element.dataset;\n    for (const key in dataset) {\n        if (key === parsedDataAttributeName) {\n            return dataset[key];\n        }\n    }\n    return undefined;\n}\nfunction startTimeout(timeoutId, cb, delay) {\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n    //@ts-expect-error for some reason vscode is using the node types\n    timeoutId = setTimeout(() => {\n        cb();\n    }, delay);\n    return timeoutId;\n}\nfunction sendUserActionCancelMessage(userActionName, actionId) {\n    apiMessageBus.notify({\n        type: USER_ACTION_CANCEL,\n        name: userActionName,\n        parentId: actionId,\n    });\n}\nfunction unsubscribeAllMonitors(allMonitorsSub) {\n    allMonitorsSub === null || allMonitorsSub === void 0 ? void 0 : allMonitorsSub.unsubscribe();\n    allMonitorsSub = undefined;\n}\nfunction isRequestStartMessage(msg) {\n    return msg.type === MESSAGE_TYPE_HTTP_REQUEST_START;\n}\nfunction isRequestEndMessage(msg) {\n    return msg.type === MESSAGE_TYPE_HTTP_REQUEST_END;\n}\nfunction isApiEvent(apiEvent) {\n    return apiEvent.type === userActionStartByApiCallEventName && typeof apiEvent.name === 'string';\n}\n//# sourceMappingURL=processUserActionEventHandler.js.map","import { BaseInstrumentation, faro, VERSION } from '@grafana/faro-core';\nimport { userActionStartByApiCallEventName } from './const';\nimport { getUserEventHandler } from './processUserActionEventHandler';\nlet processUserEventHandler;\nexport class UserActionInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-user-action';\n        this.version = VERSION;\n    }\n    initialize() {\n        processUserEventHandler = getUserEventHandler(faro);\n        window.addEventListener('pointerdown', processUserEventHandler);\n        window.addEventListener('keydown', processUserEventHandler);\n    }\n}\nexport function startUserAction(name, attributes) {\n    processUserEventHandler === null || processUserEventHandler === void 0 ? void 0 : processUserEventHandler(createUserActionApiEvent(name, attributes));\n}\nfunction createUserActionApiEvent(name, attributes) {\n    return {\n        name,\n        attributes,\n        type: userActionStartByApiCallEventName,\n    };\n}\n//# sourceMappingURL=instrumentation.js.map","export const primitiveUnhandledValue = 'Non-Error promise rejection captured with value:';\nexport const primitiveUnhandledType = 'UnhandledRejection';\nexport const domErrorType = 'DOMError';\nexport const domExceptionType = 'DOMException';\nexport const objectEventValue = 'Non-Error exception captured with keys:';\nexport const unknownSymbolString = '?';\nexport const valueTypeRegex = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n//# sourceMappingURL=const.js.map","import { defaultExceptionType } from '@grafana/faro-core';\nimport { valueTypeRegex } from './const';\nexport function getValueAndTypeFromMessage(message) {\n    var _a, _b;\n    const groups = message.match(valueTypeRegex);\n    const type = (_a = groups === null || groups === void 0 ? void 0 : groups[1]) !== null && _a !== void 0 ? _a : defaultExceptionType;\n    const value = (_b = groups === null || groups === void 0 ? void 0 : groups[2]) !== null && _b !== void 0 ? _b : message;\n    return [value, type];\n}\n//# sourceMappingURL=getValueAndTypeFromMessage.js.map","import { isDomError, isDomException, isError, isErrorEvent, isEvent, isObject, isString } from '@grafana/faro-core';\nimport { domErrorType, domExceptionType, objectEventValue, unknownSymbolString } from './const';\nimport { getValueAndTypeFromMessage } from './getValueAndTypeFromMessage';\nimport { buildStackFrame, getStackFramesFromError } from './stackFrames';\nexport function getErrorDetails(evt) {\n    let value;\n    let type;\n    let stackFrames = [];\n    let isDomErrorRes;\n    let isEventRes;\n    if (isErrorEvent(evt) && evt.error) {\n        value = evt.error.message;\n        type = evt.error.name;\n        stackFrames = getStackFramesFromError(evt.error);\n    }\n    else if ((isDomErrorRes = isDomError(evt)) || isDomException(evt)) {\n        const { name, message } = evt;\n        type = name !== null && name !== void 0 ? name : (isDomErrorRes ? domErrorType : domExceptionType);\n        value = message ? `${type}: ${message}` : type;\n    }\n    else if (isError(evt)) {\n        value = evt.message;\n        stackFrames = getStackFramesFromError(evt);\n    }\n    else if (isObject(evt) || (isEventRes = isEvent(evt))) {\n        type = isEventRes ? evt.constructor.name : undefined;\n        value = `${objectEventValue} ${Object.keys(evt)}`;\n    }\n    return [value, type, stackFrames];\n}\nexport function getDetailsFromErrorArgs(args) {\n    const [evt, source, lineno, colno, error] = args;\n    let value;\n    let type;\n    let stackFrames = [];\n    const eventIsString = isString(evt);\n    const initialStackFrame = buildStackFrame(source, unknownSymbolString, lineno, colno);\n    if (error || !eventIsString) {\n        [value, type, stackFrames] = getErrorDetails((error !== null && error !== void 0 ? error : evt));\n        if (stackFrames.length === 0) {\n            stackFrames = [initialStackFrame];\n        }\n    }\n    else if (eventIsString) {\n        [value, type] = getValueAndTypeFromMessage(evt);\n        stackFrames = [initialStackFrame];\n    }\n    return { value, type, stackFrames };\n}\nexport function getDetailsFromConsoleErrorArgs(args, serializer) {\n    if (isError(args[0])) {\n        return getDetailsFromErrorArgs(args);\n    }\n    else {\n        return { value: serializer(args) };\n    }\n}\n//# sourceMappingURL=getErrorDetails.js.map","import { getDetailsFromErrorArgs } from './getErrorDetails';\nexport function registerOnerror(api) {\n    const oldOnerror = window.onerror;\n    window.onerror = (...args) => {\n        try {\n            const { value, type, stackFrames } = getDetailsFromErrorArgs(args);\n            const originalError = args[4];\n            if (value) {\n                const options = { type, stackFrames };\n                if (originalError != null) {\n                    options.originalError = originalError;\n                }\n                api.pushError(new Error(value), options);\n            }\n        }\n        finally {\n            oldOnerror === null || oldOnerror === void 0 ? void 0 : oldOnerror.apply(window, args);\n        }\n    };\n}\n//# sourceMappingURL=registerOnerror.js.map","import { isPrimitive } from '@grafana/faro-core';\nimport { primitiveUnhandledType, primitiveUnhandledValue } from './const';\nimport { getErrorDetails } from './getErrorDetails';\nexport function registerOnunhandledrejection(api) {\n    window.addEventListener('unhandledrejection', (evt) => {\n        var _a, _b;\n        let error = evt;\n        if (error.reason) {\n            error = evt.reason;\n        }\n        else if ((_a = evt.detail) === null || _a === void 0 ? void 0 : _a.reason) {\n            error = (_b = evt.detail) === null || _b === void 0 ? void 0 : _b.reason;\n        }\n        let value;\n        let type;\n        let stackFrames = [];\n        if (isPrimitive(error)) {\n            value = `${primitiveUnhandledValue} ${String(error)}`;\n            type = primitiveUnhandledType;\n        }\n        else {\n            [value, type, stackFrames] = getErrorDetails(error);\n        }\n        if (value) {\n            api.pushError(new Error(value), { type, stackFrames });\n        }\n    });\n}\n//# sourceMappingURL=registerOnunhandledrejection.js.map","import { BaseInstrumentation, VERSION } from '@grafana/faro-core';\nimport { registerOnerror } from './registerOnerror';\nimport { registerOnunhandledrejection } from './registerOnunhandledrejection';\nexport class ErrorsInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-errors';\n        this.version = VERSION;\n    }\n    initialize() {\n        this.logDebug('Initializing');\n        registerOnerror(this.api);\n        registerOnunhandledrejection(this.api);\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","var e,n,t,r,i,o=-1,a=function(e){addEventListener(\"pageshow\",(function(n){n.persisted&&(o=n.timeStamp,e(n))}),!0)},c=function(){var e=self.performance&&performance.getEntriesByType&&performance.getEntriesByType(\"navigation\")[0];if(e&&e.responseStart>0&&e.responseStart<performance.now())return e},u=function(){var e=c();return e&&e.activationStart||0},f=function(e,n){var t=c(),r=\"navigate\";o>=0?r=\"back-forward-cache\":t&&(document.prerendering||u()>0?r=\"prerender\":document.wasDiscarded?r=\"restore\":t.type&&(r=t.type.replace(/_/g,\"-\")));return{name:e,value:void 0===n?-1:n,rating:\"good\",delta:0,entries:[],id:\"v4-\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+1e12),navigationType:r}},s=function(e,n,t){try{if(PerformanceObserver.supportedEntryTypes.includes(e)){var r=new PerformanceObserver((function(e){Promise.resolve().then((function(){n(e.getEntries())}))}));return r.observe(Object.assign({type:e,buffered:!0},t||{})),r}}catch(e){}},d=function(e,n,t,r){var i,o;return function(a){n.value>=0&&(a||r)&&((o=n.value-(i||0))||void 0===i)&&(i=n.value,n.delta=o,n.rating=function(e,n){return e>n[1]?\"poor\":e>n[0]?\"needs-improvement\":\"good\"}(n.value,t),e(n))}},l=function(e){requestAnimationFrame((function(){return requestAnimationFrame((function(){return e()}))}))},p=function(e){document.addEventListener(\"visibilitychange\",(function(){\"hidden\"===document.visibilityState&&e()}))},v=function(e){var n=!1;return function(){n||(e(),n=!0)}},m=-1,h=function(){return\"hidden\"!==document.visibilityState||document.prerendering?1/0:0},g=function(e){\"hidden\"===document.visibilityState&&m>-1&&(m=\"visibilitychange\"===e.type?e.timeStamp:0,T())},y=function(){addEventListener(\"visibilitychange\",g,!0),addEventListener(\"prerenderingchange\",g,!0)},T=function(){removeEventListener(\"visibilitychange\",g,!0),removeEventListener(\"prerenderingchange\",g,!0)},E=function(){return m<0&&(m=h(),y(),a((function(){setTimeout((function(){m=h(),y()}),0)}))),{get firstHiddenTime(){return m}}},C=function(e){document.prerendering?addEventListener(\"prerenderingchange\",(function(){return e()}),!0):e()},b=[1800,3e3],S=function(e,n){n=n||{},C((function(){var t,r=E(),i=f(\"FCP\"),o=s(\"paint\",(function(e){e.forEach((function(e){\"first-contentful-paint\"===e.name&&(o.disconnect(),e.startTime<r.firstHiddenTime&&(i.value=Math.max(e.startTime-u(),0),i.entries.push(e),t(!0)))}))}));o&&(t=d(e,i,b,n.reportAllChanges),a((function(r){i=f(\"FCP\"),t=d(e,i,b,n.reportAllChanges),l((function(){i.value=performance.now()-r.timeStamp,t(!0)}))})))}))},L=[.1,.25],w=function(e,n){n=n||{},S(v((function(){var t,r=f(\"CLS\",0),i=0,o=[],c=function(e){e.forEach((function(e){if(!e.hadRecentInput){var n=o[0],t=o[o.length-1];i&&e.startTime-t.startTime<1e3&&e.startTime-n.startTime<5e3?(i+=e.value,o.push(e)):(i=e.value,o=[e])}})),i>r.value&&(r.value=i,r.entries=o,t())},u=s(\"layout-shift\",c);u&&(t=d(e,r,L,n.reportAllChanges),p((function(){c(u.takeRecords()),t(!0)})),a((function(){i=0,r=f(\"CLS\",0),t=d(e,r,L,n.reportAllChanges),l((function(){return t()}))})),setTimeout(t,0))})))},A=0,I=1/0,P=0,M=function(e){e.forEach((function(e){e.interactionId&&(I=Math.min(I,e.interactionId),P=Math.max(P,e.interactionId),A=P?(P-I)/7+1:0)}))},k=function(){return e?A:performance.interactionCount||0},F=function(){\"interactionCount\"in performance||e||(e=s(\"event\",M,{type:\"event\",buffered:!0,durationThreshold:0}))},D=[],x=new Map,R=0,B=function(){var e=Math.min(D.length-1,Math.floor((k()-R)/50));return D[e]},H=[],q=function(e){if(H.forEach((function(n){return n(e)})),e.interactionId||\"first-input\"===e.entryType){var n=D[D.length-1],t=x.get(e.interactionId);if(t||D.length<10||e.duration>n.latency){if(t)e.duration>t.latency?(t.entries=[e],t.latency=e.duration):e.duration===t.latency&&e.startTime===t.entries[0].startTime&&t.entries.push(e);else{var r={id:e.interactionId,latency:e.duration,entries:[e]};x.set(r.id,r),D.push(r)}D.sort((function(e,n){return n.latency-e.latency})),D.length>10&&D.splice(10).forEach((function(e){return x.delete(e.id)}))}}},O=function(e){var n=self.requestIdleCallback||self.setTimeout,t=-1;return e=v(e),\"hidden\"===document.visibilityState?e():(t=n(e),p(e)),t},N=[200,500],j=function(e,n){\"PerformanceEventTiming\"in self&&\"interactionId\"in PerformanceEventTiming.prototype&&(n=n||{},C((function(){var t;F();var r,i=f(\"INP\"),o=function(e){O((function(){e.forEach(q);var n=B();n&&n.latency!==i.value&&(i.value=n.latency,i.entries=n.entries,r())}))},c=s(\"event\",o,{durationThreshold:null!==(t=n.durationThreshold)&&void 0!==t?t:40});r=d(e,i,N,n.reportAllChanges),c&&(c.observe({type:\"first-input\",buffered:!0}),p((function(){o(c.takeRecords()),r(!0)})),a((function(){R=k(),D.length=0,x.clear(),i=f(\"INP\"),r=d(e,i,N,n.reportAllChanges)})))})))},_=[2500,4e3],z={},G=function(e,n){n=n||{},C((function(){var t,r=E(),i=f(\"LCP\"),o=function(e){n.reportAllChanges||(e=e.slice(-1)),e.forEach((function(e){e.startTime<r.firstHiddenTime&&(i.value=Math.max(e.startTime-u(),0),i.entries=[e],t())}))},c=s(\"largest-contentful-paint\",o);if(c){t=d(e,i,_,n.reportAllChanges);var m=v((function(){z[i.id]||(o(c.takeRecords()),c.disconnect(),z[i.id]=!0,t(!0))}));[\"keydown\",\"click\"].forEach((function(e){addEventListener(e,(function(){return O(m)}),{once:!0,capture:!0})})),p(m),a((function(r){i=f(\"LCP\"),t=d(e,i,_,n.reportAllChanges),l((function(){i.value=performance.now()-r.timeStamp,z[i.id]=!0,t(!0)}))}))}}))},J=[800,1800],K=function e(n){document.prerendering?C((function(){return e(n)})):\"complete\"!==document.readyState?addEventListener(\"load\",(function(){return e(n)}),!0):setTimeout(n,0)},Q=function(e,n){n=n||{};var t=f(\"TTFB\"),r=d(e,t,J,n.reportAllChanges);K((function(){var i=c();i&&(t.value=Math.max(i.responseStart-u(),0),t.entries=[i],r(!0),a((function(){t=f(\"TTFB\",0),(r=d(e,t,J,n.reportAllChanges))(!0)})))}))},U={passive:!0,capture:!0},V=new Date,W=function(e,i){n||(n=i,t=e,r=new Date,Z(removeEventListener),X())},X=function(){if(t>=0&&t<r-V){var e={entryType:\"first-input\",name:n.type,target:n.target,cancelable:n.cancelable,startTime:n.timeStamp,processingStart:n.timeStamp+t};i.forEach((function(n){n(e)})),i=[]}},Y=function(e){if(e.cancelable){var n=(e.timeStamp>1e12?new Date:performance.now())-e.timeStamp;\"pointerdown\"==e.type?function(e,n){var t=function(){W(e,n),i()},r=function(){i()},i=function(){removeEventListener(\"pointerup\",t,U),removeEventListener(\"pointercancel\",r,U)};addEventListener(\"pointerup\",t,U),addEventListener(\"pointercancel\",r,U)}(n,e):W(n,e)}},Z=function(e){[\"mousedown\",\"keydown\",\"touchstart\",\"pointerdown\"].forEach((function(n){return e(n,Y,U)}))},$=[100,300],ee=function(e,r){r=r||{},C((function(){var o,c=E(),u=f(\"FID\"),l=function(e){e.startTime<c.firstHiddenTime&&(u.value=e.processingStart-e.startTime,u.entries.push(e),o(!0))},m=function(e){e.forEach(l)},h=s(\"first-input\",m);o=d(e,u,$,r.reportAllChanges),h&&(p(v((function(){m(h.takeRecords()),h.disconnect()}))),a((function(){var a;u=f(\"FID\"),o=d(e,u,$,r.reportAllChanges),i=[],t=-1,n=null,Z(addEventListener),a=l,i.push(a),X()})))}))};export{L as CLSThresholds,b as FCPThresholds,$ as FIDThresholds,N as INPThresholds,_ as LCPThresholds,J as TTFBThresholds,w as onCLS,S as onFCP,ee as onFID,j as onINP,G as onLCP,Q as onTTFB};\n","import { onCLS, onFCP, onFID, onINP, onLCP, onTTFB } from 'web-vitals';\nexport class WebVitalsBasic {\n    constructor(pushMeasurement, webVitalConfig) {\n        this.pushMeasurement = pushMeasurement;\n        this.webVitalConfig = webVitalConfig;\n    }\n    initialize() {\n        Object.entries(WebVitalsBasic.mapping).forEach(([indicator, executor]) => {\n            var _a;\n            executor((metric) => {\n                this.pushMeasurement({\n                    type: 'web-vitals',\n                    values: {\n                        [indicator]: metric.value,\n                    },\n                });\n            }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n        });\n    }\n}\nWebVitalsBasic.mapping = {\n    cls: onCLS,\n    fcp: onFCP,\n    fid: onFID,\n    inp: onINP,\n    lcp: onLCP,\n    ttfb: onTTFB,\n};\n//# sourceMappingURL=webVitalsBasic.js.map","var t,e,n=function(){var t=self.performance&&performance.getEntriesByType&&performance.getEntriesByType(\"navigation\")[0];if(t&&t.responseStart>0&&t.responseStart<performance.now())return t},r=function(t){if(\"loading\"===document.readyState)return\"loading\";var e=n();if(e){if(t<e.domInteractive)return\"loading\";if(0===e.domContentLoadedEventStart||t<e.domContentLoadedEventStart)return\"dom-interactive\";if(0===e.domComplete||t<e.domComplete)return\"dom-content-loaded\"}return\"complete\"},i=function(t){var e=t.nodeName;return 1===t.nodeType?e.toLowerCase():e.toUpperCase().replace(/^#/,\"\")},a=function(t,e){var n=\"\";try{for(;t&&9!==t.nodeType;){var r=t,a=r.id?\"#\"+r.id:i(r)+(r.classList&&r.classList.value&&r.classList.value.trim()&&r.classList.value.trim().length?\".\"+r.classList.value.trim().replace(/\\s+/g,\".\"):\"\");if(n.length+a.length>(e||100)-1)return n||a;if(n=n?a+\">\"+n:a,r.id)break;t=r.parentNode}}catch(t){}return n},o=-1,c=function(){return o},u=function(t){addEventListener(\"pageshow\",(function(e){e.persisted&&(o=e.timeStamp,t(e))}),!0)},s=function(){var t=n();return t&&t.activationStart||0},f=function(t,e){var r=n(),i=\"navigate\";c()>=0?i=\"back-forward-cache\":r&&(document.prerendering||s()>0?i=\"prerender\":document.wasDiscarded?i=\"restore\":r.type&&(i=r.type.replace(/_/g,\"-\")));return{name:t,value:void 0===e?-1:e,rating:\"good\",delta:0,entries:[],id:\"v4-\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+1e12),navigationType:i}},d=function(t,e,n){try{if(PerformanceObserver.supportedEntryTypes.includes(t)){var r=new PerformanceObserver((function(t){Promise.resolve().then((function(){e(t.getEntries())}))}));return r.observe(Object.assign({type:t,buffered:!0},n||{})),r}}catch(t){}},l=function(t,e,n,r){var i,a;return function(o){e.value>=0&&(o||r)&&((a=e.value-(i||0))||void 0===i)&&(i=e.value,e.delta=a,e.rating=function(t,e){return t>e[1]?\"poor\":t>e[0]?\"needs-improvement\":\"good\"}(e.value,n),t(e))}},m=function(t){requestAnimationFrame((function(){return requestAnimationFrame((function(){return t()}))}))},p=function(t){document.addEventListener(\"visibilitychange\",(function(){\"hidden\"===document.visibilityState&&t()}))},v=function(t){var e=!1;return function(){e||(t(),e=!0)}},g=-1,h=function(){return\"hidden\"!==document.visibilityState||document.prerendering?1/0:0},T=function(t){\"hidden\"===document.visibilityState&&g>-1&&(g=\"visibilitychange\"===t.type?t.timeStamp:0,E())},y=function(){addEventListener(\"visibilitychange\",T,!0),addEventListener(\"prerenderingchange\",T,!0)},E=function(){removeEventListener(\"visibilitychange\",T,!0),removeEventListener(\"prerenderingchange\",T,!0)},S=function(){return g<0&&(g=h(),y(),u((function(){setTimeout((function(){g=h(),y()}),0)}))),{get firstHiddenTime(){return g}}},b=function(t){document.prerendering?addEventListener(\"prerenderingchange\",(function(){return t()}),!0):t()},L=[1800,3e3],C=function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"FCP\"),a=d(\"paint\",(function(t){t.forEach((function(t){\"first-contentful-paint\"===t.name&&(a.disconnect(),t.startTime<r.firstHiddenTime&&(i.value=Math.max(t.startTime-s(),0),i.entries.push(t),n(!0)))}))}));a&&(n=l(t,i,L,e.reportAllChanges),u((function(r){i=f(\"FCP\"),n=l(t,i,L,e.reportAllChanges),m((function(){i.value=performance.now()-r.timeStamp,n(!0)}))})))}))},M=[.1,.25],D=function(t,e){!function(t,e){e=e||{},C(v((function(){var n,r=f(\"CLS\",0),i=0,a=[],o=function(t){t.forEach((function(t){if(!t.hadRecentInput){var e=a[0],n=a[a.length-1];i&&t.startTime-n.startTime<1e3&&t.startTime-e.startTime<5e3?(i+=t.value,a.push(t)):(i=t.value,a=[t])}})),i>r.value&&(r.value=i,r.entries=a,n())},c=d(\"layout-shift\",o);c&&(n=l(t,r,M,e.reportAllChanges),p((function(){o(c.takeRecords()),n(!0)})),u((function(){i=0,r=f(\"CLS\",0),n=l(t,r,M,e.reportAllChanges),m((function(){return n()}))})),setTimeout(n,0))})))}((function(e){var n=function(t){var e,n={};if(t.entries.length){var i=t.entries.reduce((function(t,e){return t&&t.value>e.value?t:e}));if(i&&i.sources&&i.sources.length){var o=(e=i.sources).find((function(t){return t.node&&1===t.node.nodeType}))||e[0];o&&(n={largestShiftTarget:a(o.node),largestShiftTime:i.startTime,largestShiftValue:i.value,largestShiftSource:o,largestShiftEntry:i,loadState:r(i.startTime)})}}return Object.assign(t,{attribution:n})}(e);t(n)}),e)},w=function(t,e){C((function(e){var i=function(t){var e={timeToFirstByte:0,firstByteToFCP:t.value,loadState:r(c())};if(t.entries.length){var i=n(),a=t.entries[t.entries.length-1];if(i){var o=i.activationStart||0,u=Math.max(0,i.responseStart-o);e={timeToFirstByte:u,firstByteToFCP:t.value-u,loadState:r(t.entries[0].startTime),navigationEntry:i,fcpEntry:a}}}return Object.assign(t,{attribution:e})}(e);t(i)}),e)},x=0,I=1/0,k=0,A=function(t){t.forEach((function(t){t.interactionId&&(I=Math.min(I,t.interactionId),k=Math.max(k,t.interactionId),x=k?(k-I)/7+1:0)}))},F=function(){return t?x:performance.interactionCount||0},P=function(){\"interactionCount\"in performance||t||(t=d(\"event\",A,{type:\"event\",buffered:!0,durationThreshold:0}))},B=[],O=new Map,R=0,j=function(){var t=Math.min(B.length-1,Math.floor((F()-R)/50));return B[t]},q=[],H=function(t){if(q.forEach((function(e){return e(t)})),t.interactionId||\"first-input\"===t.entryType){var e=B[B.length-1],n=O.get(t.interactionId);if(n||B.length<10||t.duration>e.latency){if(n)t.duration>n.latency?(n.entries=[t],n.latency=t.duration):t.duration===n.latency&&t.startTime===n.entries[0].startTime&&n.entries.push(t);else{var r={id:t.interactionId,latency:t.duration,entries:[t]};O.set(r.id,r),B.push(r)}B.sort((function(t,e){return e.latency-t.latency})),B.length>10&&B.splice(10).forEach((function(t){return O.delete(t.id)}))}}},N=function(t){var e=self.requestIdleCallback||self.setTimeout,n=-1;return t=v(t),\"hidden\"===document.visibilityState?t():(n=e(t),p(t)),n},W=[200,500],z=function(t,e){\"PerformanceEventTiming\"in self&&\"interactionId\"in PerformanceEventTiming.prototype&&(e=e||{},b((function(){var n;P();var r,i=f(\"INP\"),a=function(t){N((function(){t.forEach(H);var e=j();e&&e.latency!==i.value&&(i.value=e.latency,i.entries=e.entries,r())}))},o=d(\"event\",a,{durationThreshold:null!==(n=e.durationThreshold)&&void 0!==n?n:40});r=l(t,i,W,e.reportAllChanges),o&&(o.observe({type:\"first-input\",buffered:!0}),p((function(){a(o.takeRecords()),r(!0)})),u((function(){R=F(),B.length=0,O.clear(),i=f(\"INP\"),r=l(t,i,W,e.reportAllChanges)})))})))},U=[],V=[],_=0,G=new WeakMap,J=new Map,K=-1,Q=function(t){U=U.concat(t),X()},X=function(){K<0&&(K=N(Y))},Y=function(){J.size>10&&J.forEach((function(t,e){O.has(e)||J.delete(e)}));var t=B.map((function(t){return G.get(t.entries[0])})),e=V.length-50;V=V.filter((function(n,r){return r>=e||t.includes(n)}));for(var n=new Set,r=0;r<V.length;r++){var i=V[r];nt(i.startTime,i.processingEnd).forEach((function(t){n.add(t)}))}var a=U.length-1-50;U=U.filter((function(t,e){return t.startTime>_&&e>a||n.has(t)})),K=-1};q.push((function(t){t.interactionId&&t.target&&!J.has(t.interactionId)&&J.set(t.interactionId,t.target)}),(function(t){var e,n=t.startTime+t.duration;_=Math.max(_,t.processingEnd);for(var r=V.length-1;r>=0;r--){var i=V[r];if(Math.abs(n-i.renderTime)<=8){(e=i).startTime=Math.min(t.startTime,e.startTime),e.processingStart=Math.min(t.processingStart,e.processingStart),e.processingEnd=Math.max(t.processingEnd,e.processingEnd),e.entries.push(t);break}}e||(e={startTime:t.startTime,processingStart:t.processingStart,processingEnd:t.processingEnd,renderTime:n,entries:[t]},V.push(e)),(t.interactionId||\"first-input\"===t.entryType)&&G.set(t,e),X()}));var Z,$,tt,et,nt=function(t,e){for(var n,r=[],i=0;n=U[i];i++)if(!(n.startTime+n.duration<t)){if(n.startTime>e)break;r.push(n)}return r},rt=function(t,n){e||(e=d(\"long-animation-frame\",Q)),z((function(e){var n=function(t){var e=t.entries[0],n=G.get(e),i=e.processingStart,o=n.processingEnd,c=n.entries.sort((function(t,e){return t.processingStart-e.processingStart})),u=nt(e.startTime,o),s=t.entries.find((function(t){return t.target})),f=s&&s.target||J.get(e.interactionId),d=[e.startTime+e.duration,o].concat(u.map((function(t){return t.startTime+t.duration}))),l=Math.max.apply(Math,d),m={interactionTarget:a(f),interactionTargetElement:f,interactionType:e.name.startsWith(\"key\")?\"keyboard\":\"pointer\",interactionTime:e.startTime,nextPaintTime:l,processedEventEntries:c,longAnimationFrameEntries:u,inputDelay:i-e.startTime,processingDuration:o-i,presentationDelay:Math.max(l-o,0),loadState:r(e.startTime)};return Object.assign(t,{attribution:m})}(e);t(n)}),n)},it=[2500,4e3],at={},ot=function(t,e){!function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"LCP\"),a=function(t){e.reportAllChanges||(t=t.slice(-1)),t.forEach((function(t){t.startTime<r.firstHiddenTime&&(i.value=Math.max(t.startTime-s(),0),i.entries=[t],n())}))},o=d(\"largest-contentful-paint\",a);if(o){n=l(t,i,it,e.reportAllChanges);var c=v((function(){at[i.id]||(a(o.takeRecords()),o.disconnect(),at[i.id]=!0,n(!0))}));[\"keydown\",\"click\"].forEach((function(t){addEventListener(t,(function(){return N(c)}),{once:!0,capture:!0})})),p(c),u((function(r){i=f(\"LCP\"),n=l(t,i,it,e.reportAllChanges),m((function(){i.value=performance.now()-r.timeStamp,at[i.id]=!0,n(!0)}))}))}}))}((function(e){var r=function(t){var e={timeToFirstByte:0,resourceLoadDelay:0,resourceLoadDuration:0,elementRenderDelay:t.value};if(t.entries.length){var r=n();if(r){var i=r.activationStart||0,o=t.entries[t.entries.length-1],c=o.url&&performance.getEntriesByType(\"resource\").filter((function(t){return t.name===o.url}))[0],u=Math.max(0,r.responseStart-i),s=Math.max(u,c?(c.requestStart||c.startTime)-i:0),f=Math.max(s,c?c.responseEnd-i:0),d=Math.max(f,o.startTime-i);e={element:a(o.element),timeToFirstByte:u,resourceLoadDelay:s-u,resourceLoadDuration:f-s,elementRenderDelay:d-f,navigationEntry:r,lcpEntry:o},o.url&&(e.url=o.url),c&&(e.lcpResourceEntry=c)}}return Object.assign(t,{attribution:e})}(e);t(r)}),e)},ct=[800,1800],ut=function t(e){document.prerendering?b((function(){return t(e)})):\"complete\"!==document.readyState?addEventListener(\"load\",(function(){return t(e)}),!0):setTimeout(e,0)},st=function(t,e){e=e||{};var r=f(\"TTFB\"),i=l(t,r,ct,e.reportAllChanges);ut((function(){var a=n();a&&(r.value=Math.max(a.responseStart-s(),0),r.entries=[a],i(!0),u((function(){r=f(\"TTFB\",0),(i=l(t,r,ct,e.reportAllChanges))(!0)})))}))},ft=function(t,e){st((function(e){var n=function(t){var e={waitingDuration:0,cacheDuration:0,dnsDuration:0,connectionDuration:0,requestDuration:0};if(t.entries.length){var n=t.entries[0],r=n.activationStart||0,i=Math.max((n.workerStart||n.fetchStart)-r,0),a=Math.max(n.domainLookupStart-r,0),o=Math.max(n.connectStart-r,0),c=Math.max(n.connectEnd-r,0);e={waitingDuration:i,cacheDuration:a-i,dnsDuration:o-a,connectionDuration:c-o,requestDuration:t.value-c,navigationEntry:n}}return Object.assign(t,{attribution:e})}(e);t(n)}),e)},dt={passive:!0,capture:!0},lt=new Date,mt=function(t,e){Z||(Z=e,$=t,tt=new Date,gt(removeEventListener),pt())},pt=function(){if($>=0&&$<tt-lt){var t={entryType:\"first-input\",name:Z.type,target:Z.target,cancelable:Z.cancelable,startTime:Z.timeStamp,processingStart:Z.timeStamp+$};et.forEach((function(e){e(t)})),et=[]}},vt=function(t){if(t.cancelable){var e=(t.timeStamp>1e12?new Date:performance.now())-t.timeStamp;\"pointerdown\"==t.type?function(t,e){var n=function(){mt(t,e),i()},r=function(){i()},i=function(){removeEventListener(\"pointerup\",n,dt),removeEventListener(\"pointercancel\",r,dt)};addEventListener(\"pointerup\",n,dt),addEventListener(\"pointercancel\",r,dt)}(e,t):mt(e,t)}},gt=function(t){[\"mousedown\",\"keydown\",\"touchstart\",\"pointerdown\"].forEach((function(e){return t(e,vt,dt)}))},ht=[100,300],Tt=function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"FID\"),a=function(t){t.startTime<r.firstHiddenTime&&(i.value=t.processingStart-t.startTime,i.entries.push(t),n(!0))},o=function(t){t.forEach(a)},c=d(\"first-input\",o);n=l(t,i,ht,e.reportAllChanges),c&&(p(v((function(){o(c.takeRecords()),c.disconnect()}))),u((function(){var r;i=f(\"FID\"),n=l(t,i,ht,e.reportAllChanges),et=[],$=-1,Z=null,gt(addEventListener),r=a,et.push(r),pt()})))}))},yt=function(t,e){Tt((function(e){var n=function(t){var e=t.entries[0],n={eventTarget:a(e.target),eventType:e.name,eventTime:e.startTime,eventEntry:e,loadState:r(e.startTime)};return Object.assign(t,{attribution:n})}(e);t(n)}),e)};export{M as CLSThresholds,L as FCPThresholds,ht as FIDThresholds,W as INPThresholds,it as LCPThresholds,ct as TTFBThresholds,D as onCLS,w as onFCP,yt as onFID,rt as onINP,ot as onLCP,ft as onTTFB};\n","import { onCLS, onFCP, onFID, onINP, onLCP, onTTFB } from 'web-vitals/attribution';\nimport { unknownString } from '@grafana/faro-core';\nimport { getItem, webStorageType } from '../../utils';\nimport { NAVIGATION_ID_STORAGE_KEY } from '../instrumentationConstants';\n// duplicate keys saved in variables to save bundle size\n// refs: https://github.com/grafana/faro-web-sdk/pull/595#discussion_r1615833968\nconst loadStateKey = 'load_state';\nconst timeToFirstByteKey = 'time_to_first_byte';\nexport class WebVitalsWithAttribution {\n    constructor(corePushMeasurement, webVitalConfig) {\n        this.corePushMeasurement = corePushMeasurement;\n        this.webVitalConfig = webVitalConfig;\n    }\n    initialize() {\n        this.measureCLS();\n        this.measureFCP();\n        this.measureFID();\n        this.measureINP();\n        this.measureLCP();\n        this.measureTTFB();\n    }\n    measureCLS() {\n        var _a;\n        onCLS((metric) => {\n            const { loadState, largestShiftValue, largestShiftTime, largestShiftTarget } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'largest_shift_value', largestShiftValue);\n            this.addIfPresent(values, 'largest_shift_time', largestShiftTime);\n            const context = this.buildInitialContext(metric);\n            this.addIfPresent(context, loadStateKey, loadState);\n            this.addIfPresent(context, 'largest_shift_target', largestShiftTarget);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    measureFCP() {\n        var _a;\n        onFCP((metric) => {\n            const { firstByteToFCP, timeToFirstByte, loadState } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'first_byte_to_fcp', firstByteToFCP);\n            this.addIfPresent(values, timeToFirstByteKey, timeToFirstByte);\n            const context = this.buildInitialContext(metric);\n            this.addIfPresent(context, loadStateKey, loadState);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    measureFID() {\n        var _a;\n        onFID((metric) => {\n            const { eventTime, eventTarget, eventType, loadState } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'event_time', eventTime);\n            const context = this.buildInitialContext(metric);\n            this.addIfPresent(context, 'event_target', eventTarget);\n            this.addIfPresent(context, 'event_type', eventType);\n            this.addIfPresent(context, loadStateKey, loadState);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    measureINP() {\n        var _a;\n        onINP((metric) => {\n            const { interactionTime, presentationDelay, inputDelay, processingDuration, nextPaintTime, loadState, interactionTarget, interactionType, } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'interaction_time', interactionTime);\n            this.addIfPresent(values, 'presentation_delay', presentationDelay);\n            this.addIfPresent(values, 'input_delay', inputDelay);\n            this.addIfPresent(values, 'processing_duration', processingDuration);\n            this.addIfPresent(values, 'next_paint_time', nextPaintTime);\n            const context = this.buildInitialContext(metric);\n            this.addIfPresent(context, loadStateKey, loadState);\n            this.addIfPresent(context, 'interaction_target', interactionTarget);\n            this.addIfPresent(context, 'interaction_type', interactionType);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    measureLCP() {\n        var _a;\n        onLCP((metric) => {\n            const { elementRenderDelay, resourceLoadDelay, resourceLoadDuration, timeToFirstByte, element } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'element_render_delay', elementRenderDelay);\n            this.addIfPresent(values, 'resource_load_delay', resourceLoadDelay);\n            this.addIfPresent(values, 'resource_load_duration', resourceLoadDuration);\n            this.addIfPresent(values, timeToFirstByteKey, timeToFirstByte);\n            const context = this.buildInitialContext(metric);\n            this.addIfPresent(context, 'element', element);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    measureTTFB() {\n        var _a;\n        onTTFB((metric) => {\n            const { dnsDuration, connectionDuration, requestDuration, waitingDuration, cacheDuration } = metric.attribution;\n            const values = this.buildInitialValues(metric);\n            this.addIfPresent(values, 'dns_duration', dnsDuration);\n            this.addIfPresent(values, 'connection_duration', connectionDuration);\n            this.addIfPresent(values, 'request_duration', requestDuration);\n            this.addIfPresent(values, 'waiting_duration', waitingDuration);\n            this.addIfPresent(values, 'cache_duration', cacheDuration);\n            const context = this.buildInitialContext(metric);\n            this.pushMeasurement(values, context);\n        }, { reportAllChanges: (_a = this.webVitalConfig) === null || _a === void 0 ? void 0 : _a.reportAllChanges });\n    }\n    buildInitialValues(metric) {\n        const indicator = metric.name.toLowerCase();\n        return {\n            [indicator]: metric.value,\n            delta: metric.delta,\n        };\n    }\n    buildInitialContext(metric) {\n        var _a;\n        const navigationEntryId = (_a = getItem(NAVIGATION_ID_STORAGE_KEY, webStorageType.session)) !== null && _a !== void 0 ? _a : unknownString;\n        return {\n            id: metric.id,\n            rating: metric.rating,\n            navigation_type: metric.navigationType,\n            navigation_entry_id: navigationEntryId,\n        };\n    }\n    pushMeasurement(values, context) {\n        const type = 'web-vitals';\n        this.corePushMeasurement({ type, values }, { context });\n    }\n    addIfPresent(source, key, metric) {\n        if (metric) {\n            source[key] = metric;\n        }\n    }\n}\n//# sourceMappingURL=webVitalsWithAttribution.js.map","import { BaseInstrumentation, VERSION } from '@grafana/faro-core';\nimport { WebVitalsBasic } from './webVitalsBasic';\nimport { WebVitalsWithAttribution } from './webVitalsWithAttribution';\nexport class WebVitalsInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-web-vitals';\n        this.version = VERSION;\n    }\n    initialize() {\n        this.logDebug('Initializing');\n        const webVitals = this.intializeWebVitalsInstrumentation();\n        webVitals.initialize();\n    }\n    intializeWebVitalsInstrumentation() {\n        var _a, _b, _c;\n        if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.trackWebVitalsAttribution) === false ||\n            ((_c = (_b = this.config) === null || _b === void 0 ? void 0 : _b.webVitalsInstrumentation) === null || _c === void 0 ? void 0 : _c.trackAttribution) === false) {\n            return new WebVitalsBasic(this.api.pushMeasurement, this.config.webVitalsInstrumentation);\n        }\n        return new WebVitalsWithAttribution(this.api.pushMeasurement, this.config.webVitalsInstrumentation);\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","import { faro, genShortID } from '@grafana/faro-core';\nexport function createSession(attributes) {\n    var _a, _b, _c, _d;\n    return {\n        id: (_d = (_c = (_b = (_a = faro.config) === null || _a === void 0 ? void 0 : _a.sessionTracking) === null || _b === void 0 ? void 0 : _b.generateSessionId) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : genShortID(),\n        attributes,\n    };\n}\n//# sourceMappingURL=createSession.js.map","import { BaseInstrumentation, dateNow, EVENT_SESSION_EXTEND, EVENT_SESSION_RESUME, EVENT_SESSION_START, VERSION, } from '@grafana/faro-core';\nimport { createSession } from '../../metas';\nimport { getSessionManagerByConfig, isSampled } from './sessionManager';\nimport { PersistentSessionsManager } from './sessionManager/PersistentSessionsManager';\nimport { createUserSessionObject, isUserSessionValid } from './sessionManager/sessionManagerUtils';\nexport class SessionInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-session';\n        this.version = VERSION;\n    }\n    sendSessionStartEvent(meta) {\n        var _a, _b;\n        const session = meta.session;\n        if (session && session.id !== ((_a = this.notifiedSession) === null || _a === void 0 ? void 0 : _a.id)) {\n            if (this.notifiedSession && this.notifiedSession.id === ((_b = session.attributes) === null || _b === void 0 ? void 0 : _b['previousSession'])) {\n                this.api.pushEvent(EVENT_SESSION_EXTEND, {}, undefined, { skipDedupe: true });\n                this.notifiedSession = session;\n                return;\n            }\n            this.notifiedSession = session;\n            // no need to add attributes and session id, they are included as part of meta\n            // automatically\n            this.api.pushEvent(EVENT_SESSION_START, {}, undefined, { skipDedupe: true });\n        }\n    }\n    createInitialSession(SessionManager, sessionsConfig) {\n        var _a, _b, _c, _d, _e, _f;\n        let storedUserSession = SessionManager.fetchUserSession();\n        if (sessionsConfig.persistent && sessionsConfig.maxSessionPersistenceTime && storedUserSession) {\n            const now = dateNow();\n            const shouldClearPersistentSession = storedUserSession.lastActivity < now - sessionsConfig.maxSessionPersistenceTime;\n            if (shouldClearPersistentSession) {\n                PersistentSessionsManager.removeUserSession();\n                storedUserSession = null;\n            }\n        }\n        let lifecycleType;\n        let initialSession;\n        if (isUserSessionValid(storedUserSession)) {\n            const sessionId = storedUserSession === null || storedUserSession === void 0 ? void 0 : storedUserSession.sessionId;\n            initialSession = createUserSessionObject({\n                sessionId,\n                isSampled: storedUserSession.isSampled || false,\n                started: storedUserSession === null || storedUserSession === void 0 ? void 0 : storedUserSession.started,\n            });\n            const storedUserSessionMeta = storedUserSession === null || storedUserSession === void 0 ? void 0 : storedUserSession.sessionMeta;\n            // For resumed sessions we want to merge the previous overrides with the configured ones.\n            // If the same key is present in both, the new one will override the old one.\n            const overrides = Object.assign(Object.assign({}, (_a = sessionsConfig.session) === null || _a === void 0 ? void 0 : _a.overrides), storedUserSessionMeta === null || storedUserSessionMeta === void 0 ? void 0 : storedUserSessionMeta.overrides);\n            initialSession.sessionMeta = Object.assign(Object.assign({}, sessionsConfig.session), { id: sessionId, attributes: Object.assign(Object.assign(Object.assign({}, (_b = sessionsConfig.session) === null || _b === void 0 ? void 0 : _b.attributes), storedUserSessionMeta === null || storedUserSessionMeta === void 0 ? void 0 : storedUserSessionMeta.attributes), { \n                    // For valid resumed sessions we do not want to recalculate the sampling decision on each init phase.\n                    isSampled: initialSession.isSampled.toString() }), overrides });\n            lifecycleType = EVENT_SESSION_RESUME;\n        }\n        else {\n            const sessionId = (_d = (_c = sessionsConfig.session) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : createSession().id;\n            initialSession = createUserSessionObject({\n                sessionId,\n                isSampled: isSampled(),\n            });\n            const overrides = (_e = sessionsConfig.session) === null || _e === void 0 ? void 0 : _e.overrides;\n            initialSession.sessionMeta = Object.assign({ id: sessionId, attributes: Object.assign({ isSampled: initialSession.isSampled.toString() }, (_f = sessionsConfig.session) === null || _f === void 0 ? void 0 : _f.attributes) }, (overrides ? { overrides } : {}));\n            lifecycleType = EVENT_SESSION_START;\n        }\n        return { initialSession, lifecycleType };\n    }\n    registerBeforeSendHook(SessionManager) {\n        var _a;\n        const { updateSession } = new SessionManager();\n        (_a = this.transports) === null || _a === void 0 ? void 0 : _a.addBeforeSendHooks((item) => {\n            var _a, _b, _c;\n            updateSession();\n            const attributes = (_a = item.meta.session) === null || _a === void 0 ? void 0 : _a.attributes;\n            if (attributes && (attributes === null || attributes === void 0 ? void 0 : attributes['isSampled']) === 'true') {\n                let newItem = JSON.parse(JSON.stringify(item));\n                const newAttributes = (_b = newItem.meta.session) === null || _b === void 0 ? void 0 : _b.attributes;\n                newAttributes === null || newAttributes === void 0 ? true : delete newAttributes['isSampled'];\n                if (Object.keys(newAttributes !== null && newAttributes !== void 0 ? newAttributes : {}).length === 0) {\n                    (_c = newItem.meta.session) === null || _c === void 0 ? true : delete _c.attributes;\n                }\n                return newItem;\n            }\n            return null;\n        });\n    }\n    initialize() {\n        this.logDebug('init session instrumentation');\n        const sessionTrackingConfig = this.config.sessionTracking;\n        if (sessionTrackingConfig === null || sessionTrackingConfig === void 0 ? void 0 : sessionTrackingConfig.enabled) {\n            const SessionManager = getSessionManagerByConfig(sessionTrackingConfig);\n            this.registerBeforeSendHook(SessionManager);\n            const { initialSession, lifecycleType } = this.createInitialSession(SessionManager, sessionTrackingConfig);\n            SessionManager.storeUserSession(initialSession);\n            const initialSessionMeta = initialSession.sessionMeta;\n            this.notifiedSession = initialSessionMeta;\n            this.api.setSession(initialSessionMeta);\n            if (lifecycleType === EVENT_SESSION_START) {\n                this.api.pushEvent(EVENT_SESSION_START, {}, undefined, { skipDedupe: true });\n            }\n            if (lifecycleType === EVENT_SESSION_RESUME) {\n                this.api.pushEvent(EVENT_SESSION_RESUME, {}, undefined, { skipDedupe: true });\n            }\n        }\n        this.metas.addListener(this.sendSessionStartEvent.bind(this));\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","import { BaseInstrumentation, EVENT_VIEW_CHANGED, unknownString, VERSION } from '@grafana/faro-core';\n// all this does is send VIEW_CHANGED event\nexport class ViewInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super(...arguments);\n        this.name = '@grafana/faro-web-sdk:instrumentation-view';\n        this.version = VERSION;\n    }\n    sendViewChangedEvent(meta) {\n        var _a, _b, _c, _d;\n        const view = meta.view;\n        if (view && view.name !== ((_a = this.notifiedView) === null || _a === void 0 ? void 0 : _a.name)) {\n            this.api.pushEvent(EVENT_VIEW_CHANGED, {\n                fromView: (_c = (_b = this.notifiedView) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : unknownString,\n                toView: (_d = view.name) !== null && _d !== void 0 ? _d : unknownString,\n            }, undefined, { skipDedupe: true });\n            this.notifiedView = view;\n        }\n    }\n    initialize() {\n        this.metas.addListener(this.sendViewChangedEvent.bind(this));\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","import { BaseInstrumentation, stringifyObjectValues, VERSION } from '@grafana/faro-core';\nexport class CSPInstrumentation extends BaseInstrumentation {\n    constructor() {\n        super();\n        this.name = '@grafana/faro-web-sdk:instrumentation-csp';\n        this.version = VERSION;\n    }\n    initialize() {\n        document.addEventListener('securitypolicyviolation', this.securitypolicyviolationHandler.bind(this));\n    }\n    destroy() {\n        document.removeEventListener('securitypolicyviolation', this.securitypolicyviolationHandler);\n    }\n    securitypolicyviolationHandler(ev) {\n        this.api.pushEvent('securitypolicyviolation', stringifyObjectValues(ev));\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","import { allLogLevels, BaseInstrumentation, defaultErrorArgsSerializer, defaultLogArgsSerializer, LogLevel, VERSION, } from '@grafana/faro-core';\nimport { getDetailsFromConsoleErrorArgs } from '../errors/getErrorDetails';\nexport class ConsoleInstrumentation extends BaseInstrumentation {\n    constructor(options = {}) {\n        super();\n        this.options = options;\n        this.name = '@grafana/faro-web-sdk:instrumentation-console';\n        this.version = VERSION;\n        this.errorSerializer = defaultLogArgsSerializer;\n    }\n    initialize() {\n        var _a, _b, _c, _d;\n        this.options = Object.assign(Object.assign({}, this.options), this.config.consoleInstrumentation);\n        const serializeErrors = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.serializeErrors) || !!((_b = this.options) === null || _b === void 0 ? void 0 : _b.errorSerializer);\n        this.errorSerializer = serializeErrors\n            ? ((_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.errorSerializer) !== null && _d !== void 0 ? _d : defaultErrorArgsSerializer)\n            : defaultLogArgsSerializer;\n        allLogLevels\n            .filter((level) => { var _a, _b; return !((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.disabledLevels) !== null && _b !== void 0 ? _b : ConsoleInstrumentation.defaultDisabledLevels).includes(level); })\n            .forEach((level) => {\n            /* eslint-disable-next-line no-console */\n            console[level] = (...args) => {\n                var _a, _b;\n                try {\n                    if (level === LogLevel.ERROR && !((_a = this.options) === null || _a === void 0 ? void 0 : _a.consoleErrorAsLog)) {\n                        const { value, type, stackFrames } = getDetailsFromConsoleErrorArgs(args, this.errorSerializer);\n                        if (value && !type && !stackFrames) {\n                            this.api.pushError(new Error(ConsoleInstrumentation.consoleErrorPrefix + value));\n                            return;\n                        }\n                        this.api.pushError(new Error(ConsoleInstrumentation.consoleErrorPrefix + value), { type, stackFrames });\n                    }\n                    else if (level === LogLevel.ERROR && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.consoleErrorAsLog)) {\n                        const { value, type, stackFrames } = getDetailsFromConsoleErrorArgs(args, this.errorSerializer);\n                        this.api.pushLog(value ? [ConsoleInstrumentation.consoleErrorPrefix + value] : args, {\n                            level,\n                            context: {\n                                value: value !== null && value !== void 0 ? value : '',\n                                type: type !== null && type !== void 0 ? type : '',\n                                stackFrames: (stackFrames === null || stackFrames === void 0 ? void 0 : stackFrames.length) ? defaultErrorArgsSerializer(stackFrames) : '',\n                            },\n                        });\n                    }\n                    else {\n                        this.api.pushLog(args, { level });\n                    }\n                }\n                catch (err) {\n                    this.logError(err);\n                }\n                finally {\n                    this.unpatchedConsole[level](...args);\n                }\n            };\n        });\n    }\n}\nConsoleInstrumentation.defaultDisabledLevels = [LogLevel.DEBUG, LogLevel.TRACE, LogLevel.LOG];\nConsoleInstrumentation.consoleErrorPrefix = 'console.error: ';\n//# sourceMappingURL=instrumentation.js.map","import { ConsoleInstrumentation, CSPInstrumentation, ErrorsInstrumentation, PerformanceInstrumentation, SessionInstrumentation, UserActionInstrumentation, ViewInstrumentation, WebVitalsInstrumentation, } from '../instrumentations';\nexport function getWebInstrumentations(options = {}) {\n    const instrumentations = [\n        new UserActionInstrumentation(),\n        new ErrorsInstrumentation(),\n        new WebVitalsInstrumentation(),\n        new SessionInstrumentation(),\n        new ViewInstrumentation(),\n    ];\n    if (options.enablePerformanceInstrumentation !== false) {\n        // unshift to ensure that initialization starts before the other instrumentations\n        instrumentations.unshift(new PerformanceInstrumentation());\n    }\n    if (options.enableContentSecurityPolicyInstrumentation !== false) {\n        instrumentations.push(new CSPInstrumentation());\n    }\n    if (options.captureConsole !== false) {\n        instrumentations.push(new ConsoleInstrumentation({\n            disabledLevels: options.captureConsoleDisabledLevels,\n        }));\n    }\n    return instrumentations;\n}\n//# sourceMappingURL=getWebInstrumentations.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { createInternalLogger, defaultBatchingConfig, defaultGlobalObjectKey, defaultInternalLoggerLevel, defaultLogArgsSerializer, defaultUnpatchedConsole, isBoolean, isEmpty, isObject, } from '@grafana/faro-core';\nimport { defaultEventDomain } from '../consts';\nimport { parseStacktrace } from '../instrumentations';\nimport { defaultSessionTrackingConfig } from '../instrumentations/session';\nimport { userActionDataAttribute } from '../instrumentations/userActions/const';\nimport { browserMeta } from '../metas';\nimport { k6Meta } from '../metas/k6';\nimport { createPageMeta } from '../metas/page';\nimport { FetchTransport } from '../transports';\nimport { getWebInstrumentations } from './getWebInstrumentations';\nexport function makeCoreConfig(browserConfig) {\n    var _a;\n    const transports = [];\n    const internalLogger = createInternalLogger(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);\n    if (browserConfig.transports) {\n        if (browserConfig.url || browserConfig.apiKey) {\n            internalLogger.error('if \"transports\" is defined, \"url\" and \"apiKey\" should not be defined');\n        }\n        transports.push(...browserConfig.transports);\n    }\n    else if (browserConfig.url) {\n        transports.push(new FetchTransport({\n            url: browserConfig.url,\n            apiKey: browserConfig.apiKey,\n        }));\n    }\n    else {\n        internalLogger.error('either \"url\" or \"transports\" must be defined');\n    }\n    const { \n    // properties with default values\n    dedupe = true, eventDomain = defaultEventDomain, globalObjectKey = defaultGlobalObjectKey, instrumentations = getWebInstrumentations(), internalLoggerLevel = defaultInternalLoggerLevel, isolate = false, logArgsSerializer = defaultLogArgsSerializer, metas = createDefaultMetas(browserConfig), paused = false, preventGlobalExposure = false, unpatchedConsole = defaultUnpatchedConsole, trackUserActionsPreview = false, trackUserActionsDataAttributeName = userActionDataAttribute, url: browserConfigUrl } = browserConfig, \n    // Properties without default values or which aren't used to create derived config\n    restProperties = __rest(browserConfig, [\"dedupe\", \"eventDomain\", \"globalObjectKey\", \"instrumentations\", \"internalLoggerLevel\", \"isolate\", \"logArgsSerializer\", \"metas\", \"paused\", \"preventGlobalExposure\", \"unpatchedConsole\", \"trackUserActionsPreview\", \"trackUserActionsDataAttributeName\", \"url\"]);\n    return Object.assign(Object.assign({}, restProperties), { batching: Object.assign(Object.assign({}, defaultBatchingConfig), browserConfig.batching), dedupe: dedupe, globalObjectKey, instrumentations: getFilteredInstrumentations(instrumentations, browserConfig), internalLoggerLevel,\n        isolate,\n        logArgsSerializer,\n        metas,\n        parseStacktrace,\n        paused,\n        preventGlobalExposure,\n        transports,\n        unpatchedConsole,\n        eventDomain, ignoreUrls: [\n            ...((_a = browserConfig.ignoreUrls) !== null && _a !== void 0 ? _a : []),\n            // ignore configured cloud collector url by default\n            ...(browserConfigUrl ? [browserConfigUrl] : []),\n            // Try our best to exclude collector URLs form other Faro instances. By default these are URLs ending with /collect or /collect/ followed by alphanumeric characters.\n            /\\/collect(?:\\/[\\w]*)?$/,\n        ], sessionTracking: Object.assign(Object.assign(Object.assign({}, defaultSessionTrackingConfig), browserConfig.sessionTracking), crateSessionMeta({\n            trackGeolocation: browserConfig.trackGeolocation,\n            sessionTracking: browserConfig.sessionTracking,\n        })), trackUserActionsPreview,\n        trackUserActionsDataAttributeName });\n}\nfunction getFilteredInstrumentations(instrumentations, { trackUserActionsPreview }) {\n    return instrumentations.filter((instr) => {\n        if (instr.name === '@grafana/faro-web-sdk:instrumentation-user-action' && !trackUserActionsPreview) {\n            return false;\n        }\n        return true;\n    });\n}\nfunction createDefaultMetas(browserConfig) {\n    var _a, _b;\n    const { page, generatePageId } = (_a = browserConfig === null || browserConfig === void 0 ? void 0 : browserConfig.pageTracking) !== null && _a !== void 0 ? _a : {};\n    const initialMetas = [\n        browserMeta,\n        createPageMeta({ generatePageId, initialPageMeta: page }),\n        ...((_b = browserConfig.metas) !== null && _b !== void 0 ? _b : []),\n    ];\n    const isK6BrowserSession = isObject(window.k6);\n    if (isK6BrowserSession) {\n        return [...initialMetas, k6Meta];\n    }\n    return initialMetas;\n}\nfunction crateSessionMeta({ trackGeolocation, sessionTracking, }) {\n    var _a;\n    const overrides = {};\n    if (isBoolean(trackGeolocation)) {\n        overrides.geoLocationTrackingEnabled = trackGeolocation;\n    }\n    if (isEmpty(overrides)) {\n        return {};\n    }\n    return {\n        session: Object.assign(Object.assign({}, ((_a = sessionTracking === null || sessionTracking === void 0 ? void 0 : sessionTracking.session) !== null && _a !== void 0 ? _a : {})), { overrides }),\n    };\n}\n//# sourceMappingURL=makeCoreConfig.js.map","import { initializeFaro as coreInit } from '@grafana/faro-core';\nimport { makeCoreConfig } from './config';\nexport function initializeFaro(config) {\n    const coreConfig = makeCoreConfig(config);\n    if (!coreConfig) {\n        return undefined;\n    }\n    return coreInit(coreConfig);\n}\n//# sourceMappingURL=initialize.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nconst SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState {\n    _internalState = new Map();\n    constructor(rawTraceState) {\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    set(key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        const traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    }\n    unset(key) {\n        const traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    }\n    get(key) {\n        return this._internalState.get(key);\n    }\n    serialize() {\n        return this._keys()\n            .reduce((agg, key) => {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    }\n    _parse(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce((agg, part) => {\n            const listMember = part.trim(); // Optional Whitespace (OWS) handling\n            const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                const key = listMember.slice(0, i);\n                const value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    }\n    _keys() {\n        return Array.from(this._internalState.keys()).reverse();\n    }\n    _clone() {\n        const traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    }\n}\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(`^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`);\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    const match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator {\n    inject(context, carrier, setter) {\n        const spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        const traceParent = `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    }\n    extract(context, carrier, getter) {\n        const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        const traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        const spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            const state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    }\n    fields() {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createGauge}\n     */\n    NoopMeter.prototype.createGauge = function (_name, _options) {\n        return NOOP_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\nexport { NoopUpDownCounterMetric };\nvar NoopGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopGaugeMetric, _super);\n    function NoopGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };\n    return NoopGaugeMetric;\n}(NoopMetric));\nexport { NoopGaugeMetric };\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER } from './NoopMeter';\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\nexport { NoopMeterProvider };\nexport var NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return registerGlobal(API_NAME, provider, DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n//# sourceMappingURL=metrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport var metrics = MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api and\n// @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nexport const GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\nexport const _global = _globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter(requiredVersion, instance, fallback) {\n    return (version) => version === requiredVersion ? instance : fallback;\n}\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport const API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class NoopLogger {\n    emit(_logRecord) { }\n}\nexport const NOOP_LOGGER = new NoopLogger();\n//# sourceMappingURL=NoopLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopLogger } from './NoopLogger';\nexport class NoopLoggerProvider {\n    getLogger(_name, _version, _options) {\n        return new NoopLogger();\n    }\n}\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n//# sourceMappingURL=NoopLoggerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_LOGGER } from './NoopLogger';\nexport class ProxyLogger {\n    constructor(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    /**\n     * Emit a log record. This method should only be used by log appenders.\n     *\n     * @param logRecord\n     */\n    emit(logRecord) {\n        this._getLogger().emit(logRecord);\n    }\n    /**\n     * Try to get a logger from the proxy logger provider.\n     * If the proxy logger provider has no delegate, return a noop logger.\n     */\n    _getLogger() {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        const logger = this._provider.getDelegateLogger(this.name, this.version, this.options);\n        if (!logger) {\n            return NOOP_LOGGER;\n        }\n        this._delegate = logger;\n        return this._delegate;\n    }\n}\n//# sourceMappingURL=ProxyLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_LOGGER_PROVIDER } from './NoopLoggerProvider';\nimport { ProxyLogger } from './ProxyLogger';\nexport class ProxyLoggerProvider {\n    getLogger(name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateLogger(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyLogger(this, name, version, options));\n    }\n    getDelegate() {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_LOGGER_PROVIDER;\n    }\n    /**\n     * Set the delegate logger provider\n     */\n    setDelegate(delegate) {\n        this._delegate = delegate;\n    }\n    getDelegateLogger(name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getLogger(name, version, options);\n    }\n}\n//# sourceMappingURL=ProxyLoggerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_LOGS_API_KEY, _global, makeGetter, } from '../internal/global-utils';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { ProxyLoggerProvider } from '../ProxyLoggerProvider';\nexport class LogsAPI {\n    constructor() {\n        this._proxyLoggerProvider = new ProxyLoggerProvider();\n    }\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new LogsAPI();\n        }\n        return this._instance;\n    }\n    setGlobalLoggerProvider(provider) {\n        if (_global[GLOBAL_LOGS_API_KEY]) {\n            return this.getLoggerProvider();\n        }\n        _global[GLOBAL_LOGS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_LOGGER_PROVIDER);\n        this._proxyLoggerProvider.setDelegate(provider);\n        return provider;\n    }\n    /**\n     * Returns the global logger provider.\n     *\n     * @returns LoggerProvider\n     */\n    getLoggerProvider() {\n        var _a, _b;\n        return ((_b = (_a = _global[GLOBAL_LOGS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : this._proxyLoggerProvider);\n    }\n    /**\n     * Returns a logger from the global logger provider.\n     *\n     * @returns Logger\n     */\n    getLogger(name, version, options) {\n        return this.getLoggerProvider().getLogger(name, version, options);\n    }\n    /** Remove the global logger provider */\n    disable() {\n        delete _global[GLOBAL_LOGS_API_KEY];\n        this._proxyLoggerProvider = new ProxyLoggerProvider();\n    }\n}\n//# sourceMappingURL=logs.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { SeverityNumber } from './types/LogRecord';\nexport { NOOP_LOGGER, NoopLogger } from './NoopLogger';\nexport { NOOP_LOGGER_PROVIDER, NoopLoggerProvider } from './NoopLoggerProvider';\nexport { ProxyLogger } from './ProxyLogger';\nexport { ProxyLoggerProvider } from './ProxyLoggerProvider';\nimport { LogsAPI } from './api/logs';\nexport const logs = LogsAPI.getInstance();\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider) {\n    for (let i = 0, j = instrumentations.length; i < j; i++) {\n        const instrumentation = instrumentations[i];\n        if (tracerProvider) {\n            instrumentation.setTracerProvider(tracerProvider);\n        }\n        if (meterProvider) {\n            instrumentation.setMeterProvider(meterProvider);\n        }\n        if (loggerProvider && instrumentation.setLoggerProvider) {\n            instrumentation.setLoggerProvider(loggerProvider);\n        }\n        // instrumentations have been already enabled during creation\n        // so enable only if user prevented that by setting enabled to false\n        // this is to prevent double enabling but when calling register all\n        // instrumentations should be now enabled\n        if (!instrumentation.getConfig().enabled) {\n            instrumentation.enable();\n        }\n    }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(instrumentations) {\n    instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n//# sourceMappingURL=autoLoaderUtils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, metrics } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport { disableInstrumentations, enableInstrumentations, } from './autoLoaderUtils';\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(options) {\n    const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n    const meterProvider = options.meterProvider || metrics.getMeterProvider();\n    const loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n    const instrumentations = options.instrumentations?.flat() ?? [];\n    enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider);\n    return () => {\n        disableInstrumentations(instrumentations);\n    };\n}\n//# sourceMappingURL=autoLoader.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '2.1.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\n//# sourceMappingURL=semconv.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../../version';\nimport { ATTR_TELEMETRY_SDK_NAME, ATTR_TELEMETRY_SDK_LANGUAGE, TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS, ATTR_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { ATTR_PROCESS_RUNTIME_NAME } from '../../semconv';\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n    [ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',\n    [ATTR_PROCESS_RUNTIME_NAME]: 'browser',\n    [ATTR_TELEMETRY_SDK_LANGUAGE]: TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,\n    [ATTR_TELEMETRY_SDK_VERSION]: VERSION,\n};\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const isPromiseLike = (val) => {\n    return (val !== null &&\n        typeof val === 'object' &&\n        typeof val.then === 'function');\n};\nexport function identity(_) {\n    return _;\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ATTR_SERVICE_NAME, ATTR_TELEMETRY_SDK_LANGUAGE, ATTR_TELEMETRY_SDK_NAME, ATTR_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { defaultServiceName } from './platform';\nimport { isPromiseLike } from './utils';\nclass ResourceImpl {\n    _rawAttributes;\n    _asyncAttributesPending = false;\n    _schemaUrl;\n    _memoizedAttributes;\n    static FromAttributeList(attributes, options) {\n        const res = new ResourceImpl({}, options);\n        res._rawAttributes = guardedRawAttributes(attributes);\n        res._asyncAttributesPending =\n            attributes.filter(([_, val]) => isPromiseLike(val)).length > 0;\n        return res;\n    }\n    constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    resource, options) {\n        const attributes = resource.attributes ?? {};\n        this._rawAttributes = Object.entries(attributes).map(([k, v]) => {\n            if (isPromiseLike(v)) {\n                // side-effect\n                this._asyncAttributesPending = true;\n            }\n            return [k, v];\n        });\n        this._rawAttributes = guardedRawAttributes(this._rawAttributes);\n        this._schemaUrl = validateSchemaUrl(options?.schemaUrl);\n    }\n    get asyncAttributesPending() {\n        return this._asyncAttributesPending;\n    }\n    async waitForAsyncAttributes() {\n        if (!this.asyncAttributesPending) {\n            return;\n        }\n        for (let i = 0; i < this._rawAttributes.length; i++) {\n            const [k, v] = this._rawAttributes[i];\n            this._rawAttributes[i] = [k, isPromiseLike(v) ? await v : v];\n        }\n        this._asyncAttributesPending = false;\n    }\n    get attributes() {\n        if (this.asyncAttributesPending) {\n            diag.error('Accessing resource attributes before async attributes settled');\n        }\n        if (this._memoizedAttributes) {\n            return this._memoizedAttributes;\n        }\n        const attrs = {};\n        for (const [k, v] of this._rawAttributes) {\n            if (isPromiseLike(v)) {\n                diag.debug(`Unsettled resource attribute ${k} skipped`);\n                continue;\n            }\n            if (v != null) {\n                attrs[k] ??= v;\n            }\n        }\n        // only memoize output if all attributes are settled\n        if (!this._asyncAttributesPending) {\n            this._memoizedAttributes = attrs;\n        }\n        return attrs;\n    }\n    getRawAttributes() {\n        return this._rawAttributes;\n    }\n    get schemaUrl() {\n        return this._schemaUrl;\n    }\n    merge(resource) {\n        if (resource == null)\n            return this;\n        // Order is important\n        // Spec states incoming attributes override existing attributes\n        const mergedSchemaUrl = mergeSchemaUrl(this, resource);\n        const mergedOptions = mergedSchemaUrl\n            ? { schemaUrl: mergedSchemaUrl }\n            : undefined;\n        return ResourceImpl.FromAttributeList([...resource.getRawAttributes(), ...this.getRawAttributes()], mergedOptions);\n    }\n}\nexport function resourceFromAttributes(attributes, options) {\n    return ResourceImpl.FromAttributeList(Object.entries(attributes), options);\n}\nexport function resourceFromDetectedResource(detectedResource, options) {\n    return new ResourceImpl(detectedResource, options);\n}\nexport function emptyResource() {\n    return resourceFromAttributes({});\n}\nexport function defaultResource() {\n    return resourceFromAttributes({\n        [ATTR_SERVICE_NAME]: defaultServiceName(),\n        [ATTR_TELEMETRY_SDK_LANGUAGE]: SDK_INFO[ATTR_TELEMETRY_SDK_LANGUAGE],\n        [ATTR_TELEMETRY_SDK_NAME]: SDK_INFO[ATTR_TELEMETRY_SDK_NAME],\n        [ATTR_TELEMETRY_SDK_VERSION]: SDK_INFO[ATTR_TELEMETRY_SDK_VERSION],\n    });\n}\nfunction guardedRawAttributes(attributes) {\n    return attributes.map(([k, v]) => {\n        if (isPromiseLike(v)) {\n            return [\n                k,\n                v.catch(err => {\n                    diag.debug('promise rejection for resource attribute: %s - %s', k, err);\n                    return undefined;\n                }),\n            ];\n        }\n        return [k, v];\n    });\n}\nfunction validateSchemaUrl(schemaUrl) {\n    if (typeof schemaUrl === 'string' || schemaUrl === undefined) {\n        return schemaUrl;\n    }\n    diag.warn('Schema URL must be string or undefined, got %s. Schema URL will be ignored.', schemaUrl);\n    return undefined;\n}\nfunction mergeSchemaUrl(old, updating) {\n    const oldSchemaUrl = old?.schemaUrl;\n    const updatingSchemaUrl = updating?.schemaUrl;\n    const isOldEmpty = oldSchemaUrl === undefined || oldSchemaUrl === '';\n    const isUpdatingEmpty = updatingSchemaUrl === undefined || updatingSchemaUrl === '';\n    if (isOldEmpty) {\n        return updatingSchemaUrl;\n    }\n    if (isUpdatingEmpty) {\n        return oldSchemaUrl;\n    }\n    if (oldSchemaUrl === updatingSchemaUrl) {\n        return oldSchemaUrl;\n    }\n    diag.warn('Schema URL merge conflict: old resource has \"%s\", updating resource has \"%s\". Resulting resource will have undefined Schema URL.', oldSchemaUrl, updatingSchemaUrl);\n    return undefined;\n}\n//# sourceMappingURL=ResourceImpl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    const proto = getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    const isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    let unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch {\n        // silence\n    }\n    const result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nconst MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args) {\n    let result = args.shift();\n    const objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level = 0, objects) {\n    let result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (let i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                const twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    const obj1 = result[key];\n                    const obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            const arr1 = objects.get(obj1) || [];\n                            const arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key });\n                            arr2.push({ obj: two, key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    const arr = objects.get(obj[key]) || [];\n    for (let i = 0, j = arr.length; i < j; i++) {\n        const info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    const out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    for (const [key, val] of Object.entries(attributes)) {\n        if (!isAttributeKey(key)) {\n            diag.warn(`Invalid attribute key: ${key}`);\n            continue;\n        }\n        if (!isAttributeValue(val)) {\n            diag.warn(`Invalid attribute value set for key: ${key}`);\n            continue;\n        }\n        if (Array.isArray(val)) {\n            out[key] = val.slice();\n        }\n        else {\n            out[key] = val;\n        }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    let type;\n    for (const element of arr) {\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    const epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    const seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    let timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        const perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    const timeOrigin = millisToHrTime(getTimeOrigin());\n    const now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    let seconds = endTime[0] - startTime[0];\n    let nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    const precision = NANOSECOND_DIGITS;\n    const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n    const nanoString = tmp.substring(tmp.length - precision - 1);\n    const date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    const out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, SpanStatusCode, } from '@opentelemetry/api';\nimport { addHrTimes, millisToHrTime, getTimeOrigin, hrTime, hrTimeDuration, isAttributeValue, isTimeInput, isTimeInputHrTime, otperformance, sanitizeAttributes, } from '@opentelemetry/core';\nimport { ATTR_EXCEPTION_MESSAGE, ATTR_EXCEPTION_STACKTRACE, ATTR_EXCEPTION_TYPE, } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nexport class SpanImpl {\n    // Below properties are included to implement ReadableSpan for export\n    // purposes but are not intended to be written-to directly.\n    _spanContext;\n    kind;\n    parentSpanContext;\n    attributes = {};\n    links = [];\n    events = [];\n    startTime;\n    resource;\n    instrumentationScope;\n    _droppedAttributesCount = 0;\n    _droppedEventsCount = 0;\n    _droppedLinksCount = 0;\n    name;\n    status = {\n        code: SpanStatusCode.UNSET,\n    };\n    endTime = [0, 0];\n    _ended = false;\n    _duration = [-1, -1];\n    _spanProcessor;\n    _spanLimits;\n    _attributeValueLengthLimit;\n    _performanceStartTime;\n    _performanceOffset;\n    _startTimeProvided;\n    /**\n     * Constructs a new SpanImpl instance.\n     */\n    constructor(opts) {\n        const now = Date.now();\n        this._spanContext = opts.spanContext;\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = opts.startTime != null;\n        this._spanLimits = opts.spanLimits;\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        this._spanProcessor = opts.spanProcessor;\n        this.name = opts.name;\n        this.parentSpanContext = opts.parentSpanContext;\n        this.kind = opts.kind;\n        this.links = opts.links || [];\n        this.startTime = this._getTime(opts.startTime ?? now);\n        this.resource = opts.resource;\n        this.instrumentationScope = opts.scope;\n        if (opts.attributes != null) {\n            this.setAttributes(opts.attributes);\n        }\n        this._spanProcessor.onStart(this, opts.context);\n    }\n    spanContext() {\n        return this._spanContext;\n    }\n    setAttribute(key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            diag.warn(`Invalid attribute key: ${key}`);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            diag.warn(`Invalid attribute value set for key: ${key}`);\n            return this;\n        }\n        const { attributeCountLimit } = this._spanLimits;\n        if (attributeCountLimit !== undefined &&\n            Object.keys(this.attributes).length >= attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    }\n    setAttributes(attributes) {\n        for (const [k, v] of Object.entries(attributes)) {\n            this.setAttribute(k, v);\n        }\n        return this;\n    }\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    addEvent(name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        const { eventCountLimit } = this._spanLimits;\n        if (eventCountLimit === 0) {\n            diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (eventCountLimit !== undefined &&\n            this.events.length >= eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        const attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name,\n            attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    }\n    addLink(link) {\n        this.links.push(link);\n        return this;\n    }\n    addLinks(links) {\n        this.links.push(...links);\n        return this;\n    }\n    setStatus(status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = { ...status };\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            diag.warn(`Dropping invalid status.message of type '${typeof status.message}', expected 'string'`);\n            delete this.status.message;\n        }\n        return this;\n    }\n    updateName(name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    }\n    end(endTime) {\n        if (this._isSpanEnded()) {\n            diag.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            diag.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`);\n        }\n        this._spanProcessor.onEnd(this);\n    }\n    _getTime(inp) {\n        if (typeof inp === 'number' && inp <= otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        const msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    }\n    isRecording() {\n        return this._ended === false;\n    }\n    recordException(exception, time) {\n        const attributes = {};\n        if (typeof exception === 'string') {\n            attributes[ATTR_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[ATTR_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[ATTR_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[ATTR_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[ATTR_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[ATTR_EXCEPTION_TYPE] || attributes[ATTR_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            diag.warn(`Failed to record an exception ${exception}`);\n        }\n    }\n    get duration() {\n        return this._duration;\n    }\n    get ended() {\n        return this._ended;\n    }\n    get droppedAttributesCount() {\n        return this._droppedAttributesCount;\n    }\n    get droppedEventsCount() {\n        return this._droppedEventsCount;\n    }\n    get droppedLinksCount() {\n        return this._droppedLinksCount;\n    }\n    _isSpanEnded() {\n        if (this._ended) {\n            const error = new Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);\n            diag.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`, error);\n        }\n        return this._ended;\n    }\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    _truncateToLimitUtil(value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    }\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    _truncateToSize(value) {\n        const limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            diag.warn(`Attribute value limit must be positive, got ${limit}`);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(val => typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val);\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    }\n}\n//# sourceMappingURL=Span.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function getStringFromEnv(_) {\n    return undefined;\n}\nexport function getBooleanFromEnv(_) {\n    return undefined;\n}\nexport function getNumberFromEnv(_) {\n    return undefined;\n}\nexport function getStringListFromEnv(_) {\n    return undefined;\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler {\n    shouldSample() {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return 'AlwaysOffSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler {\n    shouldSample() {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    }\n    toString() {\n        return 'AlwaysOnSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return (ex) => {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    const result = {};\n    let current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(propertyName => {\n            if (result[propertyName])\n                return;\n            const value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler {\n    _root;\n    _remoteParentSampled;\n    _remoteParentNotSampled;\n    _localParentSampled;\n    _localParentNotSampled;\n    constructor(config) {\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            config.remoteParentSampled ?? new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            config.remoteParentNotSampled ?? new AlwaysOffSampler();\n        this._localParentSampled =\n            config.localParentSampled ?? new AlwaysOnSampler();\n        this._localParentNotSampled =\n            config.localParentNotSampled ?? new AlwaysOffSampler();\n    }\n    shouldSample(context, traceId, spanName, spanKind, attributes, links) {\n        const parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    toString() {\n        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n    }\n}\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler {\n    _ratio;\n    _upperBound;\n    constructor(_ratio = 0) {\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    shouldSample(context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `TraceIdRatioBased{${this._ratio}}`;\n    }\n    _normalize(ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    }\n    _accumulate(traceId) {\n        let accumulation = 0;\n        for (let i = 0; i < traceId.length / 8; i++) {\n            const pos = i * 8;\n            const part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    }\n}\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getNumberFromEnv, getStringFromEnv } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\nconst DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n            linkCountLimit: getNumberFromEnv('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n            eventCountLimit: getNumberFromEnv('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerEventCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerLinkCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nexport function buildSamplerFromEnv() {\n    const sampler = getStringFromEnv('OTEL_TRACES_SAMPLER') ??\n        TracesSamplerValues.ParentBasedAlwaysOn;\n    switch (sampler) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv()),\n            });\n        default:\n            diag.error(`OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${TracesSamplerValues.ParentBasedAlwaysOn}\".`);\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n    }\n}\nfunction getSamplerProbabilityFromEnv() {\n    const probability = getNumberFromEnv('OTEL_TRACES_SAMPLER_ARG');\n    if (probability == null) {\n        diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { getNumberFromEnv } from '@opentelemetry/core';\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    const perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    const DEFAULT_CONFIG = loadDefaultConfig();\n    const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    const spanLimits = Object.assign({}, userConfig.spanLimits);\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        userConfig.spanLimits?.attributeCountLimit ??\n            userConfig.generalLimits?.attributeCountLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n            DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        userConfig.spanLimits?.attributeValueLengthLimit ??\n            userConfig.generalLimits?.attributeValueLengthLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits });\n}\n//# sourceMappingURL=utility.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nexport class RandomIdGenerator {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\nconst SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (let i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer {\n    _sampler;\n    _generalLimits;\n    _spanLimits;\n    _idGenerator;\n    instrumentationScope;\n    _resource;\n    _spanProcessor;\n    /**\n     * Constructs a new Tracer instance.\n     */\n    constructor(instrumentationScope, config, resource, spanProcessor) {\n        const localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this._resource = resource;\n        this._spanProcessor = spanProcessor;\n        this.instrumentationScope = instrumentationScope;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    startSpan(name, options = {}, context = api.context.active()) {\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        const parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        const parentSpanContext = parentSpan?.spanContext();\n        const spanId = this._idGenerator.generateSpanId();\n        let validParentSpanContext;\n        let traceId;\n        let traceState;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            validParentSpanContext = parentSpanContext;\n        }\n        const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n        const links = (options.links ?? []).map(link => {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        const attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = samplingResult.traceState ?? traceState;\n        const traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        const spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        const span = new SpanImpl({\n            resource: this._resource,\n            scope: this.instrumentationScope,\n            context,\n            spanContext,\n            name,\n            kind: spanKind,\n            links,\n            parentSpanContext: validParentSpanContext,\n            attributes: initAttributes,\n            startTime: options.startTime,\n            spanProcessor: this._spanProcessor,\n            spanLimits: this._spanLimits,\n        });\n        return span;\n    }\n    startActiveSpan(name, arg2, arg3, arg4) {\n        let opts;\n        let ctx;\n        let fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        const parentContext = ctx ?? api.context.active();\n        const span = this.startSpan(name, opts, parentContext);\n        const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    }\n    /** Returns the active {@link GeneralLimits}. */\n    getGeneralLimits() {\n        return this._generalLimits;\n    }\n    /** Returns the active {@link SpanLimits}. */\n    getSpanLimits() {\n        return this._spanLimits;\n    }\n}\n//# sourceMappingURL=Tracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor {\n    _spanProcessors;\n    constructor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    forceFlush() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(resolve => {\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(error => {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    }\n    onStart(span, context) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onStart(span, context);\n        }\n    }\n    onEnd(span) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onEnd(span);\n        }\n    }\n    shutdown() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise((resolve, reject) => {\n            Promise.all(promises).then(() => {\n                resolve();\n            }, reject);\n        });\n    }\n}\n//# sourceMappingURL=MultiSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { merge } from '@opentelemetry/core';\nimport { defaultResource } from '@opentelemetry/resources';\nimport { Tracer } from './Tracer';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider {\n    _config;\n    _tracers = new Map();\n    _resource;\n    _activeSpanProcessor;\n    constructor(config = {}) {\n        const mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this._resource = mergedConfig.resource ?? defaultResource();\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this._resource,\n        });\n        const spanProcessors = [];\n        if (config.spanProcessors?.length) {\n            spanProcessors.push(...config.spanProcessors);\n        }\n        this._activeSpanProcessor = new MultiSpanProcessor(spanProcessors);\n    }\n    getTracer(name, version, options) {\n        const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name, version, schemaUrl: options?.schemaUrl }, this._config, this._resource, this._activeSpanProcessor));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    }\n    forceFlush() {\n        const timeout = this._config.forceFlushTimeoutMillis;\n        const promises = this._activeSpanProcessor['_spanProcessors'].map((spanProcessor) => {\n            return new Promise(resolve => {\n                let state;\n                const timeoutInterval = setTimeout(() => {\n                    resolve(new Error(`Span processor did not completed within timeout period of ${timeout} ms`));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(() => {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(error => {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise((resolve, reject) => {\n            Promise.all(promises)\n                .then(results => {\n                const errors = results.filter(result => result !== ForceFlushState.resolved);\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(error => reject([error]));\n        });\n    }\n    shutdown() {\n        return this._activeSpanProcessor.shutdown();\n    }\n}\n//# sourceMappingURL=BasicTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager {\n    /**\n     * whether the context manager is enabled or not\n     */\n    _enabled = false;\n    /**\n     * Keeps the reference to current context\n     */\n    _currentContext = ROOT_CONTEXT;\n    /**\n     *\n     * @param context\n     * @param target Function to be executed within the context\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    _bindFunction(context = ROOT_CONTEXT, target) {\n        const manager = this;\n        const contextWrapper = function (...args) {\n            return manager.with(context, () => target.apply(this, args));\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    }\n    /**\n     * Returns the active context\n     */\n    active() {\n        return this._currentContext;\n    }\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    bind(context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    }\n    /**\n     * Disable the context manager (clears the current context)\n     */\n    disable() {\n        this._currentContext = ROOT_CONTEXT;\n        this._enabled = false;\n        return this;\n    }\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    enable() {\n        if (this._enabled) {\n            return this;\n        }\n        this._enabled = true;\n        this._currentContext = ROOT_CONTEXT;\n        return this;\n    }\n    /**\n     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n     * The context will be set as active\n     * @param context\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    with(context, fn, thisArg, ...args) {\n        const previousContext = this._currentContext;\n        this._currentContext = context || ROOT_CONTEXT;\n        try {\n            return fn.call(thisArg, ...args);\n        }\n        finally {\n            this._currentContext = previousContext;\n        }\n    }\n}\n//# sourceMappingURL=StackContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator {\n    _propagators;\n    _fields;\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    constructor(config = {}) {\n        this._propagators = config.propagators ?? [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n            .reduce((x, y) => x.concat(y), [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    inject(context, carrier, setter) {\n        for (const propagator of this._propagators) {\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                diag.warn(`Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n        }\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    extract(context, carrier, getter) {\n        return this._propagators.reduce((ctx, propagator) => {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(`Failed to extract with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n            return ctx;\n        }, context);\n    }\n    fields() {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    }\n}\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce((hValue, current) => {\n        const value = `${hValue}${hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''}${current}`;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(([key, value]) => {\n        let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    const keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    const key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    const value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    let metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key, value, metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    const result = {};\n    if (typeof value === 'string' && value.length > 0) {\n        value.split(BAGGAGE_ITEMS_SEPARATOR).forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair !== undefined && keyPair.value.length > 0) {\n                result[keyPair.key] = keyPair.value;\n            }\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator {\n    inject(context, carrier, setter) {\n        const baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        const keyPairs = getKeyPairs(baggage)\n            .filter((pair) => {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        const headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    }\n    extract(context, carrier, getter) {\n        const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        const baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        const baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                const baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    }\n    fields() {\n        return [BAGGAGE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BasicTracerProvider, } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\nimport { trace, context, propagation, } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, } from '@opentelemetry/core';\nfunction setupContextManager(contextManager) {\n    // null means 'do not register'\n    if (contextManager === null) {\n        return;\n    }\n    // undefined means 'register default'\n    if (contextManager === undefined) {\n        const defaultContextManager = new StackContextManager();\n        defaultContextManager.enable();\n        context.setGlobalContextManager(defaultContextManager);\n        return;\n    }\n    contextManager.enable();\n    context.setGlobalContextManager(contextManager);\n}\nfunction setupPropagator(propagator) {\n    // null means 'do not register'\n    if (propagator === null) {\n        return;\n    }\n    // undefined means 'register default'\n    if (propagator === undefined) {\n        propagation.setGlobalPropagator(new CompositePropagator({\n            propagators: [\n                new W3CTraceContextPropagator(),\n                new W3CBaggagePropagator(),\n            ],\n        }));\n        return;\n    }\n    propagation.setGlobalPropagator(propagator);\n}\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n    /**\n     * Constructs a new Tracer instance.\n     * @param config Web Tracer config\n     */\n    constructor(config = {}) {\n        super(config);\n    }\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    register(config = {}) {\n        trace.setGlobalTracerProvider(this);\n        setupPropagator(config.propagator);\n        setupContextManager(config.contextManager);\n    }\n}\n//# sourceMappingURL=WebTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Deferred {\n    _promise;\n    _resolve;\n    _reject;\n    constructor() {\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    get promise() {\n        return this._promise;\n    }\n    resolve(val) {\n        this._resolve(val);\n    }\n    reject(err) {\n        this._reject(err);\n    }\n}\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture {\n    _callback;\n    _that;\n    _isCalled = false;\n    _deferred = new Deferred();\n    constructor(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n    }\n    get isCalled() {\n        return this._isCalled;\n    }\n    get promise() {\n        return this._deferred.promise;\n    }\n    call(...args) {\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve(this._callback.call(this._that, ...args)).then(val => this._deferred.resolve(val), err => this._deferred.reject(err));\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    }\n}\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(_timer) { }\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getNumberFromEnv, globalErrorHandler, suppressTracing, unrefTimer, } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport class BatchSpanProcessorBase {\n    _exporter;\n    _maxExportBatchSize;\n    _maxQueueSize;\n    _scheduledDelayMillis;\n    _exportTimeoutMillis;\n    _isExporting = false;\n    _finishedSpans = [];\n    _timer;\n    _shutdownOnce;\n    _droppedSpansCount = 0;\n    constructor(_exporter, config) {\n        this._exporter = _exporter;\n        this._maxExportBatchSize =\n            typeof config?.maxExportBatchSize === 'number'\n                ? config.maxExportBatchSize\n                : (getNumberFromEnv('OTEL_BSP_MAX_EXPORT_BATCH_SIZE') ?? 512);\n        this._maxQueueSize =\n            typeof config?.maxQueueSize === 'number'\n                ? config.maxQueueSize\n                : (getNumberFromEnv('OTEL_BSP_MAX_QUEUE_SIZE') ?? 2048);\n        this._scheduledDelayMillis =\n            typeof config?.scheduledDelayMillis === 'number'\n                ? config.scheduledDelayMillis\n                : (getNumberFromEnv('OTEL_BSP_SCHEDULE_DELAY') ?? 5000);\n        this._exportTimeoutMillis =\n            typeof config?.exportTimeoutMillis === 'number'\n                ? config.exportTimeoutMillis\n                : (getNumberFromEnv('OTEL_BSP_EXPORT_TIMEOUT') ?? 30000);\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    forceFlush() {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    }\n    // does nothing.\n    onStart(_span, _parentContext) { }\n    onEnd(span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    }\n    shutdown() {\n        return this._shutdownOnce.call();\n    }\n    _shutdown() {\n        return Promise.resolve()\n            .then(() => {\n            return this.onShutdown();\n        })\n            .then(() => {\n            return this._flushAll();\n        })\n            .then(() => {\n            return this._exporter.shutdown();\n        });\n    }\n    /** Add a span in the buffer. */\n    _addToBuffer(span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            diag.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`);\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    }\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    _flushAll() {\n        return new Promise((resolve, reject) => {\n            const promises = [];\n            // calculate number of batches\n            const count = Math.ceil(this._finishedSpans.length / this._maxExportBatchSize);\n            for (let i = 0, j = count; i < j; i++) {\n                promises.push(this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    _flushOneBatch() {\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), () => {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                let spans;\n                if (this._finishedSpans.length <= this._maxExportBatchSize) {\n                    spans = this._finishedSpans;\n                    this._finishedSpans = [];\n                }\n                else {\n                    spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n                }\n                const doExport = () => this._exporter.export(spans, result => {\n                    clearTimeout(timer);\n                    if (result.code === ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject(result.error ??\n                            new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n                let pendingResources = null;\n                for (let i = 0, len = spans.length; i < len; i++) {\n                    const span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources ??= [];\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, err => {\n                        globalErrorHandler(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    }\n    _maybeStartTimer() {\n        if (this._isExporting)\n            return;\n        const flush = () => {\n            this._isExporting = true;\n            this._flushOneBatch()\n                .finally(() => {\n                this._isExporting = false;\n                if (this._finishedSpans.length > 0) {\n                    this._clearTimer();\n                    this._maybeStartTimer();\n                }\n            })\n                .catch(e => {\n                this._isExporting = false;\n                globalErrorHandler(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    }\n    _clearTimer() {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    }\n}\n//# sourceMappingURL=BatchSpanProcessorBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { globalErrorHandler } from '@opentelemetry/core';\nexport class BatchSpanProcessor extends BatchSpanProcessorBase {\n    _visibilityChangeListener;\n    _pageHideListener;\n    constructor(_exporter, config) {\n        super(_exporter, config);\n        this.onInit(config);\n    }\n    onInit(config) {\n        if (config?.disableAutoFlushOnDocumentHide !== true &&\n            typeof document !== 'undefined') {\n            this._visibilityChangeListener = () => {\n                if (document.visibilityState === 'hidden') {\n                    this.forceFlush().catch(error => {\n                        globalErrorHandler(error);\n                    });\n                }\n            };\n            this._pageHideListener = () => {\n                this.forceFlush().catch(error => {\n                    globalErrorHandler(error);\n                });\n            };\n            document.addEventListener('visibilitychange', this._visibilityChangeListener);\n            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n            document.addEventListener('pagehide', this._pageHideListener);\n        }\n    }\n    onShutdown() {\n        if (typeof document !== 'undefined') {\n            if (this._visibilityChangeListener) {\n                document.removeEventListener('visibilitychange', this._visibilityChangeListener);\n            }\n            if (this._pageHideListener) {\n                document.removeEventListener('pagehide', this._pageHideListener);\n            }\n        }\n    }\n}\n//# sourceMappingURL=BatchSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function createConstMap(values) {\n    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n    let res = {};\n    const len = values.length;\n    for (let lp = 0; lp < len; lp++) {\n        const val = values[lp];\n        if (val) {\n            res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/**\n Unstable SemConv\n Because the \"incubating\" entry-point may include breaking changes in minor versions,\n it is recommended that instrumentation libraries not import @opentelemetry/semantic-conventions/incubating in runtime code,\n but instead copy relevant definitions into their own code base. (This is the same recommendation as for other languages.)\n \n See: https://www.npmjs.com/package/@opentelemetry/semantic-conventions#:~:text=%7D)%3B-,Unstable%20SemConv,-Because%20the%20%22incubating\n */\nexport const ATTR_SESSION_ID = 'session.id';\nexport const ATTR_DEPLOYMENT_ENVIRONMENT_NAME = 'deployment.environment.name';\nexport const ATTR_SERVICE_NAMESPACE = 'service.namespace';\n// https://opentelemetry.io/docs/specs/semconv/resource/process/#javascript-runtimes\nexport const ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nexport const ATTR_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\n// https://opentelemetry.io/docs/specs/semconv/attributes-registry/telemetry/#telemetry-attributes\nexport const ATTR_TELEMETRY_DISTRO_NAME = 'telemetry.distro.name';\nexport const ATTR_TELEMETRY_DISTRO_VERSION = 'telemetry.distro.version';\n// https://opentelemetry.io/docs/specs/semconv/resource/browser/\nexport const ATTR_BROWSER_BRANDS = 'browser.brands';\nexport const ATTR_BROWSER_LANGUAGE = 'browser.language';\nexport const ATTR_BROWSER_MOBILE = 'browser.mobile';\nexport const ATTR_BROWSER_PLATFORM = 'browser.platform';\n//# sourceMappingURL=semconv.js.map","import { ATTR_SESSION_ID } from './semconv';\nexport class FaroMetaAttributesSpanProcessor {\n    constructor(processor, metas) {\n        this.processor = processor;\n        this.metas = metas;\n    }\n    forceFlush() {\n        return this.processor.forceFlush();\n    }\n    onStart(span, parentContext) {\n        var _a;\n        const session = this.metas.value.session;\n        if (session === null || session === void 0 ? void 0 : session.id) {\n            span.attributes[ATTR_SESSION_ID] = session.id;\n            /**\n             * @deprecated will be removed in the future and has been replaced by ATTR_SESSION_ID (session.id)\n             */\n            span.attributes['session_id'] = session.id;\n        }\n        const user = (_a = this.metas.value.user) !== null && _a !== void 0 ? _a : {};\n        if (user.email) {\n            span.attributes['user.email'] = user.email;\n        }\n        if (user.id) {\n            span.attributes['user.id'] = user.id;\n        }\n        if (user.username) {\n            span.attributes['user.name'] = user.username;\n        }\n        if (user.fullName) {\n            span.attributes['user.full_name'] = user.fullName;\n        }\n        if (user.roles) {\n            span.attributes['user.roles'] = user.roles.split(',').map((role) => role.trim());\n        }\n        if (user.hash) {\n            span.attributes['user.hash'] = user.hash;\n        }\n        this.processor.onStart(span, parentContext);\n    }\n    onEnd(span) {\n        this.processor.onEnd(span);\n    }\n    shutdown() {\n        return this.processor.shutdown();\n    }\n}\n//# sourceMappingURL=faroMetaAttributesSpanProcessor.js.map","import { ESpanKind } from '@opentelemetry/otlp-transformer/build/src/trace/internal-types';\nimport { faro, unknownString } from '@grafana/faro-web-sdk';\nconst DURATION_NS_KEY = 'duration_ns';\nexport function sendFaroEvents(resourceSpans = []) {\n    var _a, _b;\n    for (const resourceSpan of resourceSpans) {\n        const { scopeSpans } = resourceSpan;\n        for (const scopeSpan of scopeSpans) {\n            const { scope, spans = [] } = scopeSpan;\n            for (const span of spans) {\n                if (span.kind !== ESpanKind.SPAN_KIND_CLIENT) {\n                    continue;\n                }\n                const spanContext = {\n                    traceId: span.traceId.toString(),\n                    spanId: span.spanId.toString(),\n                };\n                const faroEventAttributes = {};\n                for (const attribute of span.attributes) {\n                    faroEventAttributes[attribute.key] = String(Object.values(attribute.value)[0]);\n                }\n                // Add span duration in nanoseconds\n                if (!Number.isNaN(span.endTimeUnixNano) && !Number.isNaN(span.startTimeUnixNano)) {\n                    faroEventAttributes[DURATION_NS_KEY] = String(Number(span.endTimeUnixNano) - Number(span.startTimeUnixNano));\n                }\n                const index = ((_a = scope === null || scope === void 0 ? void 0 : scope.name) !== null && _a !== void 0 ? _a : '').indexOf('-');\n                let eventName = unknownString;\n                if (scope === null || scope === void 0 ? void 0 : scope.name) {\n                    if (index === -1) {\n                        eventName = (_b = scope.name.split('/')[1]) !== null && _b !== void 0 ? _b : scope.name;\n                    }\n                    if (index > -1) {\n                        eventName = scope === null || scope === void 0 ? void 0 : scope.name.substring(index + 1);\n                    }\n                }\n                faro.api.pushEvent(`faro.tracing.${eventName}`, faroEventAttributes, undefined, {\n                    spanContext,\n                    // Convert nanoseconds to milliseconds\n                    timestampOverwriteMs: Number(span.endTimeUnixNano) / 1000000,\n                    customPayloadTransformer: (payload) => {\n                        var _a, _b;\n                        if (faroEventAttributes['faro.action.user.name'] != null &&\n                            faroEventAttributes['faro.action.user.parentId'] != null) {\n                            payload.action = {\n                                name: faroEventAttributes['faro.action.user.name'],\n                                parentId: faroEventAttributes['faro.action.user.parentId'],\n                            };\n                            (_a = payload.attributes) === null || _a === void 0 ? true : delete _a['faro.action.user.name'];\n                            (_b = payload.attributes) === null || _b === void 0 ? true : delete _b['faro.action.user.parentId'];\n                        }\n                        return payload;\n                    },\n                });\n            }\n        }\n    }\n}\n//# sourceMappingURL=faroTraceExporter.utils.js.map","import { ExportResultCode } from '@opentelemetry/core';\nimport { createExportTraceServiceRequest } from '@opentelemetry/otlp-transformer/build/src/trace/internal';\nimport { sendFaroEvents } from './faroTraceExporter.utils';\nexport class FaroTraceExporter {\n    constructor(config) {\n        this.config = config;\n    }\n    export(spans, resultCallback) {\n        const traceEvent = createExportTraceServiceRequest(spans, { useHex: true, useLongBits: false });\n        this.config.api.pushTraces(traceEvent);\n        sendFaroEvents(traceEvent.resourceSpans);\n        resultCallback({ code: ExportResultCode.SUCCESS });\n    }\n    shutdown() {\n        return Promise.resolve(undefined);\n    }\n}\n//# sourceMappingURL=faroTraceExporter.js.map","import { SpanKind } from '@opentelemetry/api';\nimport { apiMessageBus, USER_ACTION_CANCEL, USER_ACTION_END, USER_ACTION_HALT, USER_ACTION_START, } from '@grafana/faro-web-sdk';\nexport class FaroUserActionSpanProcessor {\n    constructor(processor) {\n        this.processor = processor;\n        apiMessageBus.subscribe((msg) => {\n            if (msg.type === USER_ACTION_START) {\n                this.message = msg;\n                return;\n            }\n            if ([USER_ACTION_END, USER_ACTION_HALT, USER_ACTION_CANCEL].includes(msg.type)) {\n                this.message = undefined;\n            }\n        });\n    }\n    forceFlush() {\n        return this.processor.forceFlush();\n    }\n    onStart(span, parentContext) {\n        var _a, _b;\n        if (span.kind === SpanKind.CLIENT) {\n            // If the span is created when the message object is available it is created before the user action timeout has been reached so it belongs to the user-action.\n            // In this case we can add the user action name and parentId to the span attributes.\n            // If the span is created after the user action timeout span, the message object will be undefined which means the action has been cancelled or is ended.\n            if (this.message) {\n                span.attributes['faro.action.user.name'] = (_a = this.message) === null || _a === void 0 ? void 0 : _a.name;\n                span.attributes['faro.action.user.parentId'] = (_b = this.message) === null || _b === void 0 ? void 0 : _b.parentId;\n            }\n        }\n        this.processor.onStart(span, parentContext);\n    }\n    onEnd(span) {\n        this.processor.onEnd(span);\n    }\n    shutdown() {\n        return this.processor.shutdown();\n    }\n}\n//# sourceMappingURL=faroUserActionSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Default to complaining loudly when things don't go according to plan.\n// eslint-disable-next-line no-console\nlet logger = console.error.bind(console);\n// Sets a property on an object, preserving its enumerability.\n// This function assumes that the property is already writable.\nfunction defineProperty(obj, name, value) {\n    const enumerable = !!obj[name] &&\n        Object.prototype.propertyIsEnumerable.call(obj, name);\n    Object.defineProperty(obj, name, {\n        configurable: true,\n        enumerable,\n        writable: true,\n        value,\n    });\n}\nexport const wrap = (nodule, name, wrapper) => {\n    if (!nodule || !nodule[name]) {\n        logger('no original function ' + String(name) + ' to wrap');\n        return;\n    }\n    if (!wrapper) {\n        logger('no wrapper function');\n        logger(new Error().stack);\n        return;\n    }\n    const original = nodule[name];\n    if (typeof original !== 'function' || typeof wrapper !== 'function') {\n        logger('original object and wrapper must be functions');\n        return;\n    }\n    const wrapped = wrapper(original, name);\n    defineProperty(wrapped, '__original', original);\n    defineProperty(wrapped, '__unwrap', () => {\n        if (nodule[name] === wrapped) {\n            defineProperty(nodule, name, original);\n        }\n    });\n    defineProperty(wrapped, '__wrapped', true);\n    defineProperty(nodule, name, wrapped);\n    return wrapped;\n};\nexport const massWrap = (nodules, names, wrapper) => {\n    if (!nodules) {\n        logger('must provide one or more modules to patch');\n        logger(new Error().stack);\n        return;\n    }\n    else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n    }\n    if (!(names && Array.isArray(names))) {\n        logger('must provide one or more functions to wrap on modules');\n        return;\n    }\n    nodules.forEach(nodule => {\n        names.forEach(name => {\n            wrap(nodule, name, wrapper);\n        });\n    });\n};\nexport const unwrap = (nodule, name) => {\n    if (!nodule || !nodule[name]) {\n        logger('no function to unwrap.');\n        logger(new Error().stack);\n        return;\n    }\n    const wrapped = nodule[name];\n    if (!wrapped.__unwrap) {\n        logger('no original to unwrap to -- has ' +\n            String(name) +\n            ' already been unwrapped?');\n    }\n    else {\n        wrapped.__unwrap();\n        return;\n    }\n};\nexport const massUnwrap = (nodules, names) => {\n    if (!nodules) {\n        logger('must provide one or more modules to patch');\n        logger(new Error().stack);\n        return;\n    }\n    else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n    }\n    if (!(names && Array.isArray(names))) {\n        logger('must provide one or more functions to unwrap on modules');\n        return;\n    }\n    nodules.forEach(nodule => {\n        names.forEach(name => {\n            unwrap(nodule, name);\n        });\n    });\n};\nexport default function shimmer(options) {\n    if (options && options.logger) {\n        if (typeof options.logger !== 'function') {\n            logger(\"new logger isn't a function, not replacing\");\n        }\n        else {\n            logger = options.logger;\n        }\n    }\n}\nshimmer.wrap = wrap;\nshimmer.massWrap = massWrap;\nshimmer.unwrap = unwrap;\nshimmer.massUnwrap = massUnwrap;\n//# sourceMappingURL=shimmer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, metrics, trace, } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport * as shimmer from './shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport class InstrumentationAbstract {\n    instrumentationName;\n    instrumentationVersion;\n    _config = {};\n    _tracer;\n    _meter;\n    _logger;\n    _diag;\n    constructor(instrumentationName, instrumentationVersion, config) {\n        this.instrumentationName = instrumentationName;\n        this.instrumentationVersion = instrumentationVersion;\n        this.setConfig(config);\n        this._diag = diag.createComponentLogger({\n            namespace: instrumentationName,\n        });\n        this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n        this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n        this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n        this._updateMetricInstruments();\n    }\n    /* Api to wrap instrumented method */\n    _wrap = shimmer.wrap;\n    /* Api to unwrap instrumented methods */\n    _unwrap = shimmer.unwrap;\n    /* Api to mass wrap instrumented method */\n    _massWrap = shimmer.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    _massUnwrap = shimmer.massUnwrap;\n    /* Returns meter */\n    get meter() {\n        return this._meter;\n    }\n    /**\n     * Sets MeterProvider to this plugin\n     * @param meterProvider\n     */\n    setMeterProvider(meterProvider) {\n        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n        this._updateMetricInstruments();\n    }\n    /* Returns logger */\n    get logger() {\n        return this._logger;\n    }\n    /**\n     * Sets LoggerProvider to this plugin\n     * @param loggerProvider\n     */\n    setLoggerProvider(loggerProvider) {\n        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);\n    }\n    /**\n     * @experimental\n     *\n     * Get module definitions defined by {@link init}.\n     * This can be used for experimental compile-time instrumentation.\n     *\n     * @returns an array of {@link InstrumentationModuleDefinition}\n     */\n    getModuleDefinitions() {\n        const initResult = this.init() ?? [];\n        if (!Array.isArray(initResult)) {\n            return [initResult];\n        }\n        return initResult;\n    }\n    /**\n     * Sets the new metric instruments with the current Meter.\n     */\n    _updateMetricInstruments() {\n        return;\n    }\n    /* Returns InstrumentationConfig */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Sets InstrumentationConfig to this plugin\n     * @param config\n     */\n    setConfig(config) {\n        // copy config first level properties to ensure they are immutable.\n        // nested properties are not copied, thus are mutable from the outside.\n        this._config = {\n            enabled: true,\n            ...config,\n        };\n    }\n    /**\n     * Sets TraceProvider to this plugin\n     * @param tracerProvider\n     */\n    setTracerProvider(tracerProvider) {\n        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    }\n    /* Returns tracer */\n    get tracer() {\n        return this._tracer;\n    }\n    /**\n     * Execute span customization hook, if configured, and log any errors.\n     * Any semantics of the trigger and info are defined by the specific instrumentation.\n     * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n     * @param triggerName The name of the trigger for executing the hook for logging purposes\n     * @param span The span to which the hook should be applied\n     * @param info The info object to be passed to the hook, with useful data the hook may use\n     */\n    _runSpanCustomizationHook(hookHandler, triggerName, span, info) {\n        if (!hookHandler) {\n            return;\n        }\n        try {\n            hookHandler(span, info);\n        }\n        catch (e) {\n            this._diag.error(`Error running span customization hook due to exception in handler`, { triggerName }, e);\n        }\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { InstrumentationAbstract } from '../../instrumentation';\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport class InstrumentationBase extends InstrumentationAbstract {\n    constructor(instrumentationName, instrumentationVersion, config) {\n        super(instrumentationName, instrumentationVersion, config);\n        if (this._config.enabled) {\n            this.enable();\n        }\n    }\n}\n//# sourceMappingURL=instrumentation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SemconvStability;\n(function (SemconvStability) {\n    /** Emit only stable semantic conventions. */\n    SemconvStability[SemconvStability[\"STABLE\"] = 1] = \"STABLE\";\n    /** Emit only old semantic conventions. */\n    SemconvStability[SemconvStability[\"OLD\"] = 2] = \"OLD\";\n    /** Emit both stable and old semantic conventions. */\n    SemconvStability[SemconvStability[\"DUPLICATE\"] = 3] = \"DUPLICATE\";\n})(SemconvStability || (SemconvStability = {}));\n/**\n * Determine the appropriate semconv stability for the given namespace.\n *\n * This will parse the given string of comma-separated values (often\n * `process.env.OTEL_SEMCONV_STABILITY_OPT_IN`) looking for the `${namespace}`\n * or `${namespace}/dup` tokens. This is a pattern defined by a number of\n * non-normative semconv documents.\n *\n * For example:\n * - namespace 'http': https://opentelemetry.io/docs/specs/semconv/non-normative/http-migration/\n * - namespace 'database': https://opentelemetry.io/docs/specs/semconv/non-normative/database-migration/\n * - namespace 'k8s': https://opentelemetry.io/docs/specs/semconv/non-normative/k8s-migration/\n *\n * Usage:\n *\n *  import {SemconvStability, semconvStabilityFromStr} from '@opentelemetry/instrumentation';\n *\n *  export class FooInstrumentation extends InstrumentationBase<FooInstrumentationConfig> {\n *    private _semconvStability: SemconvStability;\n *    constructor(config: FooInstrumentationConfig = {}) {\n *      super('@opentelemetry/instrumentation-foo', VERSION, config);\n *\n *      // When supporting the OTEL_SEMCONV_STABILITY_OPT_IN envvar\n *      this._semconvStability = semconvStabilityFromStr(\n *        'http',\n *        process.env.OTEL_SEMCONV_STABILITY_OPT_IN\n *      );\n *\n *      // or when supporting a `semconvStabilityOptIn` config option (e.g. for\n *      // the web where there are no envvars).\n *      this._semconvStability = semconvStabilityFromStr(\n *        'http',\n *        config?.semconvStabilityOptIn\n *      );\n *    }\n *  }\n *\n *  // Then, to apply semconv, use the following or similar:\n *  if (this._semconvStability & SemconvStability.OLD) {\n *    // ...\n *  }\n *  if (this._semconvStability & SemconvStability.STABLE) {\n *    // ...\n *  }\n *\n */\nexport function semconvStabilityFromStr(namespace, str) {\n    let semconvStability = SemconvStability.OLD;\n    // The same parsing of `str` as `getStringListFromEnv` from the core pkg.\n    const entries = str\n        ?.split(',')\n        .map(v => v.trim())\n        .filter(s => s !== '');\n    for (const entry of entries ?? []) {\n        if (entry.toLowerCase() === namespace + '/dup') {\n            // DUPLICATE takes highest precedence.\n            semconvStability = SemconvStability.DUPLICATE;\n            break;\n        }\n        else if (entry.toLowerCase() === namespace) {\n            semconvStability = SemconvStability.STABLE;\n        }\n    }\n    return semconvStability;\n}\n//# sourceMappingURL=semconvStability.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {\n    let error;\n    let result;\n    try {\n        result = execute();\n    }\n    catch (e) {\n        error = e;\n    }\n    finally {\n        onFinish(error, result);\n        if (error && !preventThrowingError) {\n            // eslint-disable-next-line no-unsafe-finally\n            throw error;\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return result;\n    }\n}\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nexport async function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {\n    let error;\n    let result;\n    try {\n        result = await execute();\n    }\n    catch (e) {\n        error = e;\n    }\n    finally {\n        onFinish(error, result);\n        if (error && !preventThrowingError) {\n            // eslint-disable-next-line no-unsafe-finally\n            throw error;\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return result;\n    }\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var PerformanceTimingNames;\n(function (PerformanceTimingNames) {\n    PerformanceTimingNames[\"CONNECT_END\"] = \"connectEnd\";\n    PerformanceTimingNames[\"CONNECT_START\"] = \"connectStart\";\n    PerformanceTimingNames[\"DECODED_BODY_SIZE\"] = \"decodedBodySize\";\n    PerformanceTimingNames[\"DOM_COMPLETE\"] = \"domComplete\";\n    PerformanceTimingNames[\"DOM_CONTENT_LOADED_EVENT_END\"] = \"domContentLoadedEventEnd\";\n    PerformanceTimingNames[\"DOM_CONTENT_LOADED_EVENT_START\"] = \"domContentLoadedEventStart\";\n    PerformanceTimingNames[\"DOM_INTERACTIVE\"] = \"domInteractive\";\n    PerformanceTimingNames[\"DOMAIN_LOOKUP_END\"] = \"domainLookupEnd\";\n    PerformanceTimingNames[\"DOMAIN_LOOKUP_START\"] = \"domainLookupStart\";\n    PerformanceTimingNames[\"ENCODED_BODY_SIZE\"] = \"encodedBodySize\";\n    PerformanceTimingNames[\"FETCH_START\"] = \"fetchStart\";\n    PerformanceTimingNames[\"LOAD_EVENT_END\"] = \"loadEventEnd\";\n    PerformanceTimingNames[\"LOAD_EVENT_START\"] = \"loadEventStart\";\n    PerformanceTimingNames[\"NAVIGATION_START\"] = \"navigationStart\";\n    PerformanceTimingNames[\"REDIRECT_END\"] = \"redirectEnd\";\n    PerformanceTimingNames[\"REDIRECT_START\"] = \"redirectStart\";\n    PerformanceTimingNames[\"REQUEST_START\"] = \"requestStart\";\n    PerformanceTimingNames[\"RESPONSE_END\"] = \"responseEnd\";\n    PerformanceTimingNames[\"RESPONSE_START\"] = \"responseStart\";\n    PerformanceTimingNames[\"SECURE_CONNECTION_START\"] = \"secureConnectionStart\";\n    PerformanceTimingNames[\"START_TIME\"] = \"startTime\";\n    PerformanceTimingNames[\"UNLOAD_EVENT_END\"] = \"unloadEventEnd\";\n    PerformanceTimingNames[\"UNLOAD_EVENT_START\"] = \"unloadEventStart\";\n})(PerformanceTimingNames || (PerformanceTimingNames = {}));\n//# sourceMappingURL=PerformanceTimingNames.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Deprecated, use `http.response.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.header.<key>`.\n */\nexport const ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\n/**\n * Deprecated, use `http.response.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replace by `http.response.body.size`.\n */\nexport const ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\n//# sourceMappingURL=semconv.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PerformanceTimingNames as PTN } from './enums/PerformanceTimingNames';\nimport { hrTimeToNanoseconds, timeInputToHrTime, urlMatches, } from '@opentelemetry/core';\nimport { ATTR_HTTP_RESPONSE_CONTENT_LENGTH, ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, } from './semconv';\n// Used to normalize relative URLs\nlet urlNormalizingAnchor;\nfunction getUrlNormalizingAnchor() {\n    if (!urlNormalizingAnchor) {\n        urlNormalizingAnchor = document.createElement('a');\n    }\n    return urlNormalizingAnchor;\n}\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\nexport function hasKey(obj, key) {\n    return key in obj;\n}\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n * @param ignoreZeros\n */\nexport function addSpanNetworkEvent(span, performanceName, entries, ignoreZeros = true) {\n    if (hasKey(entries, performanceName) &&\n        typeof entries[performanceName] === 'number' &&\n        !(ignoreZeros && entries[performanceName] === 0)) {\n        return span.addEvent(performanceName, entries[performanceName]);\n    }\n    return undefined;\n}\n/**\n * Helper function for adding network events and content length attributes.\n */\nexport function addSpanNetworkEvents(span, resource, ignoreNetworkEvents = false, ignoreZeros, skipOldSemconvContentLengthAttrs) {\n    if (ignoreZeros === undefined) {\n        ignoreZeros = resource[PTN.START_TIME] !== 0;\n    }\n    if (!ignoreNetworkEvents) {\n        addSpanNetworkEvent(span, PTN.FETCH_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_END, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.CONNECT_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.SECURE_CONNECTION_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.CONNECT_END, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.REQUEST_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.RESPONSE_START, resource, ignoreZeros);\n        addSpanNetworkEvent(span, PTN.RESPONSE_END, resource, ignoreZeros);\n    }\n    if (!skipOldSemconvContentLengthAttrs) {\n        // This block adds content-length-related span attributes using the\n        // *old* HTTP semconv (v1.7.0).\n        const encodedLength = resource[PTN.ENCODED_BODY_SIZE];\n        if (encodedLength !== undefined) {\n            span.setAttribute(ATTR_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);\n        }\n        const decodedLength = resource[PTN.DECODED_BODY_SIZE];\n        // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n        if (decodedLength !== undefined && encodedLength !== decodedLength) {\n            span.setAttribute(ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);\n        }\n    }\n}\n/**\n * sort resources by startTime\n * @param filteredResources\n */\nexport function sortResources(filteredResources) {\n    return filteredResources.slice().sort((a, b) => {\n        const valueA = a[PTN.FETCH_START];\n        const valueB = b[PTN.FETCH_START];\n        if (valueA > valueB) {\n            return 1;\n        }\n        else if (valueA < valueB) {\n            return -1;\n        }\n        return 0;\n    });\n}\n/** Returns the origin if present (if in browser context). */\nfunction getOrigin() {\n    return typeof location !== 'undefined' ? location.origin : undefined;\n}\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\nexport function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources = new WeakSet(), initiatorType) {\n    // de-relativize the URL before usage (does no harm to absolute URLs)\n    const parsedSpanUrl = parseUrl(spanUrl);\n    spanUrl = parsedSpanUrl.toString();\n    const filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);\n    if (filteredResources.length === 0) {\n        return {\n            mainRequest: undefined,\n        };\n    }\n    if (filteredResources.length === 1) {\n        return {\n            mainRequest: filteredResources[0],\n        };\n    }\n    const sorted = sortResources(filteredResources);\n    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {\n        let corsPreFlightRequest = sorted[0];\n        let mainRequest = findMainRequest(sorted, corsPreFlightRequest[PTN.RESPONSE_END], endTimeHR);\n        const responseEnd = corsPreFlightRequest[PTN.RESPONSE_END];\n        const fetchStart = mainRequest[PTN.FETCH_START];\n        // no corsPreFlightRequest\n        if (fetchStart < responseEnd) {\n            mainRequest = corsPreFlightRequest;\n            corsPreFlightRequest = undefined;\n        }\n        return {\n            corsPreFlightRequest,\n            mainRequest,\n        };\n    }\n    else {\n        return {\n            mainRequest: filteredResources[0],\n        };\n    }\n}\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\nfunction findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {\n    const spanEndTime = hrTimeToNanoseconds(spanEndTimeHR);\n    const minTime = hrTimeToNanoseconds(timeInputToHrTime(corsPreFlightRequestEndTime));\n    let mainRequest = resources[1];\n    let bestGap;\n    const length = resources.length;\n    for (let i = 1; i < length; i++) {\n        const resource = resources[i];\n        const resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n        const resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n        const currentGap = spanEndTime - resourceEndTime;\n        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n            bestGap = currentGap;\n            mainRequest = resource;\n        }\n    }\n    return mainRequest;\n}\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\nfunction filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n    const startTime = hrTimeToNanoseconds(startTimeHR);\n    const endTime = hrTimeToNanoseconds(endTimeHR);\n    let filteredResources = resources.filter(resource => {\n        const resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n        const resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n        return (resource.initiatorType.toLowerCase() ===\n            (initiatorType || 'xmlhttprequest') &&\n            resource.name === spanUrl &&\n            resourceStartTime >= startTime &&\n            resourceEndTime <= endTime);\n    });\n    if (filteredResources.length > 0) {\n        filteredResources = filteredResources.filter(resource => {\n            return !ignoredResources.has(resource);\n        });\n    }\n    return filteredResources;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element.\n * @param url\n */\nexport function parseUrl(url) {\n    if (typeof URL === 'function') {\n        return new URL(url, typeof document !== 'undefined'\n            ? document.baseURI\n            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this\n                ? location.href\n                : undefined);\n    }\n    const element = getUrlNormalizingAnchor();\n    element.href = url;\n    return element;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element and serialize\n * it to a string.\n *\n * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url\n *\n * @param url\n */\nexport function normalizeUrl(url) {\n    const urlLike = parseUrl(url);\n    return urlLike.href;\n}\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function getElementXPath(target, optimised) {\n    if (target.nodeType === Node.DOCUMENT_NODE) {\n        return '/';\n    }\n    const targetValue = getNodeValue(target, optimised);\n    if (optimised && targetValue.indexOf('@id') > 0) {\n        return targetValue;\n    }\n    let xpath = '';\n    if (target.parentNode) {\n        xpath += getElementXPath(target.parentNode, false);\n    }\n    xpath += targetValue;\n    return xpath;\n}\n/**\n * get node index within the siblings\n * @param target\n */\nfunction getNodeIndex(target) {\n    if (!target.parentNode) {\n        return 0;\n    }\n    const allowedTypes = [target.nodeType];\n    if (target.nodeType === Node.CDATA_SECTION_NODE) {\n        allowedTypes.push(Node.TEXT_NODE);\n    }\n    let elements = Array.from(target.parentNode.childNodes);\n    elements = elements.filter((element) => {\n        const localName = element.localName;\n        return (allowedTypes.indexOf(element.nodeType) >= 0 &&\n            localName === target.localName);\n    });\n    if (elements.length >= 1) {\n        return elements.indexOf(target) + 1; // xpath starts from 1\n    }\n    // if there are no other similar child xpath doesn't need index\n    return 0;\n}\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\nfunction getNodeValue(target, optimised) {\n    const nodeType = target.nodeType;\n    const index = getNodeIndex(target);\n    let nodeValue = '';\n    if (nodeType === Node.ELEMENT_NODE) {\n        const id = target.getAttribute('id');\n        if (optimised && id) {\n            return `//*[@id=\"${id}\"]`;\n        }\n        nodeValue = target.localName;\n    }\n    else if (nodeType === Node.TEXT_NODE ||\n        nodeType === Node.CDATA_SECTION_NODE) {\n        nodeValue = 'text()';\n    }\n    else if (nodeType === Node.COMMENT_NODE) {\n        nodeValue = 'comment()';\n    }\n    else {\n        return '';\n    }\n    // if index is 1 it can be omitted in xpath\n    if (nodeValue && index > 1) {\n        return `/${nodeValue}[${index}]`;\n    }\n    return `/${nodeValue}`;\n}\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\nexport function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {\n    let propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n    if (typeof propagateTraceHeaderUrls === 'string' ||\n        propagateTraceHeaderUrls instanceof RegExp) {\n        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n    }\n    const parsedSpanUrl = parseUrl(spanUrl);\n    if (parsedSpanUrl.origin === getOrigin()) {\n        return true;\n    }\n    else {\n        return propagateTraceHeaderUrls.some(propagateTraceHeaderUrl => urlMatches(spanUrl, propagateTraceHeaderUrl));\n    }\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nexport var AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"COMPONENT\"] = \"component\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames || (AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-xml-http-request\n// These may be unified in the future.\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n    namespace: '@opentelemetry/opentelemetry-instrumentation-fetch/utils',\n});\n/**\n * Helper function to determine payload content length for fetch requests\n *\n * The fetch API is kinda messy: there are a couple of ways the body can be passed in.\n *\n * In all cases, the body param can be some variation of ReadableStream,\n * and ReadableStreams can only be read once! We want to avoid consuming the body here,\n * because that would mean that the body never gets sent with the actual fetch request.\n *\n * Either the first arg is a Request object, which can be cloned\n *   so we can clone that object and read the body of the clone\n *   without disturbing the original argument\n *   However, reading the body here can only be done async; the body() method returns a promise\n *   this means this entire function has to return a promise\n *\n * OR the first arg is a url/string\n *   in which case the second arg has type RequestInit\n *   RequestInit is NOT cloneable, but RequestInit.body is writable\n *   so we can chain it into ReadableStream.pipeThrough()\n *\n *   ReadableStream.pipeThrough() lets us process a stream and returns a new stream\n *   So we can measure the body length as it passes through the pie, but need to attach\n *   the new stream to the original request\n *   so that the browser still has access to the body.\n *\n * @param body\n * @returns promise that resolves to the content length of the body\n */\nexport function getFetchBodyLength(...args) {\n    if (args[0] instanceof URL || typeof args[0] === 'string') {\n        const requestInit = args[1];\n        if (!requestInit?.body) {\n            return Promise.resolve();\n        }\n        if (requestInit.body instanceof ReadableStream) {\n            const { body, length } = _getBodyNonDestructively(requestInit.body);\n            requestInit.body = body;\n            return length;\n        }\n        else {\n            return Promise.resolve(getXHRBodyLength(requestInit.body));\n        }\n    }\n    else {\n        const info = args[0];\n        if (!info?.body) {\n            return Promise.resolve();\n        }\n        return info\n            .clone()\n            .text()\n            .then(t => getByteLength(t));\n    }\n}\nfunction _getBodyNonDestructively(body) {\n    // can't read a ReadableStream without destroying it\n    // but we CAN pipe it through and return a new ReadableStream\n    // some (older) platforms don't expose the pipeThrough method and in that scenario, we're out of luck;\n    //   there's no way to read the stream without consuming it.\n    if (!body.pipeThrough) {\n        DIAG_LOGGER.warn('Platform has ReadableStream but not pipeThrough!');\n        return {\n            body,\n            length: Promise.resolve(undefined),\n        };\n    }\n    let length = 0;\n    let resolveLength;\n    const lengthPromise = new Promise(resolve => {\n        resolveLength = resolve;\n    });\n    const transform = new TransformStream({\n        start() { },\n        async transform(chunk, controller) {\n            const bytearray = (await chunk);\n            length += bytearray.byteLength;\n            controller.enqueue(chunk);\n        },\n        flush() {\n            resolveLength(length);\n        },\n    });\n    return {\n        body: body.pipeThrough(transform),\n        length: lengthPromise,\n    };\n}\nfunction isDocument(value) {\n    return typeof Document !== 'undefined' && value instanceof Document;\n}\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(body) {\n    if (isDocument(body)) {\n        return new XMLSerializer().serializeToString(document).length;\n    }\n    // XMLHttpRequestBodyInit expands to the following:\n    if (typeof body === 'string') {\n        return getByteLength(body);\n    }\n    if (body instanceof Blob) {\n        return body.size;\n    }\n    if (body instanceof FormData) {\n        return getFormDataSize(body);\n    }\n    if (body instanceof URLSearchParams) {\n        return getByteLength(body.toString());\n    }\n    // ArrayBuffer | ArrayBufferView\n    if (body.byteLength !== undefined) {\n        return body.byteLength;\n    }\n    DIAG_LOGGER.warn('unknown body type');\n    return undefined;\n}\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s) {\n    return TEXT_ENCODER.encode(s).byteLength;\n}\nfunction getFormDataSize(formData) {\n    let size = 0;\n    for (const [key, value] of formData.entries()) {\n        size += key.length;\n        if (value instanceof Blob) {\n            size += value.size;\n        }\n        else {\n            size += value.length;\n        }\n    }\n    return size;\n}\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method) {\n    const knownMethods = getKnownMethods();\n    const methUpper = method.toUpperCase();\n    if (methUpper in knownMethods) {\n        return methUpper;\n    }\n    else {\n        return '_OTHER';\n    }\n}\nconst DEFAULT_KNOWN_METHODS = {\n    CONNECT: true,\n    DELETE: true,\n    GET: true,\n    HEAD: true,\n    OPTIONS: true,\n    PATCH: true,\n    POST: true,\n    PUT: true,\n    TRACE: true,\n};\nlet knownMethods;\nfunction getKnownMethods() {\n    if (knownMethods === undefined) {\n        const cfgMethods = getStringListFromEnv('OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS');\n        if (cfgMethods && cfgMethods.length > 0) {\n            knownMethods = {};\n            cfgMethods.forEach(m => {\n                knownMethods[m] = true;\n            });\n        }\n        else {\n            knownMethods = DEFAULT_KNOWN_METHODS;\n        }\n    }\n    return knownMethods;\n}\nconst HTTP_PORT_FROM_PROTOCOL = {\n    'https:': '443',\n    'http:': '80',\n};\nexport function serverPortFromUrl(url) {\n    const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n    // Guard with `if (serverPort)` because `Number('') === 0`.\n    if (serverPort && !isNaN(serverPort)) {\n        return serverPort;\n    }\n    else {\n        return undefined;\n    }\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.202.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { SemconvStability, semconvStabilityFromStr, isWrapped, InstrumentationBase, safeExecuteInTheMiddle, } from '@opentelemetry/instrumentation';\nimport * as core from '@opentelemetry/core';\nimport * as web from '@opentelemetry/sdk-trace-web';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { ATTR_HTTP_STATUS_CODE, ATTR_HTTP_HOST, ATTR_HTTP_USER_AGENT, ATTR_HTTP_SCHEME, ATTR_HTTP_URL, ATTR_HTTP_METHOD, ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, ATTR_HTTP_REQUEST_BODY_SIZE, } from '../src/semconv';\nimport { ATTR_ERROR_TYPE, ATTR_HTTP_REQUEST_METHOD, ATTR_HTTP_REQUEST_METHOD_ORIGINAL, ATTR_HTTP_RESPONSE_STATUS_CODE, ATTR_SERVER_ADDRESS, ATTR_SERVER_PORT, ATTR_URL_FULL, } from '@opentelemetry/semantic-conventions';\nimport { getFetchBodyLength, normalizeHttpRequestMethod, serverPortFromUrl, } from './utils';\nimport { VERSION } from './version';\nimport { _globalThis } from '@opentelemetry/core';\n// how long to wait for observer to collect information about resources\n// this is needed as event \"load\" is called before observer\n// hard to say how long it should really wait, seems like 300ms is\n// safe enough\nconst OBSERVER_WAIT_TIME_MS = 300;\nconst isNode = typeof process === 'object' && process.release?.name === 'node';\n/**\n * This class represents a fetch plugin for auto instrumentation\n */\nexport class FetchInstrumentation extends InstrumentationBase {\n    component = 'fetch';\n    version = VERSION;\n    moduleName = this.component;\n    _usedResources = new WeakSet();\n    _tasksCount = 0;\n    _semconvStability;\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-fetch', VERSION, config);\n        this._semconvStability = semconvStabilityFromStr('http', config?.semconvStabilityOptIn);\n    }\n    init() { }\n    /**\n     * Add cors pre flight child span\n     * @param span\n     * @param corsPreFlightRequest\n     */\n    _addChildSpan(span, corsPreFlightRequest) {\n        const childSpan = this.tracer.startSpan('CORS Preflight', {\n            startTime: corsPreFlightRequest[web.PerformanceTimingNames.FETCH_START],\n        }, api.trace.setSpan(api.context.active(), span));\n        const skipOldSemconvContentLengthAttrs = !(this._semconvStability & SemconvStability.OLD);\n        web.addSpanNetworkEvents(childSpan, corsPreFlightRequest, this.getConfig().ignoreNetworkEvents, undefined, skipOldSemconvContentLengthAttrs);\n        childSpan.end(corsPreFlightRequest[web.PerformanceTimingNames.RESPONSE_END]);\n    }\n    /**\n     * Adds more attributes to span just before ending it\n     * @param span\n     * @param response\n     */\n    _addFinalSpanAttributes(span, response) {\n        const parsedUrl = web.parseUrl(response.url);\n        if (this._semconvStability & SemconvStability.OLD) {\n            span.setAttribute(ATTR_HTTP_STATUS_CODE, response.status);\n            if (response.statusText != null) {\n                span.setAttribute(AttributeNames.HTTP_STATUS_TEXT, response.statusText);\n            }\n            span.setAttribute(ATTR_HTTP_HOST, parsedUrl.host);\n            span.setAttribute(ATTR_HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));\n            if (typeof navigator !== 'undefined') {\n                span.setAttribute(ATTR_HTTP_USER_AGENT, navigator.userAgent);\n            }\n        }\n        if (this._semconvStability & SemconvStability.STABLE) {\n            span.setAttribute(ATTR_HTTP_RESPONSE_STATUS_CODE, response.status);\n            // TODO: Set server.{address,port} at span creation for sampling decisions\n            // (a \"SHOULD\" requirement in semconv).\n            span.setAttribute(ATTR_SERVER_ADDRESS, parsedUrl.hostname);\n            const serverPort = serverPortFromUrl(parsedUrl);\n            if (serverPort) {\n                span.setAttribute(ATTR_SERVER_PORT, serverPort);\n            }\n        }\n    }\n    /**\n     * Add headers\n     * @param options\n     * @param spanUrl\n     */\n    _addHeaders(options, spanUrl) {\n        if (!web.shouldPropagateTraceHeaders(spanUrl, this.getConfig().propagateTraceHeaderCorsUrls)) {\n            const headers = {};\n            api.propagation.inject(api.context.active(), headers);\n            if (Object.keys(headers).length > 0) {\n                this._diag.debug('headers inject skipped due to CORS policy');\n            }\n            return;\n        }\n        if (options instanceof Request) {\n            api.propagation.inject(api.context.active(), options.headers, {\n                set: (h, k, v) => h.set(k, typeof v === 'string' ? v : String(v)),\n            });\n        }\n        else if (options.headers instanceof Headers) {\n            api.propagation.inject(api.context.active(), options.headers, {\n                set: (h, k, v) => h.set(k, typeof v === 'string' ? v : String(v)),\n            });\n        }\n        else if (options.headers instanceof Map) {\n            api.propagation.inject(api.context.active(), options.headers, {\n                set: (h, k, v) => h.set(k, typeof v === 'string' ? v : String(v)),\n            });\n        }\n        else {\n            const headers = {};\n            api.propagation.inject(api.context.active(), headers);\n            options.headers = Object.assign({}, headers, options.headers || {});\n        }\n    }\n    /**\n     * Clears the resource timings and all resources assigned with spans\n     *     when {@link FetchPluginConfig.clearTimingResources} is\n     *     set to true (default false)\n     * @private\n     */\n    _clearResources() {\n        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {\n            performance.clearResourceTimings();\n            this._usedResources = new WeakSet();\n        }\n    }\n    /**\n     * Creates a new span\n     * @param url\n     * @param options\n     */\n    _createSpan(url, options = {}) {\n        if (core.isUrlIgnored(url, this.getConfig().ignoreUrls)) {\n            this._diag.debug('ignoring span as url matches ignored url');\n            return;\n        }\n        let name = '';\n        const attributes = {};\n        if (this._semconvStability & SemconvStability.OLD) {\n            const method = (options.method || 'GET').toUpperCase();\n            name = `HTTP ${method}`;\n            attributes[AttributeNames.COMPONENT] = this.moduleName;\n            attributes[ATTR_HTTP_METHOD] = method;\n            attributes[ATTR_HTTP_URL] = url;\n        }\n        if (this._semconvStability & SemconvStability.STABLE) {\n            const origMethod = options.method;\n            const normMethod = normalizeHttpRequestMethod(options.method || 'GET');\n            if (!name) {\n                // The \"old\" span name wins if emitting both old and stable semconv\n                // ('http/dup').\n                name = normMethod;\n            }\n            attributes[ATTR_HTTP_REQUEST_METHOD] = normMethod;\n            if (normMethod !== origMethod) {\n                attributes[ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = origMethod;\n            }\n            attributes[ATTR_URL_FULL] = url;\n        }\n        return this.tracer.startSpan(name, {\n            kind: api.SpanKind.CLIENT,\n            attributes,\n        });\n    }\n    /**\n     * Finds appropriate resource and add network events to the span\n     * @param span\n     * @param resourcesObserver\n     * @param endTime\n     */\n    _findResourceAndAddNetworkEvents(span, resourcesObserver, endTime) {\n        let resources = resourcesObserver.entries;\n        if (!resources.length) {\n            if (!performance.getEntriesByType) {\n                return;\n            }\n            // fallback - either Observer is not available or it took longer\n            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough\n            // information\n            resources = performance.getEntriesByType('resource');\n        }\n        const resource = web.getResource(resourcesObserver.spanUrl, resourcesObserver.startTime, endTime, resources, this._usedResources, 'fetch');\n        if (resource.mainRequest) {\n            const mainRequest = resource.mainRequest;\n            this._markResourceAsUsed(mainRequest);\n            const corsPreFlightRequest = resource.corsPreFlightRequest;\n            if (corsPreFlightRequest) {\n                this._addChildSpan(span, corsPreFlightRequest);\n                this._markResourceAsUsed(corsPreFlightRequest);\n            }\n            const skipOldSemconvContentLengthAttrs = !(this._semconvStability & SemconvStability.OLD);\n            web.addSpanNetworkEvents(span, mainRequest, this.getConfig().ignoreNetworkEvents, undefined, skipOldSemconvContentLengthAttrs);\n        }\n    }\n    /**\n     * Marks certain [resource]{@link PerformanceResourceTiming} when information\n     * from this is used to add events to span.\n     * This is done to avoid reusing the same resource again for next span\n     * @param resource\n     */\n    _markResourceAsUsed(resource) {\n        this._usedResources.add(resource);\n    }\n    /**\n     * Finish span, add attributes, network events etc.\n     * @param span\n     * @param spanData\n     * @param response\n     */\n    _endSpan(span, spanData, response) {\n        const endTime = core.millisToHrTime(Date.now());\n        const performanceEndTime = core.hrTime();\n        this._addFinalSpanAttributes(span, response);\n        if (this._semconvStability & SemconvStability.STABLE) {\n            // https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#status\n            if (response.status >= 400) {\n                span.setStatus({ code: api.SpanStatusCode.ERROR });\n                span.setAttribute(ATTR_ERROR_TYPE, String(response.status));\n            }\n        }\n        setTimeout(() => {\n            spanData.observer?.disconnect();\n            this._findResourceAndAddNetworkEvents(span, spanData, performanceEndTime);\n            this._tasksCount--;\n            this._clearResources();\n            span.end(endTime);\n        }, OBSERVER_WAIT_TIME_MS);\n    }\n    /**\n     * Patches the constructor of fetch\n     */\n    _patchConstructor() {\n        return original => {\n            const plugin = this;\n            return function patchConstructor(...args) {\n                const self = this;\n                const url = web.parseUrl(args[0] instanceof Request ? args[0].url : String(args[0])).href;\n                const options = args[0] instanceof Request ? args[0] : args[1] || {};\n                const createdSpan = plugin._createSpan(url, options);\n                if (!createdSpan) {\n                    return original.apply(this, args);\n                }\n                const spanData = plugin._prepareSpanData(url);\n                if (plugin.getConfig().measureRequestSize) {\n                    getFetchBodyLength(...args)\n                        .then(bodyLength => {\n                        if (!bodyLength)\n                            return;\n                        if (plugin._semconvStability & SemconvStability.OLD) {\n                            createdSpan.setAttribute(ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, bodyLength);\n                        }\n                        if (plugin._semconvStability & SemconvStability.STABLE) {\n                            createdSpan.setAttribute(ATTR_HTTP_REQUEST_BODY_SIZE, bodyLength);\n                        }\n                    })\n                        .catch(error => {\n                        plugin._diag.warn('getFetchBodyLength', error);\n                    });\n                }\n                function endSpanOnError(span, error) {\n                    plugin._applyAttributesAfterFetch(span, options, error);\n                    plugin._endSpan(span, spanData, {\n                        status: error.status || 0,\n                        statusText: error.message,\n                        url,\n                    });\n                }\n                function endSpanOnSuccess(span, response) {\n                    plugin._applyAttributesAfterFetch(span, options, response);\n                    if (response.status >= 200 && response.status < 400) {\n                        plugin._endSpan(span, spanData, response);\n                    }\n                    else {\n                        plugin._endSpan(span, spanData, {\n                            status: response.status,\n                            statusText: response.statusText,\n                            url,\n                        });\n                    }\n                }\n                function onSuccess(span, resolve, response) {\n                    try {\n                        const resClone = response.clone();\n                        const body = resClone.body;\n                        if (body) {\n                            const reader = body.getReader();\n                            const read = () => {\n                                reader.read().then(({ done }) => {\n                                    if (done) {\n                                        endSpanOnSuccess(span, response);\n                                    }\n                                    else {\n                                        read();\n                                    }\n                                }, error => {\n                                    endSpanOnError(span, error);\n                                });\n                            };\n                            read();\n                        }\n                        else {\n                            // some older browsers don't have .body implemented\n                            endSpanOnSuccess(span, response);\n                        }\n                    }\n                    finally {\n                        resolve(response);\n                    }\n                }\n                function onError(span, reject, error) {\n                    try {\n                        endSpanOnError(span, error);\n                    }\n                    finally {\n                        reject(error);\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    return api.context.with(api.trace.setSpan(api.context.active(), createdSpan), () => {\n                        plugin._addHeaders(options, url);\n                        // Important to execute \"_callRequestHook\" after \"_addHeaders\", allowing the consumer code to override the request headers.\n                        plugin._callRequestHook(createdSpan, options);\n                        plugin._tasksCount++;\n                        // TypeScript complains about arrow function captured a this typed as globalThis\n                        // ts(7041)\n                        return original\n                            .apply(self, options instanceof Request ? [options] : [url, options])\n                            .then(onSuccess.bind(self, createdSpan, resolve), onError.bind(self, createdSpan, reject));\n                    });\n                });\n            };\n        };\n    }\n    _applyAttributesAfterFetch(span, request, result) {\n        const applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;\n        if (applyCustomAttributesOnSpan) {\n            safeExecuteInTheMiddle(() => applyCustomAttributesOnSpan(span, request, result), error => {\n                if (!error) {\n                    return;\n                }\n                this._diag.error('applyCustomAttributesOnSpan', error);\n            }, true);\n        }\n    }\n    _callRequestHook(span, request) {\n        const requestHook = this.getConfig().requestHook;\n        if (requestHook) {\n            safeExecuteInTheMiddle(() => requestHook(span, request), error => {\n                if (!error) {\n                    return;\n                }\n                this._diag.error('requestHook', error);\n            }, true);\n        }\n    }\n    /**\n     * Prepares a span data - needed later for matching appropriate network\n     *     resources\n     * @param spanUrl\n     */\n    _prepareSpanData(spanUrl) {\n        const startTime = core.hrTime();\n        const entries = [];\n        if (typeof PerformanceObserver !== 'function') {\n            return { entries, startTime, spanUrl };\n        }\n        const observer = new PerformanceObserver(list => {\n            const perfObsEntries = list.getEntries();\n            perfObsEntries.forEach(entry => {\n                if (entry.initiatorType === 'fetch' && entry.name === spanUrl) {\n                    entries.push(entry);\n                }\n            });\n        });\n        observer.observe({\n            entryTypes: ['resource'],\n        });\n        return { entries, observer, startTime, spanUrl };\n    }\n    /**\n     * implements enable function\n     */\n    enable() {\n        if (isNode) {\n            // Node.js v18+ *does* have a global `fetch()`, but this package does not\n            // support instrumenting it.\n            this._diag.warn(\"this instrumentation is intended for web usage only, it does not instrument Node.js's fetch()\");\n            return;\n        }\n        if (isWrapped(fetch)) {\n            this._unwrap(_globalThis, 'fetch');\n            this._diag.debug('removing previous patch for constructor');\n        }\n        this._wrap(_globalThis, 'fetch', this._patchConstructor());\n    }\n    /**\n     * implements unpatch function\n     */\n    disable() {\n        if (isNode) {\n            return;\n        }\n        this._unwrap(_globalThis, 'fetch');\n        this._usedResources = new WeakSet();\n    }\n}\n//# sourceMappingURL=fetch.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.\n *\n * @example www.example.org\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.\n */\nexport const ATTR_HTTP_HOST = 'http.host';\n/**\n * Deprecated, use `http.request.method` instead.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.method`.\n */\nexport const ATTR_HTTP_METHOD = 'http.method';\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_HTTP_REQUEST_BODY_SIZE = 'http.request.body.size';\n/**\n * Deprecated, use `http.request.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.body.size`.\n */\nexport const ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\n/**\n * Deprecated, use `http.response.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.header.<key>`.\n */\nexport const ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\n/**\n * Deprecated, use `url.scheme` instead.\n *\n * @example http\n * @example https\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.scheme` instead.\n */\nexport const ATTR_HTTP_SCHEME = 'http.scheme';\n/**\n * Deprecated, use `http.response.status_code` instead.\n *\n * @example 200\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.status_code`.\n */\nexport const ATTR_HTTP_STATUS_CODE = 'http.status_code';\n/**\n * Deprecated, use `url.full` instead.\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.full`.\n */\nexport const ATTR_HTTP_URL = 'http.url';\n/**\n * Deprecated, use `user_agent.original` instead.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `user_agent.original`.\n */\nexport const ATTR_HTTP_USER_AGENT = 'http.user_agent';\n//# sourceMappingURL=semconv.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var EventNames;\n(function (EventNames) {\n    EventNames[\"METHOD_OPEN\"] = \"open\";\n    EventNames[\"METHOD_SEND\"] = \"send\";\n    EventNames[\"EVENT_ABORT\"] = \"abort\";\n    EventNames[\"EVENT_ERROR\"] = \"error\";\n    EventNames[\"EVENT_LOAD\"] = \"loaded\";\n    EventNames[\"EVENT_TIMEOUT\"] = \"timeout\";\n})(EventNames || (EventNames = {}));\n//# sourceMappingURL=EventNames.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-fetch\n// These may be unified in the future.\nimport * as api from '@opentelemetry/api';\nimport { getStringListFromEnv } from '@opentelemetry/core';\nconst DIAG_LOGGER = api.diag.createComponentLogger({\n    namespace: '@opentelemetry/opentelemetry-instrumentation-xml-http-request/utils',\n});\nfunction isDocument(value) {\n    return typeof Document !== 'undefined' && value instanceof Document;\n}\n/**\n * Helper function to determine payload content length for XHR requests\n * @param body\n * @returns content length\n */\nexport function getXHRBodyLength(body) {\n    if (isDocument(body)) {\n        return new XMLSerializer().serializeToString(document).length;\n    }\n    // XMLHttpRequestBodyInit expands to the following:\n    if (typeof body === 'string') {\n        return getByteLength(body);\n    }\n    if (body instanceof Blob) {\n        return body.size;\n    }\n    if (body instanceof FormData) {\n        return getFormDataSize(body);\n    }\n    if (body instanceof URLSearchParams) {\n        return getByteLength(body.toString());\n    }\n    // ArrayBuffer | ArrayBufferView\n    if (body.byteLength !== undefined) {\n        return body.byteLength;\n    }\n    DIAG_LOGGER.warn('unknown body type');\n    return undefined;\n}\nconst TEXT_ENCODER = new TextEncoder();\nfunction getByteLength(s) {\n    return TEXT_ENCODER.encode(s).byteLength;\n}\nfunction getFormDataSize(formData) {\n    let size = 0;\n    for (const [key, value] of formData.entries()) {\n        size += key.length;\n        if (value instanceof Blob) {\n            size += value.size;\n        }\n        else {\n            size += value.length;\n        }\n    }\n    return size;\n}\n/**\n * Normalize an HTTP request method string per `http.request.method` spec\n * https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#http-client-span\n */\nexport function normalizeHttpRequestMethod(method) {\n    const knownMethods = getKnownMethods();\n    const methUpper = method.toUpperCase();\n    if (methUpper in knownMethods) {\n        return methUpper;\n    }\n    else {\n        return '_OTHER';\n    }\n}\nconst DEFAULT_KNOWN_METHODS = {\n    CONNECT: true,\n    DELETE: true,\n    GET: true,\n    HEAD: true,\n    OPTIONS: true,\n    PATCH: true,\n    POST: true,\n    PUT: true,\n    TRACE: true,\n};\nlet knownMethods;\nfunction getKnownMethods() {\n    if (knownMethods === undefined) {\n        const cfgMethods = getStringListFromEnv('OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS');\n        if (cfgMethods && cfgMethods.length > 0) {\n            knownMethods = {};\n            cfgMethods.forEach(m => {\n                knownMethods[m] = true;\n            });\n        }\n        else {\n            knownMethods = DEFAULT_KNOWN_METHODS;\n        }\n    }\n    return knownMethods;\n}\nconst HTTP_PORT_FROM_PROTOCOL = {\n    'https:': '443',\n    'http:': '80',\n};\nexport function serverPortFromUrl(url) {\n    const serverPort = Number(url.port || HTTP_PORT_FROM_PROTOCOL[url.protocol]);\n    // Guard with `if (serverPort)` because `Number('') === 0`.\n    if (serverPort && !isNaN(serverPort)) {\n        return serverPort;\n    }\n    else {\n        return undefined;\n    }\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.202.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nexport var AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames || (AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { SemconvStability, semconvStabilityFromStr, isWrapped, InstrumentationBase, safeExecuteInTheMiddle, } from '@opentelemetry/instrumentation';\nimport { hrTime, isUrlIgnored, otperformance } from '@opentelemetry/core';\nimport { addSpanNetworkEvents, getResource, PerformanceTimingNames as PTN, shouldPropagateTraceHeaders, parseUrl, } from '@opentelemetry/sdk-trace-web';\nimport { ATTR_ERROR_TYPE, ATTR_HTTP_REQUEST_METHOD, ATTR_HTTP_REQUEST_METHOD_ORIGINAL, ATTR_HTTP_RESPONSE_STATUS_CODE, ATTR_SERVER_ADDRESS, ATTR_SERVER_PORT, ATTR_URL_FULL, } from '@opentelemetry/semantic-conventions';\nimport { ATTR_HTTP_HOST, ATTR_HTTP_METHOD, ATTR_HTTP_SCHEME, ATTR_HTTP_STATUS_CODE, ATTR_HTTP_URL, ATTR_HTTP_USER_AGENT, ATTR_HTTP_REQUEST_BODY_SIZE, ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, } from './semconv';\nimport { EventNames } from './enums/EventNames';\nimport { normalizeHttpRequestMethod, serverPortFromUrl, getXHRBodyLength, } from './utils';\nimport { VERSION } from './version';\nimport { AttributeNames } from './enums/AttributeNames';\n// how long to wait for observer to collect information about resources\n// this is needed as event \"load\" is called before observer\n// hard to say how long it should really wait, seems like 300ms is\n// safe enough\nconst OBSERVER_WAIT_TIME_MS = 300;\n/**\n * This class represents a XMLHttpRequest plugin for auto instrumentation\n */\nexport class XMLHttpRequestInstrumentation extends InstrumentationBase {\n    component = 'xml-http-request';\n    version = VERSION;\n    moduleName = this.component;\n    _tasksCount = 0;\n    _xhrMem = new WeakMap();\n    _usedResources = new WeakSet();\n    _semconvStability;\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-xml-http-request', VERSION, config);\n        this._semconvStability = semconvStabilityFromStr('http', config?.semconvStabilityOptIn);\n    }\n    init() { }\n    /**\n     * Adds custom headers to XMLHttpRequest\n     * @param xhr\n     * @param spanUrl\n     * @private\n     */\n    _addHeaders(xhr, spanUrl) {\n        const url = parseUrl(spanUrl).href;\n        if (!shouldPropagateTraceHeaders(url, this.getConfig().propagateTraceHeaderCorsUrls)) {\n            const headers = {};\n            api.propagation.inject(api.context.active(), headers);\n            if (Object.keys(headers).length > 0) {\n                this._diag.debug('headers inject skipped due to CORS policy');\n            }\n            return;\n        }\n        const headers = {};\n        api.propagation.inject(api.context.active(), headers);\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, String(headers[key]));\n        });\n    }\n    /**\n     * Add cors pre flight child span\n     * @param span\n     * @param corsPreFlightRequest\n     * @private\n     */\n    _addChildSpan(span, corsPreFlightRequest) {\n        api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n            const childSpan = this.tracer.startSpan('CORS Preflight', {\n                startTime: corsPreFlightRequest[PTN.FETCH_START],\n            });\n            const skipOldSemconvContentLengthAttrs = !(this._semconvStability & SemconvStability.OLD);\n            addSpanNetworkEvents(childSpan, corsPreFlightRequest, this.getConfig().ignoreNetworkEvents, undefined, skipOldSemconvContentLengthAttrs);\n            childSpan.end(corsPreFlightRequest[PTN.RESPONSE_END]);\n        });\n    }\n    /**\n     * Add attributes when span is going to end\n     * @param span\n     * @param xhr\n     * @param spanUrl\n     * @private\n     */\n    _addFinalSpanAttributes(span, xhrMem, spanUrl) {\n        if (this._semconvStability & SemconvStability.OLD) {\n            if (xhrMem.status !== undefined) {\n                span.setAttribute(ATTR_HTTP_STATUS_CODE, xhrMem.status);\n            }\n            if (xhrMem.statusText !== undefined) {\n                span.setAttribute(AttributeNames.HTTP_STATUS_TEXT, xhrMem.statusText);\n            }\n            if (typeof spanUrl === 'string') {\n                const parsedUrl = parseUrl(spanUrl);\n                span.setAttribute(ATTR_HTTP_HOST, parsedUrl.host);\n                span.setAttribute(ATTR_HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));\n            }\n            // @TODO do we want to collect this or it will be collected earlier once only or\n            //    maybe when parent span is not available ?\n            span.setAttribute(ATTR_HTTP_USER_AGENT, navigator.userAgent);\n        }\n        if (this._semconvStability & SemconvStability.STABLE) {\n            if (xhrMem.status) {\n                // Intentionally exclude status=0, because XHR uses 0 for before a\n                // response is received and semconv says to only add the attribute if\n                // received a response.\n                span.setAttribute(ATTR_HTTP_RESPONSE_STATUS_CODE, xhrMem.status);\n            }\n        }\n    }\n    _applyAttributesAfterXHR(span, xhr) {\n        const applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;\n        if (typeof applyCustomAttributesOnSpan === 'function') {\n            safeExecuteInTheMiddle(() => applyCustomAttributesOnSpan(span, xhr), error => {\n                if (!error) {\n                    return;\n                }\n                this._diag.error('applyCustomAttributesOnSpan', error);\n            }, true);\n        }\n    }\n    /**\n     * will collect information about all resources created\n     * between \"send\" and \"end\" with additional waiting for main resource\n     * @param xhr\n     * @param spanUrl\n     * @private\n     */\n    _addResourceObserver(xhr, spanUrl) {\n        const xhrMem = this._xhrMem.get(xhr);\n        if (!xhrMem ||\n            typeof PerformanceObserver !== 'function' ||\n            typeof PerformanceResourceTiming !== 'function') {\n            return;\n        }\n        xhrMem.createdResources = {\n            observer: new PerformanceObserver(list => {\n                const entries = list.getEntries();\n                const parsedUrl = parseUrl(spanUrl);\n                entries.forEach(entry => {\n                    if (entry.initiatorType === 'xmlhttprequest' &&\n                        entry.name === parsedUrl.href) {\n                        if (xhrMem.createdResources) {\n                            xhrMem.createdResources.entries.push(entry);\n                        }\n                    }\n                });\n            }),\n            entries: [],\n        };\n        xhrMem.createdResources.observer.observe({\n            entryTypes: ['resource'],\n        });\n    }\n    /**\n     * Clears the resource timings and all resources assigned with spans\n     *     when {@link XMLHttpRequestInstrumentationConfig.clearTimingResources} is\n     *     set to true (default false)\n     * @private\n     */\n    _clearResources() {\n        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {\n            otperformance.clearResourceTimings();\n            this._xhrMem = new WeakMap();\n            this._usedResources = new WeakSet();\n        }\n    }\n    /**\n     * Finds appropriate resource and add network events to the span\n     * @param span\n     */\n    _findResourceAndAddNetworkEvents(xhrMem, span, spanUrl, startTime, endTime) {\n        if (!spanUrl || !startTime || !endTime || !xhrMem.createdResources) {\n            return;\n        }\n        let resources = xhrMem.createdResources.entries;\n        if (!resources || !resources.length) {\n            // fallback - either Observer is not available or it took longer\n            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough\n            // information\n            // ts thinks this is the perf_hooks module, but it is the browser performance api\n            resources = otperformance.getEntriesByType('resource');\n        }\n        const resource = getResource(parseUrl(spanUrl).href, startTime, endTime, resources, this._usedResources);\n        if (resource.mainRequest) {\n            const mainRequest = resource.mainRequest;\n            this._markResourceAsUsed(mainRequest);\n            const corsPreFlightRequest = resource.corsPreFlightRequest;\n            if (corsPreFlightRequest) {\n                this._addChildSpan(span, corsPreFlightRequest);\n                this._markResourceAsUsed(corsPreFlightRequest);\n            }\n            const skipOldSemconvContentLengthAttrs = !(this._semconvStability & SemconvStability.OLD);\n            addSpanNetworkEvents(span, mainRequest, this.getConfig().ignoreNetworkEvents, undefined, skipOldSemconvContentLengthAttrs);\n        }\n    }\n    /**\n     * Removes the previous information about span.\n     * This might happened when the same xhr is used again.\n     * @param xhr\n     * @private\n     */\n    _cleanPreviousSpanInformation(xhr) {\n        const xhrMem = this._xhrMem.get(xhr);\n        if (xhrMem) {\n            const callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n            if (callbackToRemoveEvents) {\n                callbackToRemoveEvents();\n            }\n            this._xhrMem.delete(xhr);\n        }\n    }\n    /**\n     * Creates a new span when method \"open\" is called\n     * @param xhr\n     * @param url\n     * @param method\n     * @private\n     */\n    _createSpan(xhr, url, method) {\n        if (isUrlIgnored(url, this.getConfig().ignoreUrls)) {\n            this._diag.debug('ignoring span as url matches ignored url');\n            return;\n        }\n        let name = '';\n        const parsedUrl = parseUrl(url);\n        const attributes = {};\n        if (this._semconvStability & SemconvStability.OLD) {\n            name = method.toUpperCase();\n            attributes[ATTR_HTTP_METHOD] = method;\n            attributes[ATTR_HTTP_URL] = parsedUrl.toString();\n        }\n        if (this._semconvStability & SemconvStability.STABLE) {\n            const origMethod = method;\n            const normMethod = normalizeHttpRequestMethod(method);\n            if (!name) {\n                // The \"old\" span name wins if emitting both old and stable semconv\n                // ('http/dup').\n                name = normMethod;\n            }\n            attributes[ATTR_HTTP_REQUEST_METHOD] = normMethod;\n            if (normMethod !== origMethod) {\n                attributes[ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = origMethod;\n            }\n            attributes[ATTR_URL_FULL] = parsedUrl.toString();\n            attributes[ATTR_SERVER_ADDRESS] = parsedUrl.hostname;\n            const serverPort = serverPortFromUrl(parsedUrl);\n            if (serverPort) {\n                attributes[ATTR_SERVER_PORT] = serverPort;\n            }\n        }\n        const currentSpan = this.tracer.startSpan(name, {\n            kind: api.SpanKind.CLIENT,\n            attributes,\n        });\n        currentSpan.addEvent(EventNames.METHOD_OPEN);\n        this._cleanPreviousSpanInformation(xhr);\n        this._xhrMem.set(xhr, {\n            span: currentSpan,\n            spanUrl: url,\n        });\n        return currentSpan;\n    }\n    /**\n     * Marks certain [resource]{@link PerformanceResourceTiming} when information\n     * from this is used to add events to span.\n     * This is done to avoid reusing the same resource again for next span\n     * @param resource\n     * @private\n     */\n    _markResourceAsUsed(resource) {\n        this._usedResources.add(resource);\n    }\n    /**\n     * Patches the method open\n     * @private\n     */\n    _patchOpen() {\n        return (original) => {\n            const plugin = this;\n            return function patchOpen(...args) {\n                const method = args[0];\n                const url = args[1];\n                plugin._createSpan(this, url, method);\n                return original.apply(this, args);\n            };\n        };\n    }\n    /**\n     * Patches the method send\n     * @private\n     */\n    _patchSend() {\n        const plugin = this;\n        function endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime) {\n            const callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n            if (typeof callbackToRemoveEvents === 'function') {\n                callbackToRemoveEvents();\n            }\n            const { span, spanUrl, sendStartTime } = xhrMem;\n            if (span) {\n                plugin._findResourceAndAddNetworkEvents(xhrMem, span, spanUrl, sendStartTime, performanceEndTime);\n                span.addEvent(eventName, endTime);\n                plugin._addFinalSpanAttributes(span, xhrMem, spanUrl);\n                span.end(endTime);\n                plugin._tasksCount--;\n            }\n            plugin._clearResources();\n        }\n        function endSpan(eventName, xhr, isError, errorType) {\n            const xhrMem = plugin._xhrMem.get(xhr);\n            if (!xhrMem) {\n                return;\n            }\n            xhrMem.status = xhr.status;\n            xhrMem.statusText = xhr.statusText;\n            plugin._xhrMem.delete(xhr);\n            if (xhrMem.span) {\n                const span = xhrMem.span;\n                plugin._applyAttributesAfterXHR(span, xhr);\n                if (plugin._semconvStability & SemconvStability.STABLE) {\n                    if (isError) {\n                        if (errorType) {\n                            span.setStatus({\n                                code: api.SpanStatusCode.ERROR,\n                                message: errorType,\n                            });\n                            span.setAttribute(ATTR_ERROR_TYPE, errorType);\n                        }\n                    }\n                    else if (xhrMem.status && xhrMem.status >= 400) {\n                        span.setStatus({ code: api.SpanStatusCode.ERROR });\n                        span.setAttribute(ATTR_ERROR_TYPE, String(xhrMem.status));\n                    }\n                }\n            }\n            const performanceEndTime = hrTime();\n            const endTime = Date.now();\n            // the timeout is needed as observer doesn't have yet information\n            // when event \"load\" is called. Also the time may differ depends on\n            // browser and speed of computer\n            setTimeout(() => {\n                endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime);\n            }, OBSERVER_WAIT_TIME_MS);\n        }\n        function onError() {\n            endSpan(EventNames.EVENT_ERROR, this, true, 'error');\n        }\n        function onAbort() {\n            endSpan(EventNames.EVENT_ABORT, this, false);\n        }\n        function onTimeout() {\n            endSpan(EventNames.EVENT_TIMEOUT, this, true, 'timeout');\n        }\n        function onLoad() {\n            if (this.status < 299) {\n                endSpan(EventNames.EVENT_LOAD, this, false);\n            }\n            else {\n                endSpan(EventNames.EVENT_ERROR, this, false);\n            }\n        }\n        function unregister(xhr) {\n            xhr.removeEventListener('abort', onAbort);\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onTimeout);\n            const xhrMem = plugin._xhrMem.get(xhr);\n            if (xhrMem) {\n                xhrMem.callbackToRemoveEvents = undefined;\n            }\n        }\n        return (original) => {\n            return function patchSend(...args) {\n                const xhrMem = plugin._xhrMem.get(this);\n                if (!xhrMem) {\n                    return original.apply(this, args);\n                }\n                const currentSpan = xhrMem.span;\n                const spanUrl = xhrMem.spanUrl;\n                if (currentSpan && spanUrl) {\n                    if (plugin.getConfig().measureRequestSize && args?.[0]) {\n                        const body = args[0];\n                        const bodyLength = getXHRBodyLength(body);\n                        if (bodyLength !== undefined) {\n                            if (plugin._semconvStability & SemconvStability.OLD) {\n                                currentSpan.setAttribute(ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, bodyLength);\n                            }\n                            if (plugin._semconvStability & SemconvStability.STABLE) {\n                                currentSpan.setAttribute(ATTR_HTTP_REQUEST_BODY_SIZE, bodyLength);\n                            }\n                        }\n                    }\n                    api.context.with(api.trace.setSpan(api.context.active(), currentSpan), () => {\n                        plugin._tasksCount++;\n                        xhrMem.sendStartTime = hrTime();\n                        currentSpan.addEvent(EventNames.METHOD_SEND);\n                        this.addEventListener('abort', onAbort);\n                        this.addEventListener('error', onError);\n                        this.addEventListener('load', onLoad);\n                        this.addEventListener('timeout', onTimeout);\n                        xhrMem.callbackToRemoveEvents = () => {\n                            unregister(this);\n                            if (xhrMem.createdResources) {\n                                xhrMem.createdResources.observer.disconnect();\n                            }\n                        };\n                        plugin._addHeaders(this, spanUrl);\n                        plugin._addResourceObserver(this, spanUrl);\n                    });\n                }\n                return original.apply(this, args);\n            };\n        };\n    }\n    /**\n     * implements enable function\n     */\n    enable() {\n        this._diag.debug('applying patch to', this.moduleName, this.version);\n        if (isWrapped(XMLHttpRequest.prototype.open)) {\n            this._unwrap(XMLHttpRequest.prototype, 'open');\n            this._diag.debug('removing previous patch from method open');\n        }\n        if (isWrapped(XMLHttpRequest.prototype.send)) {\n            this._unwrap(XMLHttpRequest.prototype, 'send');\n            this._diag.debug('removing previous patch from method send');\n        }\n        this._wrap(XMLHttpRequest.prototype, 'open', this._patchOpen());\n        this._wrap(XMLHttpRequest.prototype, 'send', this._patchSend());\n    }\n    /**\n     * implements disable function\n     */\n    disable() {\n        this._diag.debug('removing patch from', this.moduleName, this.version);\n        this._unwrap(XMLHttpRequest.prototype, 'open');\n        this._unwrap(XMLHttpRequest.prototype, 'send');\n        this._tasksCount = 0;\n        this._xhrMem = new WeakMap();\n        this._usedResources = new WeakSet();\n    }\n}\n//# sourceMappingURL=xhr.js.map","import { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport { faro, getUrlFromResource } from '@grafana/faro-web-sdk';\nexport class FaroXhrInstrumentation extends XMLHttpRequestInstrumentation {\n    constructor(config = {}) {\n        super(config);\n        const self = this;\n        this.parentCreateSpan = self._createSpan.bind(this);\n    }\n    // Patching the parent's private method to handle url type string or URL\n    _patchOpen() {\n        return (original) => {\n            const plugin = this;\n            return function patchOpen(...args) {\n                try {\n                    const method = args[0];\n                    let url = getUrlFromResource(args[1]);\n                    plugin.parentCreateSpan(this, url, method);\n                }\n                catch (error) {\n                    faro.internalLogger.error(error);\n                }\n                return original.apply(this, args);\n            };\n        };\n    }\n}\n//# sourceMappingURL=faroXhrInstrumentation.js.map","import { SpanStatusCode } from '@opentelemetry/api';\n/**\n * Adds HTTP status code to every span.\n *\n * The fetch instrumentation does not always set the span status to error as defined by the spec.\n * To work around that issue we manually set the span status.\n *\n * Issue: https://github.com/open-telemetry/opentelemetry-js/issues/3564\n * Spec: https://github.com/open-telemetry/opentelemetry-specification/blob/v1.20.0/specification/trace/semantic_conventions/http.md#status\n */\nexport function setSpanStatusOnFetchError(span, _request, result) {\n    const httpStatusCode = result instanceof Error ? 0 : result.status;\n    setSpanStatus(span, httpStatusCode);\n}\nexport function setSpanStatusOnXMLHttpRequestError(span, xhr) {\n    setSpanStatus(span, xhr.status);\n}\nfunction setSpanStatus(span, httpStatusCode) {\n    if (httpStatusCode == null) {\n        return;\n    }\n    const isError = httpStatusCode === 0;\n    const isClientOrServerError = httpStatusCode >= 400 && httpStatusCode < 600;\n    if (isError || isClientOrServerError) {\n        span.setStatus({ code: SpanStatusCode.ERROR });\n    }\n}\nexport function fetchCustomAttributeFunctionWithDefaults(callback) {\n    return (span, request, result) => {\n        setSpanStatusOnFetchError(span, request, result);\n        callback === null || callback === void 0 ? void 0 : callback(span, request, result);\n    };\n}\nexport function xhrCustomAttributeFunctionWithDefaults(callback) {\n    return (span, xhr) => {\n        setSpanStatusOnXMLHttpRequestError(span, xhr);\n        callback === null || callback === void 0 ? void 0 : callback(span, xhr);\n    };\n}\n//# sourceMappingURL=instrumentationUtils.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { FaroXhrInstrumentation } from './faroXhrInstrumentation';\nimport { fetchCustomAttributeFunctionWithDefaults, xhrCustomAttributeFunctionWithDefaults, } from './instrumentationUtils';\nexport function getDefaultOTELInstrumentations(options = {}) {\n    const { fetchInstrumentationOptions, xhrInstrumentationOptions } = options, sharedOptions = __rest(options, [\"fetchInstrumentationOptions\", \"xhrInstrumentationOptions\"]);\n    const fetchOpts = createFetchInstrumentationOptions(fetchInstrumentationOptions, sharedOptions);\n    const xhrOpts = createXhrInstrumentationOptions(xhrInstrumentationOptions, sharedOptions);\n    return [new FetchInstrumentation(fetchOpts), new FaroXhrInstrumentation(xhrOpts)];\n}\nfunction createFetchInstrumentationOptions(fetchInstrumentationOptions, sharedOptions) {\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, sharedOptions), { ignoreNetworkEvents: true }), fetchInstrumentationOptions), { \n        // always keep this function\n        applyCustomAttributesOnSpan: fetchCustomAttributeFunctionWithDefaults(fetchInstrumentationOptions === null || fetchInstrumentationOptions === void 0 ? void 0 : fetchInstrumentationOptions.applyCustomAttributesOnSpan) });\n}\nfunction createXhrInstrumentationOptions(xhrInstrumentationOptions, sharedOptions) {\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, sharedOptions), { ignoreNetworkEvents: true }), xhrInstrumentationOptions), { \n        // always keep this function\n        applyCustomAttributesOnSpan: xhrCustomAttributeFunctionWithDefaults(xhrInstrumentationOptions === null || xhrInstrumentationOptions === void 0 ? void 0 : xhrInstrumentationOptions.applyCustomAttributesOnSpan) });\n}\n//# sourceMappingURL=getDefaultOTELInstrumentations.js.map","import { SamplingDecision } from '@opentelemetry/sdk-trace-web';\nexport function getSamplingDecision(sessionMeta = {}) {\n    var _a;\n    const isSessionSampled = ((_a = sessionMeta.attributes) === null || _a === void 0 ? void 0 : _a['isSampled']) === 'true';\n    const samplingDecision = isSessionSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD;\n    return samplingDecision;\n}\n//# sourceMappingURL=sampler.js.map","import { context, trace } from '@opentelemetry/api';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { defaultResource, resourceFromAttributes } from '@opentelemetry/resources';\nimport { BatchSpanProcessor, WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { ATTR_SERVICE_NAME, ATTR_SERVICE_VERSION, ATTR_USER_AGENT_ORIGINAL, SEMRESATTRS_DEPLOYMENT_ENVIRONMENT, } from '@opentelemetry/semantic-conventions';\nimport { BaseInstrumentation, isArray, VERSION } from '@grafana/faro-web-sdk';\nimport { FaroMetaAttributesSpanProcessor } from './faroMetaAttributesSpanProcessor';\nimport { FaroTraceExporter } from './faroTraceExporter';\nimport { FaroUserActionSpanProcessor } from './faroUserActionSpanProcessor';\nimport { getDefaultOTELInstrumentations } from './getDefaultOTELInstrumentations';\nimport { getSamplingDecision } from './sampler';\nimport { ATTR_BROWSER_BRANDS, ATTR_BROWSER_LANGUAGE, ATTR_BROWSER_MOBILE, ATTR_BROWSER_PLATFORM, ATTR_DEPLOYMENT_ENVIRONMENT_NAME, ATTR_PROCESS_RUNTIME_NAME, ATTR_PROCESS_RUNTIME_VERSION, ATTR_SERVICE_NAMESPACE, ATTR_TELEMETRY_DISTRO_NAME, ATTR_TELEMETRY_DISTRO_VERSION, } from './semconv';\n// the providing of app name here is not great\n// should delay initialization and provide the full Faro config,\n// taking app name from it\nexport class TracingInstrumentation extends BaseInstrumentation {\n    constructor(options = {}) {\n        super();\n        this.options = options;\n        this.name = '@grafana/faro-web-tracing';\n        this.version = VERSION;\n    }\n    initialize() {\n        var _a, _b, _c, _d, _e;\n        const options = this.options;\n        const attributes = {};\n        if (this.config.app.name) {\n            attributes[ATTR_SERVICE_NAME] = this.config.app.name;\n        }\n        if (this.config.app.namespace) {\n            attributes[ATTR_SERVICE_NAMESPACE] = this.config.app.namespace;\n        }\n        if (this.config.app.version) {\n            attributes[ATTR_SERVICE_VERSION] = this.config.app.version;\n        }\n        if (this.config.app.environment) {\n            attributes[ATTR_DEPLOYMENT_ENVIRONMENT_NAME] = this.config.app.environment;\n            /**\n             * @deprecated will be removed in the future and has been replaced by ATTR_DEPLOYMENT_ENVIRONMENT_NAME (deployment.environment.name)\n             */\n            attributes[SEMRESATTRS_DEPLOYMENT_ENVIRONMENT] = this.config.app.environment;\n        }\n        const browserMeta = this.metas.value.browser;\n        if (isArray(browserMeta === null || browserMeta === void 0 ? void 0 : browserMeta.brands)) {\n            attributes[ATTR_BROWSER_BRANDS] = browserMeta.brands.map((entry) => entry.brand);\n        }\n        if (browserMeta === null || browserMeta === void 0 ? void 0 : browserMeta.language) {\n            attributes[ATTR_BROWSER_LANGUAGE] = browserMeta.language;\n        }\n        if (typeof (browserMeta === null || browserMeta === void 0 ? void 0 : browserMeta.mobile) === 'boolean') {\n            attributes[ATTR_BROWSER_MOBILE] = Boolean(browserMeta.mobile);\n        }\n        if (browserMeta === null || browserMeta === void 0 ? void 0 : browserMeta.os) {\n            attributes[ATTR_BROWSER_PLATFORM] = browserMeta.os;\n        }\n        if (browserMeta === null || browserMeta === void 0 ? void 0 : browserMeta.userAgent) {\n            attributes[ATTR_USER_AGENT_ORIGINAL] = browserMeta.userAgent;\n        }\n        attributes[ATTR_PROCESS_RUNTIME_NAME] = 'browser';\n        attributes[ATTR_PROCESS_RUNTIME_VERSION] = (_a = this.metas.value.browser) === null || _a === void 0 ? void 0 : _a.userAgent;\n        attributes[ATTR_TELEMETRY_DISTRO_NAME] = 'faro-web-sdk';\n        attributes[ATTR_TELEMETRY_DISTRO_VERSION] = VERSION;\n        Object.assign(attributes, options.resourceAttributes);\n        const resource = defaultResource().merge(resourceFromAttributes(attributes));\n        const provider = new WebTracerProvider({\n            resource,\n            sampler: {\n                shouldSample: () => {\n                    return {\n                        decision: getSamplingDecision(this.api.getSession()),\n                    };\n                },\n            },\n            spanProcessors: [\n                (_b = options.spanProcessor) !== null && _b !== void 0 ? _b : new FaroUserActionSpanProcessor(new FaroMetaAttributesSpanProcessor(new BatchSpanProcessor(new FaroTraceExporter({ api: this.api }), {\n                    scheduledDelayMillis: TracingInstrumentation.SCHEDULED_BATCH_DELAY_MS,\n                    maxExportBatchSize: 30,\n                }), this.metas)),\n            ],\n        });\n        provider.register({\n            propagator: (_c = options.propagator) !== null && _c !== void 0 ? _c : new W3CTraceContextPropagator(),\n            contextManager: options.contextManager,\n        });\n        const { propagateTraceHeaderCorsUrls, fetchInstrumentationOptions, xhrInstrumentationOptions } = (_d = this.options.instrumentationOptions) !== null && _d !== void 0 ? _d : {};\n        registerInstrumentations({\n            instrumentations: (_e = options.instrumentations) !== null && _e !== void 0 ? _e : getDefaultOTELInstrumentations({\n                ignoreUrls: this.getIgnoreUrls(),\n                propagateTraceHeaderCorsUrls,\n                fetchInstrumentationOptions,\n                xhrInstrumentationOptions,\n            }),\n        });\n        this.api.initOTEL(trace, context);\n    }\n    getIgnoreUrls() {\n        return this.transports.transports.flatMap((transport) => transport.getIgnoreUrls());\n    }\n}\nTracingInstrumentation.SCHEDULED_BATCH_DELAY_MS = 1000;\n//# sourceMappingURL=instrumentation.js.map","import { faro, getWebInstrumentations, initializeFaro } from '@grafana/faro-web-sdk'\nimport { TracingInstrumentation } from '@grafana/faro-web-tracing'\n\n\nexport default function FrontendObservability({\n}): null {\n  // skip if already initialized\n  if (faro.api) {\n    return null\n  }\n\n  try {\n    initializeFaro({\n      url: 'https://faro-collector-prod-ap-northeast-0.grafana.net/collect/1c8bf52d49f406b79e9f9605bf7b9037',\n      app: {\n        name: 'auth-ui',\n        version: '1.0.0',\n        environment: 'production'\n      },\n      instrumentations: [\n        // Mandatory, omits default instrumentations otherwise.\n        ...getWebInstrumentations(),\n\n        // Tracing package to get end-to-end visibility for HTTP requests.\n        new TracingInstrumentation(),\n      ],\n    })\n  } catch {\n    return null\n  }\n  return null\n}","import FrontendObservability from \"@/frontendObservability\";\nimport \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <>\n    <FrontendObservability />\n    <Component {...pageProps} />\n  </>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexport { BaggageImpl };\n//# sourceMappingURL=baggage-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nconst SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce((hValue, current) => {\n        const value = `${hValue}${hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''}${current}`;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(([key, value]) => {\n        let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    const keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    const key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    const value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    let metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key, value, metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    const result = {};\n    if (typeof value === 'string' && value.length > 0) {\n        value.split(BAGGAGE_ITEMS_SEPARATOR).forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair !== undefined && keyPair.value.length > 0) {\n                result[keyPair.key] = keyPair.value;\n            }\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator {\n    inject(context, carrier, setter) {\n        const baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        const keyPairs = getKeyPairs(baggage)\n            .filter((pair) => {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        const headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    }\n    extract(context, carrier, getter) {\n        const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        const baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        const baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                const baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    }\n    fields() {\n        return [BAGGAGE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock {\n    _monotonicClock;\n    _epochMillis;\n    _performanceMillis;\n    /**\n     * Create a new AnchoredClock anchored to the current time returned by systemClock.\n     *\n     * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n     * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n     */\n    constructor(systemClock, monotonicClock) {\n        this._monotonicClock = monotonicClock;\n        this._epochMillis = systemClock.now();\n        this._performanceMillis = monotonicClock.now();\n    }\n    /**\n     * Returns the current time by adding the number of milliseconds since the\n     * AnchoredClock was created to the creation epoch time\n     */\n    now() {\n        const delta = this._monotonicClock.now() - this._performanceMillis;\n        return this._epochMillis + delta;\n    }\n}\n//# sourceMappingURL=anchored-clock.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    const out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    for (const [key, val] of Object.entries(attributes)) {\n        if (!isAttributeKey(key)) {\n            diag.warn(`Invalid attribute key: ${key}`);\n            continue;\n        }\n        if (!isAttributeValue(val)) {\n            diag.warn(`Invalid attribute value set for key: ${key}`);\n            continue;\n        }\n        if (Array.isArray(val)) {\n            out[key] = val.slice();\n        }\n        else {\n            out[key] = val;\n        }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    let type;\n    for (const element of arr) {\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return (ex) => {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    const result = {};\n    let current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(propertyName => {\n            if (result[propertyName])\n                return;\n            const value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '2.0.1';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';\n//# sourceMappingURL=semconv.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../../version';\nimport { ATTR_TELEMETRY_SDK_NAME, ATTR_TELEMETRY_SDK_LANGUAGE, TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS, ATTR_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { ATTR_PROCESS_RUNTIME_NAME } from '../../semconv';\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n    [ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',\n    [ATTR_PROCESS_RUNTIME_NAME]: 'browser',\n    [ATTR_TELEMETRY_SDK_LANGUAGE]: TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,\n    [ATTR_TELEMETRY_SDK_VERSION]: VERSION,\n};\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(_timer) { }\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator {\n    _propagators;\n    _fields;\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    constructor(config = {}) {\n        this._propagators = config.propagators ?? [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n            .reduce((x, y) => x.concat(y), [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    inject(context, carrier, setter) {\n        for (const propagator of this._propagators) {\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                diag.warn(`Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n        }\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    extract(context, carrier, getter) {\n        return this._propagators.reduce((ctx, propagator) => {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(`Failed to extract with ${propagator.constructor.name}. Err: ${err.message}`);\n            }\n            return ctx;\n        }, context);\n    }\n    fields() {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    }\n}\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState {\n    _internalState = new Map();\n    constructor(rawTraceState) {\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    set(key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        const traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    }\n    unset(key) {\n        const traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    }\n    get(key) {\n        return this._internalState.get(key);\n    }\n    serialize() {\n        return this._keys()\n            .reduce((agg, key) => {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    }\n    _parse(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce((agg, part) => {\n            const listMember = part.trim(); // Optional Whitespace (OWS) handling\n            const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                const key = listMember.slice(0, i);\n                const value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    }\n    _keys() {\n        return Array.from(this._internalState.keys()).reverse();\n    }\n    _clone() {\n        const traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    }\n}\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(`^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`);\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    const match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator {\n    inject(context, carrier, setter) {\n        const spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        const traceParent = `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    }\n    extract(context, carrier, getter) {\n        const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        const traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        const spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            const state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    }\n    fields() {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nconst RPC_METADATA_KEY = createContextKey('OpenTelemetry SDK Context Key RPC_METADATA');\nexport var RPCType;\n(function (RPCType) {\n    RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nexport function setRPCMetadata(context, meta) {\n    return context.setValue(RPC_METADATA_KEY, meta);\n}\nexport function deleteRPCMetadata(context) {\n    return context.deleteValue(RPC_METADATA_KEY);\n}\nexport function getRPCMetadata(context) {\n    return context.getValue(RPC_METADATA_KEY);\n}\n//# sourceMappingURL=rpc-metadata.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    const proto = getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    const isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    let unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    const result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nconst MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args) {\n    let result = args.shift();\n    const objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level = 0, objects) {\n    let result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (let i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                const twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    const obj1 = result[key];\n                    const obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            const arr1 = objects.get(obj1) || [];\n                            const arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key });\n                            arr2.push({ obj: two, key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    const arr = objects.get(obj[key]) || [];\n    for (let i = 0, j = arr.length; i < j; i++) {\n        const info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, TimeoutError.prototype);\n    }\n}\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout(promise, timeout) {\n    let timeoutHandle;\n    const timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n        timeoutHandle = setTimeout(function timeoutHandler() {\n            reject(new TimeoutError('Operation timed out.'));\n        }, timeout);\n    });\n    return Promise.race([promise, timeoutPromise]).then(result => {\n        clearTimeout(timeoutHandle);\n        return result;\n    }, reason => {\n        clearTimeout(timeoutHandle);\n        throw reason;\n    });\n}\n//# sourceMappingURL=timeout.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Deferred {\n    _promise;\n    _resolve;\n    _reject;\n    constructor() {\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    get promise() {\n        return this._promise;\n    }\n    resolve(val) {\n        this._resolve(val);\n    }\n    reject(err) {\n        this._reject(err);\n    }\n}\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture {\n    _callback;\n    _that;\n    _isCalled = false;\n    _deferred = new Deferred();\n    constructor(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n    }\n    get isCalled() {\n        return this._isCalled;\n    }\n    get promise() {\n        return this._deferred.promise;\n    }\n    call(...args) {\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve(this._callback.call(this._that, ...args)).then(val => this._deferred.resolve(val), err => this._deferred.reject(err));\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    }\n}\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, DiagLogLevel } from '@opentelemetry/api';\nconst logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Convert a string to a {@link DiagLogLevel}, defaults to {@link DiagLogLevel} if the log level does not exist or undefined if the input is undefined.\n * @param value\n */\nexport function diagLogLevelFromString(value) {\n    if (value == null) {\n        // don't fall back to default - no value set has different semantics for ús than an incorrect value (do not set vs. fall back to default)\n        return undefined;\n    }\n    const resolvedLogLevel = logLevelMap[value.toUpperCase()];\n    if (resolvedLogLevel == null) {\n        diag.warn(`Unknown log level \"${value}\", expected one of ${Object.keys(logLevelMap)}, using default`);\n        return DiagLogLevel.INFO;\n    }\n    return resolvedLogLevel;\n}\n//# sourceMappingURL=configuration.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '../trace/suppress-tracing';\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppression of Traces.\n */\nexport function _export(exporter, arg) {\n    return new Promise(resolve => {\n        // prevent downstream exporter calls from generating spans\n        context.with(suppressTracing(context.active()), () => {\n            exporter.export(arg, (result) => {\n                resolve(result);\n            });\n        });\n    });\n}\n//# sourceMappingURL=exporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { W3CBaggagePropagator } from './baggage/propagation/W3CBaggagePropagator';\nexport { AnchoredClock } from './common/anchored-clock';\nexport { isAttributeValue, sanitizeAttributes } from './common/attributes';\nexport { globalErrorHandler, setGlobalErrorHandler, } from './common/global-error-handler';\nexport { loggingErrorHandler } from './common/logging-error-handler';\nexport { addHrTimes, getTimeOrigin, hrTime, hrTimeDuration, hrTimeToMicroseconds, hrTimeToMilliseconds, hrTimeToNanoseconds, hrTimeToTimeStamp, isTimeInput, isTimeInputHrTime, millisToHrTime, timeInputToHrTime, } from './common/time';\nexport { ExportResultCode } from './ExportResult';\nexport { parseKeyPairsIntoRecord } from './baggage/utils';\nexport { SDK_INFO, _globalThis, getStringFromEnv, getBooleanFromEnv, getNumberFromEnv, getStringListFromEnv, otperformance, unrefTimer, } from './platform';\nexport { CompositePropagator, } from './propagation/composite';\nexport { TRACE_PARENT_HEADER, TRACE_STATE_HEADER, W3CTraceContextPropagator, parseTraceParent, } from './trace/W3CTraceContextPropagator';\nexport { RPCType, deleteRPCMetadata, getRPCMetadata, setRPCMetadata, } from './trace/rpc-metadata';\nexport { isTracingSuppressed, suppressTracing, unsuppressTracing, } from './trace/suppress-tracing';\nexport { TraceState } from './trace/TraceState';\nexport { merge } from './utils/merge';\nexport { TimeoutError, callWithTimeout } from './utils/timeout';\nexport { isUrlIgnored, urlMatches } from './utils/url';\nexport { BindOnceFuture } from './utils/callback';\nexport { diagLogLevelFromString } from './utils/configuration';\nimport { _export } from './internal/exporter';\nexport const internal = {\n    _export,\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan() {\n    return getSpan(ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexport { NoopTracerProvider };\n//# sourceMappingURL=NoopTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getActiveSpan = getActiveSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < DiagLogLevel.NONE) {\n        maxLevel = DiagLogLevel.NONE;\n    }\n    else if (maxLevel > DiagLogLevel.ALL) {\n        maxLevel = DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', DiagLogLevel.WARN),\n        info: _filterFunc('info', DiagLogLevel.INFO),\n        debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n//# sourceMappingURL=diag.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLink = function (_link) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLinks = function (_links) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toAnyValue = exports.toKeyValue = exports.toAttributes = exports.createInstrumentationScope = exports.createResource = void 0;\nfunction createResource(resource) {\n    return {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0,\n    };\n}\nexports.createResource = createResource;\nfunction createInstrumentationScope(scope) {\n    return {\n        name: scope.name,\n        version: scope.version,\n    };\n}\nexports.createInstrumentationScope = createInstrumentationScope;\nfunction toAttributes(attributes) {\n    return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\nexports.toAttributes = toAttributes;\nfunction toKeyValue(key, value) {\n    return {\n        key: key,\n        value: toAnyValue(value),\n    };\n}\nexports.toKeyValue = toKeyValue;\nfunction toAnyValue(value) {\n    const t = typeof value;\n    if (t === 'string')\n        return { stringValue: value };\n    if (t === 'number') {\n        if (!Number.isInteger(value))\n            return { doubleValue: value };\n        return { intValue: value };\n    }\n    if (t === 'boolean')\n        return { boolValue: value };\n    if (value instanceof Uint8Array)\n        return { bytesValue: value };\n    if (Array.isArray(value))\n        return { arrayValue: { values: value.map(toAnyValue) } };\n    if (t === 'object' && value != null)\n        return {\n            kvlistValue: {\n                values: Object.entries(value).map(([k, v]) => toKeyValue(k, v)),\n            },\n        };\n    return {};\n}\nexports.toAnyValue = toAnyValue;\n//# sourceMappingURL=internal.js.map","\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EStatusCode = exports.ESpanKind = void 0;\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nvar ESpanKind;\n(function (ESpanKind) {\n    /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n    ESpanKind[ESpanKind[\"SPAN_KIND_UNSPECIFIED\"] = 0] = \"SPAN_KIND_UNSPECIFIED\";\n    /** Indicates that the span represents an internal operation within an application,\n     * as opposed to an operation happening at the boundaries. Default value.\n     */\n    ESpanKind[ESpanKind[\"SPAN_KIND_INTERNAL\"] = 1] = \"SPAN_KIND_INTERNAL\";\n    /** Indicates that the span covers server-side handling of an RPC or other\n     * remote network request.\n     */\n    ESpanKind[ESpanKind[\"SPAN_KIND_SERVER\"] = 2] = \"SPAN_KIND_SERVER\";\n    /** Indicates that the span describes a request to some remote service.\n     */\n    ESpanKind[ESpanKind[\"SPAN_KIND_CLIENT\"] = 3] = \"SPAN_KIND_CLIENT\";\n    /** Indicates that the span describes a producer sending a message to a broker.\n     * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n     * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n     * by the broker while the logical processing of the message might span a much longer time.\n     */\n    ESpanKind[ESpanKind[\"SPAN_KIND_PRODUCER\"] = 4] = \"SPAN_KIND_PRODUCER\";\n    /** Indicates that the span describes consumer receiving a message from a broker.\n     * Like the PRODUCER kind, there is often no direct critical path latency relationship\n     * between producer and consumer spans.\n     */\n    ESpanKind[ESpanKind[\"SPAN_KIND_CONSUMER\"] = 5] = \"SPAN_KIND_CONSUMER\";\n})(ESpanKind = exports.ESpanKind || (exports.ESpanKind = {}));\n/** StatusCode enum. */\nvar EStatusCode;\n(function (EStatusCode) {\n    /** The default status. */\n    EStatusCode[EStatusCode[\"STATUS_CODE_UNSET\"] = 0] = \"STATUS_CODE_UNSET\";\n    /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n    EStatusCode[EStatusCode[\"STATUS_CODE_OK\"] = 1] = \"STATUS_CODE_OK\";\n    /** The Span contains an error. */\n    EStatusCode[EStatusCode[\"STATUS_CODE_ERROR\"] = 2] = \"STATUS_CODE_ERROR\";\n})(EStatusCode = exports.EStatusCode || (exports.EStatusCode = {}));\n//# sourceMappingURL=internal-types.js.map","// extracted by mini-css-extract-plugin","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport var DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function getStringFromEnv(_) {\n    return undefined;\n}\nexport function getBooleanFromEnv(_) {\n    return undefined;\n}\nexport function getNumberFromEnv(_) {\n    return undefined;\n}\nexport function getStringListFromEnv(_) {\n    return undefined;\n}\n//# sourceMappingURL=environment.js.map","\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBinary = void 0;\nfunction intValue(charCode) {\n    // 0-9\n    if (charCode >= 48 && charCode <= 57) {\n        return charCode - 48;\n    }\n    // a-f\n    if (charCode >= 97 && charCode <= 102) {\n        return charCode - 87;\n    }\n    // A-F\n    return charCode - 55;\n}\nfunction hexToBinary(hexStr) {\n    const buf = new Uint8Array(hexStr.length / 2);\n    let offset = 0;\n    for (let i = 0; i < hexStr.length; i += 2) {\n        const hi = intValue(hexStr.charCodeAt(i));\n        const lo = intValue(hexStr.charCodeAt(i + 1));\n        buf[offset++] = (hi << 4) | lo;\n    }\n    return buf;\n}\nexports.hexToBinary = hexToBinary;\n//# sourceMappingURL=hex-to-binary.js.map","\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ATTR_HTTP_USER_AGENT = exports.ATTR_HTTP_URL = exports.ATTR_HTTP_STATUS_CODE = exports.ATTR_HTTP_SCHEME = exports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = exports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = exports.ATTR_HTTP_REQUEST_BODY_SIZE = exports.ATTR_HTTP_METHOD = exports.ATTR_HTTP_HOST = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.\n *\n * @example www.example.org\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.\n */\nexports.ATTR_HTTP_HOST = 'http.host';\n/**\n * Deprecated, use `http.request.method` instead.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.method`.\n */\nexports.ATTR_HTTP_METHOD = 'http.method';\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_HTTP_REQUEST_BODY_SIZE = 'http.request.body.size';\n/**\n * Deprecated, use `http.request.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.body.size`.\n */\nexports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\n/**\n * Deprecated, use `http.response.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.header.<key>`.\n */\nexports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\n/**\n * Deprecated, use `url.scheme` instead.\n *\n * @example http\n * @example https\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.scheme` instead.\n */\nexports.ATTR_HTTP_SCHEME = 'http.scheme';\n/**\n * Deprecated, use `http.response.status_code` instead.\n *\n * @example 200\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.status_code`.\n */\nexports.ATTR_HTTP_STATUS_CODE = 'http.status_code';\n/**\n * Deprecated, use `url.full` instead.\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.full`.\n */\nexports.ATTR_HTTP_URL = 'http.url';\n/**\n * Deprecated, use `user_agent.original` instead.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `user_agent.original`.\n */\nexports.ATTR_HTTP_USER_AGENT = 'http.user_agent';\n//# sourceMappingURL=semconv.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n//# sourceMappingURL=context.js.map","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return require(\"private-next-pages/_app.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  ","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.9.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexport { NoopTextMapPropagator };\n//# sourceMappingURL=NoopTextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage() {\n    return getBaggage(ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, getActiveBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.getActiveBaggage = getActiveBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(url, ignoredUrls) {\n    if (!ignoredUrls) {\n        return false;\n    }\n    for (const ignoreUrl of ignoredUrls) {\n        if (urlMatches(url, ignoreUrl)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=url.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from './trace_flags';\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map","\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOtlpEncoder = exports.encodeAsString = exports.encodeAsLongBits = exports.toLongBits = exports.hrTimeToNanos = void 0;\nconst core_1 = require(\"@opentelemetry/core\");\nconst hex_to_binary_1 = require(\"./hex-to-binary\");\nfunction hrTimeToNanos(hrTime) {\n    const NANOSECONDS = BigInt(1000000000);\n    return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\nexports.hrTimeToNanos = hrTimeToNanos;\nfunction toLongBits(value) {\n    const low = Number(BigInt.asUintN(32, value));\n    const high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n    return { low, high };\n}\nexports.toLongBits = toLongBits;\nfunction encodeAsLongBits(hrTime) {\n    const nanos = hrTimeToNanos(hrTime);\n    return toLongBits(nanos);\n}\nexports.encodeAsLongBits = encodeAsLongBits;\nfunction encodeAsString(hrTime) {\n    const nanos = hrTimeToNanos(hrTime);\n    return nanos.toString();\n}\nexports.encodeAsString = encodeAsString;\nconst encodeTimestamp = typeof BigInt !== 'undefined' ? encodeAsString : core_1.hrTimeToNanoseconds;\nfunction identity(value) {\n    return value;\n}\nfunction optionalHexToBinary(str) {\n    if (str === undefined)\n        return undefined;\n    return (0, hex_to_binary_1.hexToBinary)(str);\n}\nconst DEFAULT_ENCODER = {\n    encodeHrTime: encodeAsLongBits,\n    encodeSpanContext: hex_to_binary_1.hexToBinary,\n    encodeOptionalSpanContext: optionalHexToBinary,\n};\nfunction getOtlpEncoder(options) {\n    if (options === undefined) {\n        return DEFAULT_ENCODER;\n    }\n    const useLongBits = options.useLongBits ?? true;\n    const useHex = options.useHex ?? false;\n    return {\n        encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n        encodeSpanContext: useHex ? identity : hex_to_binary_1.hexToBinary,\n        encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,\n    };\n}\nexports.getOtlpEncoder = getOtlpEncoder;\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    const epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    const seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    let timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        const perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    const timeOrigin = millisToHrTime(getTimeOrigin());\n    const now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    let seconds = endTime[0] - startTime[0];\n    let nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    const precision = NANOSECOND_DIGITS;\n    const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n    const nanoString = tmp.substring(tmp.length - precision - 1);\n    const date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    const out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createExportTraceServiceRequest = exports.toOtlpSpanEvent = exports.toOtlpLink = exports.sdkSpanToOtlpSpan = void 0;\nconst internal_1 = require(\"../common/internal\");\nconst utils_1 = require(\"../common/utils\");\nfunction sdkSpanToOtlpSpan(span, encoder) {\n    const ctx = span.spanContext();\n    const status = span.status;\n    const parentSpanId = span.parentSpanContext?.spanId\n        ? encoder.encodeSpanContext(span.parentSpanContext?.spanId)\n        : undefined;\n    return {\n        traceId: encoder.encodeSpanContext(ctx.traceId),\n        spanId: encoder.encodeSpanContext(ctx.spanId),\n        parentSpanId: parentSpanId,\n        traceState: ctx.traceState?.serialize(),\n        name: span.name,\n        // Span kind is offset by 1 because the API does not define a value for unset\n        kind: span.kind == null ? 0 : span.kind + 1,\n        startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n        endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n        attributes: (0, internal_1.toAttributes)(span.attributes),\n        droppedAttributesCount: span.droppedAttributesCount,\n        events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n        droppedEventsCount: span.droppedEventsCount,\n        status: {\n            // API and proto enums share the same values\n            code: status.code,\n            message: status.message,\n        },\n        links: span.links.map(link => toOtlpLink(link, encoder)),\n        droppedLinksCount: span.droppedLinksCount,\n    };\n}\nexports.sdkSpanToOtlpSpan = sdkSpanToOtlpSpan;\nfunction toOtlpLink(link, encoder) {\n    return {\n        attributes: link.attributes ? (0, internal_1.toAttributes)(link.attributes) : [],\n        spanId: encoder.encodeSpanContext(link.context.spanId),\n        traceId: encoder.encodeSpanContext(link.context.traceId),\n        traceState: link.context.traceState?.serialize(),\n        droppedAttributesCount: link.droppedAttributesCount || 0,\n    };\n}\nexports.toOtlpLink = toOtlpLink;\nfunction toOtlpSpanEvent(timedEvent, encoder) {\n    return {\n        attributes: timedEvent.attributes\n            ? (0, internal_1.toAttributes)(timedEvent.attributes)\n            : [],\n        name: timedEvent.name,\n        timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n        droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n    };\n}\nexports.toOtlpSpanEvent = toOtlpSpanEvent;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction createExportTraceServiceRequest(spans, options) {\n    const encoder = (0, utils_1.getOtlpEncoder)(options);\n    return {\n        resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n    };\n}\nexports.createExportTraceServiceRequest = createExportTraceServiceRequest;\nfunction createResourceMap(readableSpans) {\n    const resourceMap = new Map();\n    for (const record of readableSpans) {\n        let ilsMap = resourceMap.get(record.resource);\n        if (!ilsMap) {\n            ilsMap = new Map();\n            resourceMap.set(record.resource, ilsMap);\n        }\n        // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n        const instrumentationScopeKey = `${record.instrumentationScope.name}@${record.instrumentationScope.version || ''}:${record.instrumentationScope.schemaUrl || ''}`;\n        let records = ilsMap.get(instrumentationScopeKey);\n        if (!records) {\n            records = [];\n            ilsMap.set(instrumentationScopeKey, records);\n        }\n        records.push(record);\n    }\n    return resourceMap;\n}\nfunction spanRecordsToResourceSpans(readableSpans, encoder) {\n    const resourceMap = createResourceMap(readableSpans);\n    const out = [];\n    const entryIterator = resourceMap.entries();\n    let entry = entryIterator.next();\n    while (!entry.done) {\n        const [resource, ilmMap] = entry.value;\n        const scopeResourceSpans = [];\n        const ilmIterator = ilmMap.values();\n        let ilmEntry = ilmIterator.next();\n        while (!ilmEntry.done) {\n            const scopeSpans = ilmEntry.value;\n            if (scopeSpans.length > 0) {\n                const spans = scopeSpans.map(readableSpan => sdkSpanToOtlpSpan(readableSpan, encoder));\n                scopeResourceSpans.push({\n                    scope: (0, internal_1.createInstrumentationScope)(scopeSpans[0].instrumentationScope),\n                    spans: spans,\n                    schemaUrl: scopeSpans[0].instrumentationScope.schemaUrl,\n                });\n            }\n            ilmEntry = ilmIterator.next();\n        }\n        // TODO SDK types don't provide resource schema URL at this time\n        const transformedSpans = {\n            resource: (0, internal_1.createResource)(resource),\n            scopeSpans: scopeResourceSpans,\n            schemaUrl: undefined,\n        };\n        out.push(transformedSpans);\n        entry = entryIterator.next();\n    }\n    return out;\n}\n//# sourceMappingURL=internal.js.map"],"names":["FrontendObservability","faro","api","url","app","name","version","environment","instrumentations","getWebInstrumentations","TracingInstrumentation","App","Component","pageProps"],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,247,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265]}